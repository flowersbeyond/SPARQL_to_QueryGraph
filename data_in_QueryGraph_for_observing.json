[
    {
        "id": 0,
        "question": "How often did Jane Fonda marry?",
        "keywords": "Jane Fonda, marry, how often",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT COUNT(DISTINCT ?uri) \nWHERE { \n        res:Jane_Fonda dbo:spouse ?uri . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 1,
        "question": "Which books by Kerouac were published by Viking Press?",
        "keywords": "book, Kerouac, publish, Viking Press",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Book .\n        ?uri dbo:publisher res:Viking_Press .\n        ?uri dbo:author res:Jack_Kerouac .\n}",
        "topic_entity": "http://dbpedia.org/resource/Viking_Press",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/Viking_Press"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Jack_Kerouac",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/author",
                "ValueType": null
            }
        ]
    },
    {
        "id": 2,
        "question": "Who created Wikipedia?",
        "keywords": "Wikipedia, created",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Wikipedia dbo:author ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Wikipedia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Wikipedia",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 3,
        "question": "How many films did Hal Roach produce?",
        "keywords": "Hal Roach, produce, film",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res:  <http://dbpedia.org/resource/>\nSELECT COUNT(DISTINCT ?uri) \nWHERE {\n        ?uri dbo:producer res:Hal_Roach .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 4,
        "question": "In which country does the Nile start?",
        "keywords": "Nile, start, country",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Nile dbo:sourceCountry ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Nile",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Nile",
                "predicate": "http://dbpedia.org/ontology/sourceCountry",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 5,
        "question": "Which river does the Brooklyn Bridge cross?",
        "keywords": "river, cross, Brooklyn Bridge",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {       \n        res:Brooklyn_Bridge dbo:crosses ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Brooklyn_Bridge",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Brooklyn_Bridge",
                "predicate": "http://dbpedia.org/ontology/crosses",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 6,
        "question": "How tall is Claudia Schiffer?",
        "keywords": "Claudia Schiffer, tall",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?height \nWHERE { \n        res:Claudia_Schiffer dbo:height ?height . \n}",
        "topic_entity": "http://dbpedia.org/resource/Claudia_Schiffer",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Claudia_Schiffer",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?height"
            }
        ],
        "constraints": []
    },
    {
        "id": 7,
        "question": "Which television shows were created by Walt Disney?",
        "keywords": "television show, create, Walt Disney",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:TelevisionShow .\n        ?uri dbo:creator res:Walt_Disney .\n}",
        "topic_entity": "http://dbpedia.org/resource/Walt_Disney",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "http://dbpedia.org/resource/Walt_Disney"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/TelevisionShow",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 8,
        "question": "Give me all cities in New Jersey with more than 100000 inhabitants.",
        "keywords": "New Jersey, city, inhabitants, more than 100000",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:City .  \n        ?uri dbo:isPartOf res:New_Jersey .  \n        ?uri dbo:populationTotal ?inhabitants . \n        FILTER (?inhabitants > 100000) . \n}",
        "topic_entity": "http://dbpedia.org/resource/New_Jersey",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/isPartOf",
                "object": "http://dbpedia.org/resource/New_Jersey"
            }
        ],
        "constraints": null
    },
    {
        "id": 9,
        "question": "Which actors were born in Germany?",
        "keywords": "actor, born, Germany",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res:  <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Actor .\n      { ?uri dbo:birthPlace res:Germany . }\n      UNION \n      { ?uri dbo:birthPlace ?place .\n        ?place dbo:country res:Germany . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 10,
        "question": "Which countries have more than two official languages?",
        "keywords": "country, official language, more than two",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Country  .\n        ?uri dbo:officialLanguage ?language .\n} \nGROUP BY ?uri\nHAVING (COUNT(?language) > 2)",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 11,
        "question": "When was the Statue of Liberty built?",
        "keywords": "Statue of Liberty, built",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?date \nWHERE { \n        res:Statue_of_Liberty dbp:beginningDate ?date . \n}",
        "topic_entity": "http://dbpedia.org/resource/Statue_of_Liberty",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Statue_of_Liberty",
                "predicate": "http://dbpedia.org/property/beginningDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 12,
        "question": "Give me all people that were born in Vienna and died in Berlin.",
        "keywords": "people, born, Vienna, die, Berlin",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:birthPlace res:Vienna . \n        ?uri dbo:deathPlace res:Berlin . \n}",
        "topic_entity": "http://dbpedia.org/resource/Vienna",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Vienna"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Berlin",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/deathPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 13,
        "question": "Give me all movies with Tom Cruise.",
        "keywords": "movie, Tom Cruise",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Film.\n        ?uri dbo:starring res:Tom_Cruise .\n}",
        "topic_entity": "http://dbpedia.org/resource/Tom_Cruise",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Tom_Cruise"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 14,
        "question": "How tall is Michael Jordan?",
        "keywords": "tall, Michael Jordan",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?num \nWHERE { \n        res:Michael_Jordan dbo:height ?num . \n}",
        "topic_entity": "http://dbpedia.org/resource/Michael_Jordan",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Michael_Jordan",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 15,
        "question": "Give me all breeds of the German Shepherd dog.",
        "keywords": "breed, German Shepherd dog",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbp:breed res:German_Shepherd . \n}",
        "topic_entity": "http://dbpedia.org/resource/German_Shepherd",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/breed",
                "object": "http://dbpedia.org/resource/German_Shepherd"
            }
        ],
        "constraints": []
    },
    {
        "id": 16,
        "question": "What is the official language of Suriname?",
        "keywords": "Suriname, official language",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { \n        res:Suriname dbo:officialLanguage ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Suriname",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Suriname",
                "predicate": "http://dbpedia.org/ontology/officialLanguage",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 17,
        "question": "Who composed the music for Harold and Maude?",
        "keywords": "Harold and Maude, compose, music",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE {\n       res:Harold_and_Maude dbo:musicComposer ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Harold_and_Maude",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Harold_and_Maude",
                "predicate": "http://dbpedia.org/ontology/musicComposer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 18,
        "question": "Who wrote the book The Pillars of the Earth?",
        "keywords": "wrote, book, The pillars of the Earth",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:The_Pillars_of_the_Earth dbo:author ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 19,
        "question": "Which languages are spoken in Estonia?",
        "keywords": "language, spoken, Estonia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:spokenIn res:Estonia . \n}",
        "topic_entity": "http://dbpedia.org/resource/Estonia",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/spokenIn",
                "object": "http://dbpedia.org/resource/Estonia"
            }
        ],
        "constraints": []
    },
    {
        "id": 20,
        "question": "Are tree frogs a type of amphibian?",
        "keywords": "tree frog, amphibian",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Hylidae dbo:class res:Amphibian . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 21,
        "question": "When did Latvia join the EU?",
        "keywords": "Latvia, join, EU",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT DISTINCT ?date \nWHERE {       \n        res:Latvia dbp:accessioneudate ?date .      \n}",
        "topic_entity": "http://dbpedia.org/resource/Latvia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Latvia",
                "predicate": "http://dbpedia.org/property/accessioneudate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 22,
        "question": "Where is the residence of the prime minister of Spain?",
        "keywords": "prime minister, Spain, residence",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Prime_Minister_of_Spain dbp:residence ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Prime_Minister_of_Spain",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Prime_Minister_of_Spain",
                "predicate": "http://dbpedia.org/property/residence",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 23,
        "question": "Which countries have more than ten caves?",
        "keywords": "country, cave, more than ten",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Country . ?cave rdf:type dbo:Cave . { ?cave dbo:location ?uri . } UNION { ?cave dbo:location ?loc . ?loc dbo:country ?uri . } } GROUP BY ?uri HAVING(COUNT(?cave) > 10)",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 24,
        "question": "Who created Goofy?",
        "keywords": "created, Goofy",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Goofy dbo:creator ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Goofy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Goofy",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 25,
        "question": "Give me all soccer clubs in Spain.",
        "keywords": "Spain, soccer club",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n          ?uri rdf:type dbo:SoccerClub .\n        { ?uri dbo:ground res:Spain . }\n        UNION \n        { ?uri dbp:ground ?ground . \n          FILTER (regex(?ground,'Spain')) }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 26,
        "question": "Which other weapons did the designer of the Uzi develop?",
        "keywords": "Uzi, designer, develop, weapon",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Weapon .  \n        ?uri dbp:designer ?x . \n        res:Uzi dbp:designer ?x . \n        FILTER (?uri != res:Uzi) \n}",
        "topic_entity": "http://dbpedia.org/resource/Uzi",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Uzi",
                "predicate": "http://dbpedia.org/property/designer",
                "object": "?x"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/designer",
                "object": "?x"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Weapon",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "NotEqual",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Uzi",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": null,
                "ValueType": null
            }
        ]
    },
    {
        "id": 27,
        "question": "Which caves have more than 3 entrances?",
        "keywords": "cave, entrance, more than 3",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res:  <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Cave .\n        ?uri dbp:entranceCount ?entrance .\n        FILTER (?entrance > 3) .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 28,
        "question": "Which countries adopted the Euro?",
        "keywords": "country, adopt, Euro",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n          ?uri rdf:type dbo:Country .\n        { ?uri dbo:currency res:Euro . } \n        UNION \n        { ?uri dbp:currencyCode 'EUR'@en . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 29,
        "question": "Which country does the creator of Miffy come from?",
        "keywords": "Miffy, creator, country",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Miffy dbo:creator ?x .\n        ?x dbo:nationality ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Miffy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Miffy",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/nationality",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 30,
        "question": "Give me all female given names.",
        "keywords": "female, given name",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:GivenName .\n        ?uri dbo:gender res:Female .\n}",
        "topic_entity": "http://dbpedia.org/resource/Female",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/gender",
                "object": "http://dbpedia.org/resource/Female"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/GivenName",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 31,
        "question": "Was Margaret Thatcher a chemist?",
        "keywords": "Margaret Thatcher, chemist",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nASK \nWHERE { \n        res:Margaret_Thatcher dbo:profession res:Chemist . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 32,
        "question": "Which German cities have more than 250000 inhabitants?",
        "keywords": "city, Germany, inhabitants, more than 250000",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n       { ?uri rdf:type dbo:City . } \n       UNION \n       { ?uri rdf:type dbo:Town . } \n         ?uri dbo:country res:Germany . \n         ?uri dbo:populationTotal ?population . \n         FILTER ( ?population > 250000 ) }",
        "topic_entity": "http://dbpedia.org/resource/Germany",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Germany"
            }
        ],
        "constraints": null
    },
    {
        "id": 33,
        "question": "Was Marc Chagall a jew?",
        "keywords": "Marc Chagall, jew",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n       res:Marc_Chagall dbp:ethnicity 'Jewish'@en .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 34,
        "question": "Which presidents were born in 1945?",
        "keywords": "president, born, 1945",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:President . \n        ?uri dbo:birthDate ?date .\n        FILTER regex(?date, '^1945') .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 35,
        "question": "How many Aldi stores are there?",
        "keywords": "own, Aldi",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?number\nWHERE {\n        res:Aldi dbo:numberOfLocations ?number .\n}",
        "topic_entity": "http://dbpedia.org/resource/Aldi",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Aldi",
                "predicate": "http://dbpedia.org/ontology/numberOfLocations",
                "object": "?number"
            }
        ],
        "constraints": []
    },
    {
        "id": 36,
        "question": "Was U.S. president Jackson involved in a war?",
        "keywords": "U.S. president, Jackson, war",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n        res:Andrew_Jackson dbo:battle ?battle .    \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 37,
        "question": "What is the capital of Canada?",
        "keywords": "capital, Canada",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Canada dbo:capital ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Canada",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Canada",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 38,
        "question": "Which museum exhibits The Scream by Munch?",
        "keywords": "museum, Scream, Munch",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n       res:The_Scream dbo:museum ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/The_Scream",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Scream",
                "predicate": "http://dbpedia.org/ontology/museum",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 39,
        "question": "For which label did Elvis record his first album?",
        "keywords": "Elvis, first, album, label",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?x rdf:type dbo:Album .\n        ?x dbo:artist res:Elvis_Presley .\n        ?x dbo:releaseDate ?y .\n        ?x dbo:recordLabel ?uri .\n}\nORDER BY ASC(?y) \nOFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Elvis_Presley",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/artist",
                "object": "http://dbpedia.org/resource/Elvis_Presley"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/recordLabel",
                "object": "?uri"
            }
        ],
        "constraints": null
    },
    {
        "id": 40,
        "question": "Do Prince Harry and Prince William have the same mother?",
        "keywords": "Prince Harry, Prince William, same, mother",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nASK \nWHERE { \n        <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbp:mother ?x . \n        <http://dbpedia.org/resource/Prince_Harry_of_Wales> dbp:mother ?y . \n        FILTER (?x = ?y) \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 41,
        "question": "In which military conflicts did Lawrence of Arabia participate?",
        "keywords": "Lawrence of Arabia, military conflict",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:T._E._Lawrence dbo:battle ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/T._E._Lawrence",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/T._E._Lawrence",
                "predicate": "http://dbpedia.org/ontology/battle",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 42,
        "question": "Which states border Illinois?",
        "keywords": "state, border, Illinois",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Illinois dbp:borderingstates ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Illinois",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Illinois",
                "predicate": "http://dbpedia.org/property/borderingstates",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 43,
        "question": "Give me all islands that belong to Japan.",
        "keywords": "islands, Japan",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Island .  \n        ?uri dbo:country res:Japan . \n}",
        "topic_entity": "http://dbpedia.org/resource/Japan",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Japan"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Island",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 44,
        "question": "What is the highest mountain in Australia?",
        "keywords": "Australia, highest mountain",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Mountain .\n        ?uri dbo:locatedInArea res:Australia .\n        ?uri dbo:elevation ?elevation .\n} \nORDER BY DESC(?elevation) \nOFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "http://dbpedia.org/resource/Australia"
            }
        ],
        "constraints": null
    },
    {
        "id": 45,
        "question": "Which airports are located in California, USA?",
        "keywords": "airport, located, California, USA",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE { \n\t?uri rdf:type dbo:Airport .\n      { ?uri dbo:location res:California . }\n      UNION\n      { ?uri dbo:city res:California . } \n      UNION \n      { ?uri dbo:city ?city .\n        ?city dbo:isPartOf res:California . }\n      UNION\n      { ?uri dbo:operator res:California . } \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 46,
        "question": "Who developed Minecraft?",
        "keywords": "Minecraft, develop",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Minecraft dbo:developer ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Minecraft",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Minecraft",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 47,
        "question": "Which Chess players died in the same place they were born in?",
        "keywords": "chess players, British earl, die, same, place, born",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:ChessPlayer .  \n        ?uri dbo:birthPlace ?x .  \n        ?uri dbo:deathPlace ?y . \n        FILTER (?x = ?y) . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 48,
        "question": "How many space missions have there been?",
        "keywords": "space mission",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT COUNT(DISTINCT ?uri) \nWHERE { \n        ?uri rdf:type dbo:SpaceMission . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 49,
        "question": "Give me all cars that are produced in Germany.",
        "keywords": "car, produce, Germany",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Automobile . \n      { ?uri dbo:assembly res:Germany . } \n      UNION \n      { ?uri dbp:assembly res:Germany . } \n      UNION \n      { { ?uri dbo:manufacturer ?x . } \n        UNION \n        { ?uri dbp:manufacturer ?x . } \n        { ?x dbo:locationCountry res:Germany . } \n        UNION \n        { ?x dbo:location res:Germany . } \n      } \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 50,
        "question": "Who was the wife of U.S. president Lincoln?",
        "keywords": "U.S. president, Lincoln, wife",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Abraham_Lincoln dbo:spouse ?uri.\n}",
        "topic_entity": "http://dbpedia.org/resource/Abraham_Lincoln",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Abraham_Lincoln",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 51,
        "question": "How many children did Benjamin Franklin have?",
        "keywords": "Benjamin Franklin, child",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT COUNT(DISTINCT ?uri) \nWHERE { \n        res:Benjamin_Franklin dbo:child ?uri . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 52,
        "question": "Is Michelle Obama the wife of Barack Obama?",
        "keywords": "Michelle Obama, wife, Barack Obama",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Barack_Obama dbo:spouse res:Michelle_Obama . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 53,
        "question": "Give me all actors starring in movies directed by William Shatner.",
        "keywords": "actor, starring, movie, direct, William Shatner",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?x dbo:director res:William_Shatner . \n        ?x dbo:starring ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/William_Shatner",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/William_Shatner"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 54,
        "question": "List the children of Margaret Thatcher.",
        "keywords": "Margaret Thatcher, child",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Margaret_Thatcher dbo:child ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Margaret_Thatcher",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Margaret_Thatcher",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 55,
        "question": "Who is the editor of Forbes?",
        "keywords": "Forbes, editor",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Forbes dbo:editor ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Forbes",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Forbes",
                "predicate": "http://dbpedia.org/ontology/editor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 56,
        "question": "Give me all actors starring in Last Action Hero.",
        "keywords": "actor, starring, Last Action Hero",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Last_Action_Hero dbo:starring ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Last_Action_Hero",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Last_Action_Hero",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 57,
        "question": "In which programming language is GIMP written?",
        "keywords": "GIMP, programming language",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n        res:GIMP dbo:programmingLanguage ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/GIMP",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/GIMP",
                "predicate": "http://dbpedia.org/ontology/programmingLanguage",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 58,
        "question": "In which country is the Limerick Lake?",
        "keywords": "Limerick Lake, country",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n        res:Limerick_Lake dbo:country ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Limerick_Lake",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Limerick_Lake",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 59,
        "question": "Give me all video games published by Mean Hamster Software.",
        "keywords": "video game, publish, Mean Hamster Software",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n      ?uri rdf:type dbo:VideoGame .\n      ?uri dbo:publisher res:Mean_Hamster_Software . \n}",
        "topic_entity": "http://dbpedia.org/resource/Mean_Hamster_Software",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/Mean_Hamster_Software"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/VideoGame",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 60,
        "question": "Who produced films starring Natalie Portman?",
        "keywords": "produce, film, starring, Natalie Portman",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?film rdf:type dbo:Film .\n        ?film dbo:starring res:Natalie_Portman .\n        ?film dbo:producer ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Natalie_Portman",
        "core_inferential_chain": [
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Natalie_Portman"
            },
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/producer",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 61,
        "question": "In which films did Julia Roberts as well as Richard Gere play?",
        "keywords": "film, play, Julia Roberts, Richard Gere",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Film .\n        ?uri dbo:starring res:Julia_Roberts .\n        ?uri dbo:starring res:Richard_Gere.\n}",
        "topic_entity": "http://dbpedia.org/resource/Julia_Roberts",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Julia_Roberts"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Richard_Gere",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/starring",
                "ValueType": null
            }
        ]
    },
    {
        "id": 62,
        "question": "Was Natalie Portman born in the United States?",
        "keywords": "Natalie Portman, born, United States",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE { \n        res:Natalie_Portman dbo:birthPlace ?city .\n        ?city dbo:country res:United_States .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 63,
        "question": "How many films did Leonardo DiCaprio star in?",
        "keywords": "film, star, Leonardo DiCaprio",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT COUNT(DISTINCT ?uri) \nWHERE {\n        ?uri rdf:type dbo:Film .\n        ?uri dbo:starring res:Leonardo_DiCaprio . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 64,
        "question": "What is the second highest mountain on Earth?",
        "keywords": "mountain, second highest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Mountain . \n        ?uri dbo:elevation ?elevation . \n} \nORDER BY DESC(?elevation) \nOFFSET 1 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 65,
        "question": "Give me all books by William Goldman with more than 300 pages.",
        "keywords": "book, William Goldman, pages, more than 300",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Book .\n        ?uri dbo:author res:William_Goldman .\n        ?uri dbo:numberOfPages ?x .\n        FILTER (?x > 300)\n}",
        "topic_entity": "http://dbpedia.org/resource/William_Goldman",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/William_Goldman"
            }
        ],
        "constraints": null
    },
    {
        "id": 66,
        "question": "Give me all Danish films.",
        "keywords": "film, Denmark",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Film .  \n        ?uri dbo:country res:Denmark . \n}",
        "topic_entity": "http://dbpedia.org/resource/Denmark",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Denmark"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 67,
        "question": "What is the largest city in Australia?",
        "keywords": "Australia, largest city",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n       res:Australia dbo:largestCity ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Australia",
                "predicate": "http://dbpedia.org/ontology/largestCity",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 68,
        "question": "Who painted The Storm on the Sea of Galilee?",
        "keywords": "The Storm on the Sea of Galilee, paint",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:The_Storm_on_the_Sea_of_Galilee dbo:author ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/The_Storm_on_the_Sea_of_Galilee",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Storm_on_the_Sea_of_Galilee",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 69,
        "question": "Give me all launch pads operated by NASA.",
        "keywords": "launch pad, operate, NASA",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:LaunchPad .  \n        ?uri dbo:operator res:NASA . \n}",
        "topic_entity": "http://dbpedia.org/resource/NASA",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/operator",
                "object": "http://dbpedia.org/resource/NASA"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/LaunchPad",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 70,
        "question": "Give me the birthdays of all actors of the television show Charmed.",
        "keywords": "television show, Charmed, actor, birthday",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?date \nWHERE { \n        res:Charmed dbo:starring ?actor .\n        ?actor dbo:birthDate ?date .\n}",
        "topic_entity": "http://dbpedia.org/resource/Charmed",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Charmed",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?actor"
            },
            {
                "subject": "?actor",
                "predicate": "http://dbpedia.org/ontology/birthDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 71,
        "question": "In which city did John F. Kennedy die?",
        "keywords": "city, John F. Kennedy, die",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE { \n        res:John_F._Kennedy dbo:deathPlace ?uri .\n        ?uri rdf:type dbo:City .\n}",
        "topic_entity": "http://dbpedia.org/resource/John_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/City",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 72,
        "question": "Who produced the most films?",
        "keywords": "film, produced, most",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?film rdf:type dbo:Film .\n        ?film dbo:producer ?uri .\n} \nORDER BY DESC(COUNT(?film)) \nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 73,
        "question": "Who created the comic Captain America?",
        "keywords": "comic, Captain America, create",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Captain_America dbo:creator ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Captain_America",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Captain_America",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 74,
        "question": "Is there a video game called Battle Chess?",
        "keywords": "video game, Battle Chess",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nASK \nWHERE {\n        ?uri rdf:type dbo:VideoGame .\n        ?uri rdfs:label 'Battle Chess'@en .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 75,
        "question": "Which mountains are higher than the Nanga Parbat?",
        "keywords": "mountain, higher, Nanga Parbat",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Nanga_Parbat dbo:elevation ?elevation .\n        ?uri rdf:type dbo:Mountain .\n      { ?uri dbo:elevation ?otherelevation . }\n      UNION\n      { ?uri dbp:elevationM ?otherelevation . } \n        FILTER (?otherelevation > ?elevation) .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 76,
        "question": "List all episodes of the first season of the HBO television series The Sopranos.",
        "keywords": "HBO, television series, Sopranos, first season, episode",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri dbo:series res:The_Sopranos  .\n        ?uri dbo:seasonNumber 1 .\n}",
        "topic_entity": "http://dbpedia.org/resource/The_Sopranos",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/series",
                "object": "http://dbpedia.org/resource/The_Sopranos"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Value",
                "Argument": "1",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/seasonNumber",
                "ValueType": null
            }
        ]
    },
    {
        "id": 77,
        "question": "Which telecommunications organizations are located in Belgium?",
        "keywords": "telecommunications organization, located, Belgium",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT COUNT(DISTINCT ?uri)\nWHERE { \t\n        ?uri  rdf:type dbo:Organisation  .\n      { ?uri dbo:industry res:Telecommunication . } \n      UNION \n      { ?uri dbp:industry ?industry . \n        FILTER (regex(?industry,'Telecommunications')) . }\n      { ?uri dbo:location res:Belgium. } \n      UNION \n      { ?uri dbp:locationCountry 'Belgium'@en . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 78,
        "question": "Is the wife of president Obama called Michelle?",
        "keywords": "Obama, president, wife, called, Michelle",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nASK \nWHERE {\n        res:Barack_Obama dbo:spouse ?spouse .\n        ?spouse rdfs:label ?name .\n        FILTER(regex(?name,'Michelle')) \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 79,
        "question": "What is the highest mountain?",
        "keywords": "mountain, highest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Mountain  .\n        ?uri dbo:elevation ?elevation .\n} \nORDER BY DESC(?elevation) \nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 80,
        "question": "Who are the parents of the wife of Juan Carlos I?",
        "keywords": "Juan Carlos I, wife, parents",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Juan_Carlos_I_of_Spain dbo:spouse ?x . \n        ?x dbo:parent ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Juan_Carlos_I_of_Spain",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Juan_Carlos_I_of_Spain",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/parent",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 81,
        "question": "Give me all Canadian Grunge record labels.",
        "keywords": "record label, Canadian, Grunge",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:RecordLabel .\n        ?uri dbo:genre res:Grunge .\n        ?uri dbo:country res:Canada .\n}",
        "topic_entity": "http://dbpedia.org/resource/Grunge",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/genre",
                "object": "http://dbpedia.org/resource/Grunge"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/RecordLabel",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Canada",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/country",
                "ValueType": null
            }
        ]
    },
    {
        "id": 82,
        "question": "What is the birth name of Angela Merkel?",
        "keywords": "birth name, Angela Merkel",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?string \nWHERE { \n        res:Angela_Merkel dbp:birthName ?string . \n}",
        "topic_entity": "http://dbpedia.org/resource/Angela_Merkel",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Angela_Merkel",
                "predicate": "http://dbpedia.org/property/birthName",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 83,
        "question": "What is the longest river?",
        "keywords": "river, longest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:River . \n      { ?uri dbo:length ?l . } \n      UNION \n      { ?uri dbp:length ?l . } \n} ORDER BY DESC(?l) \nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 84,
        "question": "Did Socrates influence Aristotle?",
        "keywords": "Socrates, influence, Aristotle",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Aristotle dbo:influencedBy res:Socrates . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 85,
        "question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "keywords": "film, directed, Garry Marshall, starring, Julia Roberts",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Film .\n        ?uri dbo:starring res:Julia_Roberts .\n        ?uri dbo:director res:Garry_Marshall .\n}",
        "topic_entity": "http://dbpedia.org/resource/Julia_Roberts",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Julia_Roberts"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Garry_Marshall",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/director",
                "ValueType": null
            }
        ]
    },
    {
        "id": 86,
        "question": "Is Christian Bale starring in Velvet Goldmine?",
        "keywords": "Christian Bale, starring, Velvet Goldmine",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK\nWHERE {\n        res:Velvet_Goldmine dbo:starring res:Christian_Bale .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 87,
        "question": "Who developed the video game World of Warcraft?",
        "keywords": "video game, World of Warcraft, develop",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:World_of_Warcraft dbo:developer ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/World_of_Warcraft",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/World_of_Warcraft",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 88,
        "question": "Through which countries does the Yenisei river flow?",
        "keywords": "Yenisei river, flow through, country",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Yenisei_River dbo:country ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Yenisei_River",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Yenisei_River",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 89,
        "question": "List all games by GMT.",
        "keywords": "game, GMT",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:publisher res:GMT_Games . \n}",
        "topic_entity": "http://dbpedia.org/resource/GMT_Games",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/GMT_Games"
            }
        ],
        "constraints": []
    },
    {
        "id": 90,
        "question": "Which organizations were founded in 1930?",
        "keywords": "organization, founded, 1930",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Organisation .\n      { ?uri dbo:formationYear ?date . }\n      UNION \n      { ?uri dbo:foundingYear ?date. }\n      FILTER regex(?date,'^1930') . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 91,
        "question": "How many employees does IBM have?",
        "keywords": "IBM, employees",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?number \nWHERE {\n        res:IBM dbo:numberOfEmployees ?number .\n}",
        "topic_entity": "http://dbpedia.org/resource/IBM",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/IBM",
                "predicate": "http://dbpedia.org/ontology/numberOfEmployees",
                "object": "?number"
            }
        ],
        "constraints": []
    },
    {
        "id": 92,
        "question": "When was Alberta admitted as province?",
        "keywords": "Alberta, admit, province",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?date \nWHERE { \n        res:Alberta dbp:admittancedate ?date . \n}",
        "topic_entity": "http://dbpedia.org/resource/Alberta",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Alberta",
                "predicate": "http://dbpedia.org/property/admittancedate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 93,
        "question": "Give me all cosmonauts.",
        "keywords": "cosmonauts",
        "sparql": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Astronaut . \n      { ?uri dbo:nationality res:Russia . } \n      UNION \n      { ?uri dbo:nationality res:Soviet_Union . } \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 94,
        "question": "Who is the mayor of Tel Aviv?",
        "keywords": "Tel Aviv, mayor",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { \n        res:Tel_Aviv dbo:leaderName ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Tel_Aviv",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Tel_Aviv",
                "predicate": "http://dbpedia.org/ontology/leaderName",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 95,
        "question": "Which ships were called after Benjamin Franklin?",
        "keywords": "ship, called after, Benjamin Franklin",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbp: <http://dbpedia.org/property/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbp:shipNamesake res:Benjamin_Franklin . \n}",
        "topic_entity": "http://dbpedia.org/resource/Benjamin_Franklin",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/shipNamesake",
                "object": "http://dbpedia.org/resource/Benjamin_Franklin"
            }
        ],
        "constraints": []
    },
    {
        "id": 96,
        "question": "How many employees does Google have?",
        "keywords": "Google, employees",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?num \nWHERE { \n        res:Google dbo:numberOfEmployees ?num . \n}",
        "topic_entity": "http://dbpedia.org/resource/Google",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Google",
                "predicate": "http://dbpedia.org/ontology/numberOfEmployees",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 97,
        "question": "Does Breaking Bad have more episodes than Game of Thrones?",
        "keywords": "Breaking Bad, episodes, more than, Game of Thrones",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Breaking_Bad dbo:numberOfEpisodes ?x . \n        res:Game_of_Thrones dbo:numberOfEpisodes ?y . \n        FILTER (?y > ?x) \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 98,
        "question": "Give me a list of all bandleaders that play trumpet.",
        "keywords": "bandleader, play, trumpet",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:occupation res:Bandleader . \n        ?uri dbo:instrument res:Trumpet . \n}",
        "topic_entity": "http://dbpedia.org/resource/Bandleader",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/occupation",
                "object": "http://dbpedia.org/resource/Bandleader"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Trumpet",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/instrument",
                "ValueType": null
            }
        ]
    },
    {
        "id": 99,
        "question": "When did Michael Jackson die?",
        "keywords": "Michael Jackson, die",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?date \nWHERE { \n        res:Michael_Jackson dbo:deathDate ?date . \n}",
        "topic_entity": "http://dbpedia.org/resource/Michael_Jackson",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Michael_Jackson",
                "predicate": "http://dbpedia.org/ontology/deathDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 100,
        "question": "How many languages are spoken in Turkmenistan?",
        "keywords": "languages, Turkmenistan",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT COUNT(DISTINCT ?x) \nWHERE { \n        res:Turkmenistan dbo:language ?x . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 101,
        "question": "Is Frank Herbert still alive?",
        "keywords": "Frank Herbert, alive",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n        OPTIONAL { res:Frank_Herbert dbo:deathDate ?date . }\n        FILTER (!BOUND(?date))\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 102,
        "question": "How many inhabitants does Maribor have?",
        "keywords": "Maribor, inhabitants",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?num \nWHERE { \n        res:Maribor dbo:populationTotal ?num . \n}",
        "topic_entity": "http://dbpedia.org/resource/Maribor",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Maribor",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 103,
        "question": "Give me a list of all lakes in Denmark.",
        "keywords": "lake, Denmark",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX yago: <http://dbpedia.org/class/yago/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        { ?uri rdf:type dbo:Lake .  \n          ?uri dbo:country res:Denmark . } \n        UNION \n        { ?uri rdf:type yago:LakesOfDenmark . } \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 104,
        "question": "Is proinsulin a protein?",
        "keywords": "proinsulin, protein",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nASK \nWHERE { \n        res:Proinsulin rdf:type dbo:Protein . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 105,
        "question": "Which awards did WikiLeaks win?",
        "keywords": "WikiLeaks, award",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:WikiLeaks dbp:awards ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/WikiLeaks",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/WikiLeaks",
                "predicate": "http://dbpedia.org/property/awards",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 106,
        "question": "Which country has the most official languages?",
        "keywords": "country, official language, most",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:Country  .\n        ?uri dbp:officialLanguages ?language .\n} \nORDER BY DESC(COUNT(?language)) \nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 107,
        "question": "Give me all communist countries.",
        "keywords": "communist countries",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Country .\n      { ?uri dbo:governmentType res:Communism . }\n        UNION\n      { ?uri dbo:governmentType res:Communist_state . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 108,
        "question": "Which instruments does Cat Stevens play?",
        "keywords": "Cat Stevens, instrument",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Cat_Stevens dbo:instrument ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Cat_Stevens",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Cat_Stevens",
                "predicate": "http://dbpedia.org/ontology/instrument",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 109,
        "question": "Give me all books written by Danielle Steel.",
        "keywords": "book, written, Danielle Steel",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Book .\n        ?uri dbo:author res:Danielle_Steel .\n}",
        "topic_entity": "http://dbpedia.org/resource/Danielle_Steel",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/Danielle_Steel"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 110,
        "question": "Did Tesla win a nobel prize in physics?",
        "keywords": "Tesla, nobel prize, physics",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 111,
        "question": "Who is the owner of Universal Studios?",
        "keywords": "Universal Studios, owner",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Universal_Studios dbo:owner ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Universal_Studios",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Universal_Studios",
                "predicate": "http://dbpedia.org/ontology/owner",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 112,
        "question": "Who is the governor of Wyoming?",
        "keywords": "governor, Wyoming",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbp: <http://dbpedia.org/property/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Wyoming dbp:governor ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Wyoming",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Wyoming",
                "predicate": "http://dbpedia.org/property/governor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 113,
        "question": "When were the Hells Angels founded?",
        "keywords": "Hells Angels, founded",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?date \nWHERE { \n        res:Hells_Angels dbp:founded ?date . \n}",
        "topic_entity": "http://dbpedia.org/resource/Hells_Angels",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Hells_Angels",
                "predicate": "http://dbpedia.org/property/founded",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 114,
        "question": "Give me all libraries established earlier than 1400.",
        "keywords": "libraries, established, earlier than 1400",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Library .\n        ?uri dbp:established ?year . \n        FILTER (?year < 1400)\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 115,
        "question": "Is Egypts largest city also its capital?",
        "keywords": "largest city, Egypt, capital",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nASK \nWHERE {\n        res:Egypt dbo:largestCity ?large .\n        res:Egypt dbo:capital ?capital .\n        FILTER (?large = ?capital)\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 116,
        "question": "How many countries are there in Europe?",
        "keywords": "Europe, countries",
        "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT COUNT(DISTINCT ?uri) \nWHERE {\n        ?uri rdf:type yago:EuropeanCountries .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 117,
        "question": "How many people live in the capital of Australia?",
        "keywords": "Australia, capital, people, live",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num \nWHERE {\n        res:Australia dbo:capital ?x .\n        ?x dbo:populationTotal ?num .\n}",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Australia",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 118,
        "question": "Give me all B-sides of the Ramones.",
        "keywords": "Ramones, B-sides",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?string \nWHERE {\n        ?x dbo:musicalArtist res:Ramones .\n        ?x dbo:bSide ?string . \n}",
        "topic_entity": "http://dbpedia.org/resource/Ramones",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/musicalArtist",
                "object": "http://dbpedia.org/resource/Ramones"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/bSide",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 119,
        "question": "Give me all films produced by Hal Roach.",
        "keywords": "film, produce, Hal Roach",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Film .\n        ?uri dbo:producer res:Hal_Roach .\n}",
        "topic_entity": "http://dbpedia.org/resource/Hal_Roach",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/producer",
                "object": "http://dbpedia.org/resource/Hal_Roach"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 120,
        "question": "Give me all Apollo 14 astronauts.",
        "keywords": "astronaut, Apollo 14",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:mission res:Apollo_14 . \n}",
        "topic_entity": "http://dbpedia.org/resource/Apollo_14",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/mission",
                "object": "http://dbpedia.org/resource/Apollo_14"
            }
        ],
        "constraints": []
    },
    {
        "id": 121,
        "question": "What is the area code of Berlin?",
        "keywords": "Berlin, area code",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?string \nWHERE {\n        res:Berlin dbo:areaCode ?string .\n}",
        "topic_entity": "http://dbpedia.org/resource/Berlin",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Berlin",
                "predicate": "http://dbpedia.org/ontology/areaCode",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 122,
        "question": "Which software has been developed by organizations founded in California?",
        "keywords": "organization, founded, California, develop, software",
        "sparql": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {         \n        ?uri rdf:type dbo:Software .\n        ?company rdf:type dbo:Company .\n        ?uri dbo:developer ?company . \n        { ?company dbo:foundationPlace res:California . }\n        UNION\n        { ?company dbp:foundation res:California . }     \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 123,
        "question": "What is the currency of the Czech Republic?",
        "keywords": "Czech republic, currency",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n       res:Czech_Republic dbo:currency ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Czech_Republic",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Czech_Republic",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 124,
        "question": "Which music albums contain the song Last Christmas?",
        "keywords": "music album, song, Last Christmas",
        "sparql": "PREFIX dbo:  <http://dbpedia.org/ontology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?single dbo:album ?uri .\n        ?single rdfs:label 'Last Christmas'@en .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 125,
        "question": "Give me all world heritage sites designated within the past two years.",
        "keywords": "world heritage site, designate, past two years",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:WorldHeritageSite . \n        ?uri dbp:year ?x . \n        FILTER ( ?x >= '2012'^^xsd:integer) \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 126,
        "question": "Which cities does the Weser flow through?",
        "keywords": "Weser, flow through, city",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Weser dbo:city ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Weser",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Weser",
                "predicate": "http://dbpedia.org/ontology/city",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 127,
        "question": "Give me all companies in the advertising industry.",
        "keywords": "company, advertising industry",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT COUNT(DISTINCT ?uri)\nWHERE { \n        ?uri rdf:type dbo:Company  .\n        ?uri dbp:industry ?industry . \n        FILTER regex(?industry,'advertising','i') . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 128,
        "question": "Give me all people with first name Jimmy.",
        "keywords": "person, first name, Jimmy",
        "sparql": "PREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type foaf:Person.       \n        ?uri foaf:givenName 'Jimmy'@en   .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 129,
        "question": "Give me all movies directed by Francis Ford Coppola.",
        "keywords": "movie, direct, Francis Ford Coppola",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Film . \n        ?uri dbo:director res:Francis_Ford_Coppola . \n}",
        "topic_entity": "http://dbpedia.org/resource/Francis_Ford_Coppola",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Francis_Ford_Coppola"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 130,
        "question": "What is the ruling party in Lisbon?",
        "keywords": "Lisbon, ruling party",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Lisbon dbp:leaderParty ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Lisbon",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Lisbon",
                "predicate": "http://dbpedia.org/property/leaderParty",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 131,
        "question": "Give me all companies in Munich.",
        "keywords": "company, Munich",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Company . \n      { ?uri dbo:location res:Munich . } \n      UNION \n      { ?uri dbo:headquarter res:Munich . } \n      UNION \n      { ?uri dbo:locationCity res:Munich . } \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 132,
        "question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?",
        "keywords": "Cuban Missile Crisis, earlier, Bay of Pigs Invasion",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Cuban_missile_crisis dbo:date ?x . \n        res:Bay_of_Pigs_Invasion dbo:date ?y . \n        FILTER (?x < ?y) \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 133,
        "question": "Who was John F. Kennedy's vice president?",
        "keywords": "John F. Kennedy, vice president",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { res:John_F._Kennedy dbo:vicePresident ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/John_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/vicePresident",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 134,
        "question": "Who is the Formula 1 race driver with the most races?",
        "keywords": "Formula 1, race driver, races, most",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:FormulaOneRacer . \n        ?uri dbo:races ?x . \n} \nORDER BY DESC(?x) \nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 135,
        "question": "Give me all Methodist politicians.",
        "keywords": "politician, Methodist",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Politician . \n        ?uri dbo:religion res:Methodism . \n}",
        "topic_entity": "http://dbpedia.org/resource/Methodism",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/religion",
                "object": "http://dbpedia.org/resource/Methodism"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Politician",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 136,
        "question": "Give me all soccer clubs in the Premier League.",
        "keywords": "Premier League, soccer club",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:SoccerClub .\n        ?uri dbo:league res:Premier_League . \n}",
        "topic_entity": "http://dbpedia.org/resource/Premier_League",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/league",
                "object": "http://dbpedia.org/resource/Premier_League"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/SoccerClub",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 137,
        "question": "Which monarchs were married to a German?",
        "keywords": "monarch, married, German",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Monarch . \n        ?uri dbo:spouse ?spouse .\n      { ?spouse dbo:birthPlace res:Germany. }\n      UNION \n      { ?spouse dbo:birthPlace ?p . \n        ?p dbo:country res:Germany. }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 138,
        "question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.",
        "keywords": "song, Bruce Springsteen, release, between 1980 and 1990",
        "sparql": "PREFIX dbo:  <http://dbpedia.org/ontology/>\nPREFIX res:  <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Song .\n        ?uri dbo:artist res:Bruce_Springsteen .\n        ?uri dbo:releaseDate ?date . \n        FILTER (?date >= '1980-01-01'^^xsd:date && ?date <= '1990-12-31'^^xsd:date)\n}",
        "topic_entity": "http://dbpedia.org/resource/Bruce_Springsteen",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/artist",
                "object": "http://dbpedia.org/resource/Bruce_Springsteen"
            }
        ],
        "constraints": null
    },
    {
        "id": 139,
        "question": "Give me all members of Prodigy.",
        "keywords": "member, Prodigy",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:The_Prodigy dbo:bandMember ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/The_Prodigy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Prodigy",
                "predicate": "http://dbpedia.org/ontology/bandMember",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 140,
        "question": "Give me all Australian nonprofit organizations.",
        "keywords": "nonprofit organization, Australia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:type res:Nonprofit_organization . \n      { ?uri dbo:locationCountry res:Australia . } \n      UNION \n      { ?uri dbo:location ?x . \n        ?x dbo:country res:Australia . } \n}",
        "topic_entity": "http://dbpedia.org/resource/Nonprofit_organization",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/type",
                "object": "http://dbpedia.org/resource/Nonprofit_organization"
            }
        ],
        "constraints": []
    },
    {
        "id": 141,
        "question": "What did Bruce Carver die from?",
        "keywords": "Bruce Carver, die",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Bruce_Carver dbo:deathCause ?uri .     \n}",
        "topic_entity": "http://dbpedia.org/resource/Bruce_Carver",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Bruce_Carver",
                "predicate": "http://dbpedia.org/ontology/deathCause",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 142,
        "question": "In which country does the Ganges start?",
        "keywords": "Ganges, start, country",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Ganges dbo:sourceCountry ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Ganges",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ganges",
                "predicate": "http://dbpedia.org/ontology/sourceCountry",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 143,
        "question": "What is the total amount of men and women serving in the FDNY?",
        "keywords": "total amount, men, women, serve, FDNY",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?num \nWHERE { \n        res:New_York_City_Fire_Department dbp:employees ?num . \n}",
        "topic_entity": "http://dbpedia.org/resource/New_York_City_Fire_Department",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/New_York_City_Fire_Department",
                "predicate": "http://dbpedia.org/property/employees",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 144,
        "question": "Give me all world heritage sites designated within the past two years.",
        "keywords": "world heritage site, designate, past two years",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:WorldHeritageSite . \n      { ?uri dbp:year '2013'^^xsd:integer . }\n      UNION \n      { ?uri dbp:year '2014'^^xsd:integer . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 145,
        "question": "Does Breaking Bad have more episodes than Game of Thrones?",
        "keywords": "Breaking Bad, episodes, more than, Game of Thrones",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Breaking_Bad dbo:numberOfEpisodes ?x . \n        res:Game_of_Thrones dbo:numberOfEpisodes ?y . \n        FILTER (?x > ?y) \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 146,
        "question": "Do Prince Harry and Prince William have the same parents?",
        "keywords": "Prince Harry, Prince William, same, parents",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nASK\nWHERE { \n        <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbo:parent ?x . \n        <http://dbpedia.org/resource/Prince_Harry> dbo:parent ?x .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 147,
        "question": "In which UK city are the headquarters of the MI6?",
        "keywords": "MI6, headquarters, city, UK",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE { \n        res:Secret_Intelligence_Service dbo:headquarter ?uri . \n        ?uri dbo:country res:United_Kingdom . \n}",
        "topic_entity": "http://dbpedia.org/resource/Secret_Intelligence_Service",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Secret_Intelligence_Service",
                "predicate": "http://dbpedia.org/ontology/headquarter",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/United_Kingdom",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/country",
                "ValueType": null
            }
        ]
    },
    {
        "id": 148,
        "question": "How many missions does the Soyuz programme have?",
        "keywords": "how many, mission, Soyuz programme",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT COUNT(DISTINCT ?uri)\nWHERE { \n        ?uri dbp:programme res:Soyuz_programme . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 149,
        "question": "Did Socrates influence Aristotle?",
        "keywords": "Socrates, influence, Aristotle",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Socrates dbo:influenced res:Aristotle . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 150,
        "question": "Give me all Danish movies.",
        "keywords": "movie, Denmark",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:Film .  \n        ?uri dbo:country res:Denmark . \n}",
        "topic_entity": "http://dbpedia.org/resource/Denmark",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Denmark"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 151,
        "question": "Is Rita Wilson the wife of Tom Hanks?",
        "keywords": "Rita Wilson, wife, Tom Hanks",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Tom_Hanks dbo:spouse res:Rita_Wilson . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 152,
        "question": "Which films starring Clint Eastwood did he direct himself?",
        "keywords": "film, starring, direct, Clint Eastwood",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri dbo:director res:Clint_Eastwood .\n        ?uri dbo:starring res:Clint_Eastwood .\n}",
        "topic_entity": "http://dbpedia.org/resource/Clint_Eastwood",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Clint_Eastwood"
            }
        ],
        "constraints": []
    },
    {
        "id": 153,
        "question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.",
        "keywords": "song, Bruce Springsteen, release, between 1980 and 1990",
        "sparql": "PREFIX dbo:  <http://dbpedia.org/ontology/>\nPREFIX res:  <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Song .\n        ?uri dbo:artist res:Bruce_Springsteen .\n        ?uri dbo:releaseDate ?date . \n        FILTER (?date >= '1980-01-01'^^xsd:date && ?date <= '1990-12-31'^^xsd:date)\n}",
        "topic_entity": "http://dbpedia.org/resource/Bruce_Springsteen",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/artist",
                "object": "http://dbpedia.org/resource/Bruce_Springsteen"
            }
        ],
        "constraints": null
    },
    {
        "id": 154,
        "question": "Which movies did Kurosawa direct?",
        "keywords": "film, direct, Kurosawa",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Film .\n        ?uri dbo:director res:Akira_Kurosawa .\n}",
        "topic_entity": "http://dbpedia.org/resource/Akira_Kurosawa",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Akira_Kurosawa"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 155,
        "question": "Which television shows were created by John Cleese?",
        "keywords": "television show, create, John Cleese",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:TelevisionShow .\n        ?uri dbo:creator res:John_Cleese .\n}",
        "topic_entity": "http://dbpedia.org/resource/John_Cleese",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "http://dbpedia.org/resource/John_Cleese"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/TelevisionShow",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 156,
        "question": "Which awards did Douglas Hofstadter win?",
        "keywords": "Douglas Hofstadter, award",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Douglas_Hofstadter dbo:award ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Douglas_Hofstadter",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Douglas_Hofstadter",
                "predicate": "http://dbpedia.org/ontology/award",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 157,
        "question": "Who is the daughter of Robert Kennedy married to?",
        "keywords": "Robert Kennedy, daughter, married",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Robert_F._Kennedy dbo:child ?child .\n        ?child dbo:spouse ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Robert_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Robert_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?child"
            },
            {
                "subject": "?child",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 158,
        "question": "Who is the owner of Rolls-Royce?",
        "keywords": "Rolls-Royce, owner",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Rolls-Royce_Motors dbo:owner ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Rolls-Royce_Motors",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rolls-Royce_Motors",
                "predicate": "http://dbpedia.org/ontology/owner",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 159,
        "question": "Who designed the Brooklyn Bridge?",
        "keywords": "Brooklyn Bridge, design",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Brooklyn_Bridge dbo:architect ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Brooklyn_Bridge",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Brooklyn_Bridge",
                "predicate": "http://dbpedia.org/ontology/architect",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 160,
        "question": "What is the highest place of the Urals?",
        "keywords": "Urals, highest place",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {       \n        res:Ural_Mountains dbp:highest ?uri .  \n}",
        "topic_entity": "http://dbpedia.org/resource/Ural_Mountains",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ural_Mountains",
                "predicate": "http://dbpedia.org/property/highest",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 161,
        "question": "Give me all companies in the advertising industry.",
        "keywords": "company, advertising industry",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT COUNT(DISTINCT ?uri)\nWHERE { \n        ?uri rdf:type dbo:Company  .\n      { ?uri dbo:industry res:Advertising } \n      UNION \n      { ?uri dbo:industry ?industry . \n        FILTER regex(?industry,'advertising','i') . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 162,
        "question": "Give me all federal chancellors of Germany.",
        "keywords": "Germany, federal chancellors",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n          ?uri rdf:type dbo:Person .\n        { ?uri dbo:office 'Chancellor of Germany' . }\n        UNION\n        { ?uri dbp:office res:Chancellor_of_Germany . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 163,
        "question": "Which software has been developed by organizations founded in California?",
        "keywords": "organization, founded, California, develop, software",
        "sparql": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {         \n        ?uri rdf:type dbo:Software .\n        ?company rdf:type dbo:Company .\n        ?uri dbo:developer ?company . \n        ?company dbo:foundationPlace res:California .\n   \n}",
        "topic_entity": "http://dbpedia.org/resource/California",
        "core_inferential_chain": [
            {
                "subject": "?company",
                "predicate": "http://dbpedia.org/ontology/foundationPlace",
                "object": "http://dbpedia.org/resource/California"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?company"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Company",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Software",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 164,
        "question": "Was the wife of president Lincoln called Mary?",
        "keywords": "Lincoln, president, wife, called, Mary",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nASK \nWHERE {\n        res:Abraham_Lincoln dbo:spouse ?spouse .\n        ?spouse rdfs:label ?name .\n        FILTER(regex(?name,'Mary')) \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 165,
        "question": "Was Natalie Portman born in the United States?",
        "keywords": "Natalie Portman, born, United States",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE { \n        { res:Natalie_Portman dbo:birthPlace res:United_States . }\n        UNION\n        { res:Natalie_Portman dbo:birthPlace ?city .\n          ?city dbo:country res:United_States . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 166,
        "question": "How many inhabitants does the largest city in Canada have?",
        "keywords": "inhabitants, largest city, Canada",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num\nWHERE {\n        res:Canada dbo:largestCity ?city . \n        ?city dbo:populationTotal ?num .\n}",
        "topic_entity": "http://dbpedia.org/resource/Canada",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Canada",
                "predicate": "http://dbpedia.org/ontology/largestCity",
                "object": "?city"
            },
            {
                "subject": "?city",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 167,
        "question": "Who was the first to climb Mount Everest?",
        "keywords": "first, climb, mount Everest",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n          res:Mount_Everest dbo:firstAscentPerson ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/Mount_Everest",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mount_Everest",
                "predicate": "http://dbpedia.org/ontology/firstAscentPerson",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 168,
        "question": "How many programming languages are there?",
        "keywords": "how many, programming languages",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT COUNT(DISTINCT ?uri)\nWHERE {\n        ?uri rdf:type dbo:ProgrammingLanguage .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 169,
        "question": "What is the official color of the University of Oxford?",
        "keywords": "University of Oxford, official color",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?string\nWHERE {\n        res:University_of_Oxford dbo:officialSchoolColour ?string . \n}",
        "topic_entity": "http://dbpedia.org/resource/University_of_Oxford",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/University_of_Oxford",
                "predicate": "http://dbpedia.org/ontology/officialSchoolColour",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 170,
        "question": "To which artistic movement did the painter of The Three Dancers belong?",
        "keywords": "artistic movement, painter, The Three Dancers",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n         res:The_Three_Dancers dbo:author ?person .\n         ?person dbo:movement ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/The_Three_Dancers",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Three_Dancers",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?person"
            },
            {
                "subject": "?person",
                "predicate": "http://dbpedia.org/ontology/movement",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 171,
        "question": "Give me all animals that are extinct.",
        "keywords": "animal, extinct",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Animal .\n        ?uri dbo:conservationStatus 'EX' .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 172,
        "question": "Does Abraham Lincoln's death place have a website?",
        "keywords": "Abraham Lincoln, death place, website",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/>\nASK\nWHERE {\n        res:Abraham_Lincoln dbo:deathPlace ?p .\n        ?p dbp:website ?w .\n        \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 173,
        "question": "Who is the youngest Darts player?",
        "keywords": "Darts player, youngest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:DartsPlayer .\n        ?uri dbo:birthDate ?date .\n}\nORDER BY DESC(?date)\nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 174,
        "question": "Where was Bach born?",
        "keywords": "birthplace, Bach",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Johann_Sebastian_Bach dbo:birthPlace ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Johann_Sebastian_Bach",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Johann_Sebastian_Bach",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 175,
        "question": "In which countries can you pay using the West African CFA franc?",
        "keywords": "countries, pay, West African CFA franc",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n         ?uri dbo:currency res:West_African_CFA_franc . \n}",
        "topic_entity": "http://dbpedia.org/resource/West_African_CFA_franc",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "http://dbpedia.org/resource/West_African_CFA_franc"
            }
        ],
        "constraints": []
    },
    {
        "id": 176,
        "question": "What are the top-10 action role-playing video games according to IGN?",
        "keywords": "top-10, action, role-playing games, IGN",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> .\n        ?uri dbp:ign ?score .\n} \nORDER BY DESC(?score) \nLIMIT 10",
        "topic_entity": "http://dbpedia.org/resource/Category:Action_role-playing_video_games",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:Action_role-playing_video_games"
            }
        ],
        "constraints": null
    },
    {
        "id": 177,
        "question": "What is the most frequent cause of death?",
        "keywords": "cause of death, most frequent",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?x\nWHERE {\n        ?uri dbo:deathCause ?x . \n}\nORDER BY DESC(COUNT(DISTINCT ?uri)) \nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 178,
        "question": "Does the Isar flow into a lake?",
        "keywords": "Isar, flow, lake",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nASK\nWHERE {\n        ?x dbo:inflow res:Isar .\n        ?x rdf:type dbo:Lake . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 179,
        "question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.",
        "keywords": "films, producer, Steven Spielberg, production budget, $80 million",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Film .\n        ?uri dbo:director res:Steven_Spielberg .\n        ?uri dbo:budget ?b .\n        FILTER( xsd:double(?b) >= 8.0E7 )\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 180,
        "question": "Give me all writers that won the Nobel Prize in literature.",
        "keywords": "writer, win, Nobel Prize in literature",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Writer .\n        ?uri dbo:award res:Nobel_Prize_in_Literature . \n}",
        "topic_entity": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/award",
                "object": "http://dbpedia.org/resource/Nobel_Prize_in_Literature"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Writer",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 181,
        "question": "Give me all taikonauts.",
        "keywords": "taikonauts",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Astronaut .\n        ?uri dbo:nationality res:China .\n}",
        "topic_entity": "http://dbpedia.org/resource/China",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/nationality",
                "object": "http://dbpedia.org/resource/China"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Astronaut",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 182,
        "question": "How many pages does War and Peace have?",
        "keywords": "how many, pages, War and Peace",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?n\nWHERE {\n        res:War_and_Peace dbo:numberOfPages ?n .\n}",
        "topic_entity": "http://dbpedia.org/resource/War_and_Peace",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/War_and_Peace",
                "predicate": "http://dbpedia.org/ontology/numberOfPages",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 183,
        "question": "What is the bridge with the longest span?",
        "keywords": "bridge, longest span",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Bridge .\n        ?uri dbo:mainspan ?s . \n} \nORDER BY DESC(?s) \nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 184,
        "question": "Give me all actors called Baldwin.",
        "keywords": "actors, called, Baldwin",
        "sparql": "PREFIX dbo:  <http://dbpedia.org/ontology/>\nPREFIX res:  <http://dbpedia.org/resource/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri foaf:surname 'Baldwin'@en . \n      { ?uri dbo:occupation res:Actor . } \n      UNION \n      { ?uri rdf:type dbo:Actor . }\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 185,
        "question": "Who is the tallest player of the Atlanta Falcons?",
        "keywords": "Atlanta Falcons, player, tallest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri dbo:team res:Atlanta_Falcons . \n        ?uri dbo:height ?h .\n} \nORDER BY DESC(?h) \nOFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Atlanta_Falcons",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/team",
                "object": "http://dbpedia.org/resource/Atlanta_Falcons"
            }
        ],
        "constraints": null
    },
    {
        "id": 186,
        "question": "Which rivers flow into a German lake?",
        "keywords": "rivers, flow, German lake",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:River .\n        ?x dbo:inflow ?uri .\n        ?x rdf:type dbo:Lake . \n        ?x dbo:country res:Germany .\n}",
        "topic_entity": "http://dbpedia.org/resource/Germany",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Germany"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/inflow",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Lake",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/River",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 187,
        "question": "How many James Bond movies are there?",
        "keywords": "how many, James Bond movies",
        "sparql": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX yago: <http://dbpedia.org/class/yago/> \nSELECT COUNT(DISTINCT ?uri) \nWHERE {\n        ?uri rdf:type yago:JamesBondFilms . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 188,
        "question": "Which rockets were launched from Baikonur?",
        "keywords": "rockets, launched, Baikonur",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Rocket .\n        ?uri dbo:launchSite res:Baikonur_Cosmodrome .\n}",
        "topic_entity": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/launchSite",
                "object": "http://dbpedia.org/resource/Baikonur_Cosmodrome"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Rocket",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 189,
        "question": "Which pope succeeded John Paul II?",
        "keywords": "pope, succeed, John Paul II",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Pope_John_Paul_II dbp:successor ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Pope_John_Paul_II",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Pope_John_Paul_II",
                "predicate": "http://dbpedia.org/property/successor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 190,
        "question": "Give me all Dutch parties.",
        "keywords": "Dutch, party",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:PoliticalParty .\n        ?uri dbo:country res:Netherlands .\n}",
        "topic_entity": "http://dbpedia.org/resource/Netherlands",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Netherlands"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/PoliticalParty",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 191,
        "question": "When is Halloween?",
        "keywords": "date, Halloween",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?date\nWHERE {\n        res:Halloween dbp:date ?date . \n}",
        "topic_entity": "http://dbpedia.org/resource/Halloween",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Halloween",
                "predicate": "http://dbpedia.org/property/date",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 192,
        "question": "Give me all Swedish oceanographers.",
        "keywords": "Swedish, oceanographer",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:field res:Oceanography . \n        ?uri dbo:birthPlace res:Sweden .        \n}",
        "topic_entity": "http://dbpedia.org/resource/Oceanography",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/field",
                "object": "http://dbpedia.org/resource/Oceanography"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Sweden",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/birthPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 193,
        "question": "Give me all actors who were born in Berlin.",
        "keywords": "actors, born, Berlin",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Actor .\n        ?uri dbo:birthPlace res:Berlin .\n}",
        "topic_entity": "http://dbpedia.org/resource/Berlin",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Berlin"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Actor",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 194,
        "question": "What was the last movie with Alec Guinness?",
        "keywords": "Alec Guinness, last, movie",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Film . \n        ?uri dbo:starring res:Alec_Guinness .\n        ?uri dbo:releaseDate ?date . \n} \nORDER BY DESC(?date) \nLIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Alec_Guinness",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Alec_Guinness"
            }
        ],
        "constraints": null
    },
    {
        "id": 195,
        "question": "Which poet wrote the most books?",
        "keywords": "poet, most, books",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:occupation res:Poet .\n        ?x dbo:author ?uri .\n        ?x rdf:type dbo:Book .\n}\nORDER BY DESC(COUNT(?x))\nOFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Poet",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/occupation",
                "object": "http://dbpedia.org/resource/Poet"
            }
        ],
        "constraints": null
    },
    {
        "id": 196,
        "question": "How many languages are spoken in Colombia?",
        "keywords": "languages, Colombia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT COUNT(DISTINCT ?uri) \nWHERE {\n        ?uri rdf:type dbo:Language . \n        res:Colombia dbo:language ?uri .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 197,
        "question": "What does IYCM stand for?",
        "keywords": "IYCM, stand for",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:abbreviation 'IYCM' .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 198,
        "question": "What was Brazil's lowest rank in the FIFA World Ranking?",
        "keywords": "Brazil, lowest rank, FIFA World Ranking",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?n\nWHERE {\n        res:Brazil_national_football_team dbp:fifaMin ?n .\n}",
        "topic_entity": "http://dbpedia.org/resource/Brazil_national_football_team",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Brazil_national_football_team",
                "predicate": "http://dbpedia.org/property/fifaMin",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 199,
        "question": "Which ingredients do I need for carrot cake?",
        "keywords": "carrot cake, ingredients",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Carrot_cake dbo:ingredient ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Carrot_cake",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Carrot_cake",
                "predicate": "http://dbpedia.org/ontology/ingredient",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 200,
        "question": "Is Cola a beverage?",
        "keywords": "Cola, beverage",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nASK \nWHERE {\n        res:Cola rdf:type dbo:Beverage .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 201,
        "question": "Who has Tom Cruise been married to?",
        "keywords": "Tom Cruise, married",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri dbo:spouse res:Tom_Cruise.\n}",
        "topic_entity": "http://dbpedia.org/resource/Tom_Cruise",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "http://dbpedia.org/resource/Tom_Cruise"
            }
        ],
        "constraints": []
    },
    {
        "id": 202,
        "question": "Which of Tim Burton's films had the highest budget?",
        "keywords": "highest budget, film, Tim Burton",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:director res:Tim_Burton .\n        ?uri dbo:budget ?b .\n}\nORDER BY ?b\nOFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Tim_Burton",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Tim_Burton"
            }
        ],
        "constraints": null
    },
    {
        "id": 203,
        "question": "How heavy is Jupiter's lightest moon?",
        "keywords": "how heavy, Jupiter, moon, lightest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?n\nWHERE {\n        ?uri dbp:satelliteOf res:Jupiter .\n        ?uri dbo:mass ?n .\n}\nORDER BY ASC(?n)\nOFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Jupiter",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/satelliteOf",
                "object": "http://dbpedia.org/resource/Jupiter"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/mass",
                "object": "?n"
            }
        ],
        "constraints": [
            {
                "type": "order_limit_offset",
                "ValueType": "String",
                "SourceNodeIndex": null,
                "NodePredicate": null,
                "SortOrder": "Ascending",
                "Start": 0,
                "Count": 1
            }
        ]
    },
    {
        "id": 204,
        "question": "Which actor was casted in the most movies?",
        "keywords": "actor, casted, most movies",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Actor .\n        ?f rdf:type dbo:Film .\n        ?f dbo:starring ?uri .\n} \nORDER BY DESC(COUNT(DISTINCT(?f))) \nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 205,
        "question": "Is James Bond married?",
        "keywords": "James Bond, married",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n        res:James_Bond dbo:spouse ?uri . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 206,
        "question": "Give me all Australian metalcore bands.",
        "keywords": "Australian, metalcore bands",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Band .\n        ?uri dbo:genre res:Metalcore .\n      { ?uri dbo:hometown res:Australia . }\n      UNION \n      { ?uri dbo:hometown ?h .\n        ?h dbo:country res:Australia . }\n}",
        "topic_entity": "http://dbpedia.org/resource/Metalcore",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/genre",
                "object": "http://dbpedia.org/resource/Metalcore"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Band",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 207,
        "question": "Give me all actors who were born in Paris after 1950.",
        "keywords": "actors, born, Paris, after 1950",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Actor .\n        ?uri dbo:birthPlace res:Paris .\n        ?uri dbo:birthDate ?date .\n        FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 208,
        "question": "Who are the four youngest MVP basketball players?",
        "keywords": "four, youngest, MVP, basketball player",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:BasketballPlayer .\n        ?uri dbo:birthDate ?date.\n        ?uri dbp:highlights ?h .\n        FILTER regex(?h,'MVP')\n} \nORDER BY DESC(?date) \nOFFSET 0 LIMIT 4",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 209,
        "question": "Which companies have more than 1 million employees?",
        "keywords": "company, more than 1 million, employees",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n         ?uri rdf:type dbo:Company .\n       { ?uri dbo:numberOfEmployees ?n . }\n       UNION\n       { ?uri dbp:numEmployees ?n . }\n       FILTER ( ?n > 1000000 ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 210,
        "question": "Give all swimmers that were born in Moscow.",
        "keywords": "swimmer, born, Moscow",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n         ?uri rdf:type dbo:Swimmer .\n         ?uri dbo:birthPlace res:Moscow .\n}",
        "topic_entity": "http://dbpedia.org/resource/Moscow",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Moscow"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Swimmer",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 211,
        "question": "Show me the book that Muhammad Ali wrote.",
        "keywords": "book, wrote, Muhammad Ali",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n         ?uri rdf:type dbo:Book . \n         ?uri dbo:author res:Muhammad_Ali . \n}",
        "topic_entity": "http://dbpedia.org/resource/Muhammad_Ali",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/Muhammad_Ali"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 212,
        "question": "How many museums does Paris have?",
        "keywords": "how many, museum, Paris",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n         ?uri rdf:type dbo:Museum . \n         ?uri dbo:location res:Paris . \n}",
        "topic_entity": "http://dbpedia.org/resource/Paris",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/Paris"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Museum",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 213,
        "question": "Which city has the most inhabitants?",
        "keywords": "city, the most inhabitants",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n         ?uri rdf:type dbo:City . \n         ?uri dbo:populationTotal ?pop . \n}\nORDER BY DESC(?pop)\nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 214,
        "question": "Which city has the least inhabitants?",
        "keywords": "city, the least inhabitants",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n         ?uri rdf:type dbo:City . \n         ?uri dbo:populationTotal ?pop . \n}\nORDER BY ASC(?pop)\nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 215,
        "question": "Give me all the TV shows with Neil Patrick Harris.",
        "keywords": "TV shows, Neil Patrick Harris",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n         ?uri rdf:type dbo:TelevisionShow . \n         ?uri dbo:starring res:Neil_Patrick_Harris . \n}",
        "topic_entity": "http://dbpedia.org/resource/Neil_Patrick_Harris",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Neil_Patrick_Harris"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/TelevisionShow",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 216,
        "question": "Show a list of soccer clubs that play in the Bundesliga.",
        "keywords": "soccer clubs, play, Bundesliga",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:SoccerClub .\n        ?uri dbo:league res:Bundesliga . \n}",
        "topic_entity": "http://dbpedia.org/resource/Bundesliga",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/league",
                "object": "http://dbpedia.org/resource/Bundesliga"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/SoccerClub",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 217,
        "question": "What country is Mount Everest in?",
        "keywords": "country, Mount Everest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        res:Mount_Everest dbo:locatedInArea ?uri . \n        ?uri rdf:type dbo:Country .\n}",
        "topic_entity": "http://dbpedia.org/resource/Mount_Everest",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mount_Everest",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Country",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 218,
        "question": "Who is the founder of Penguin Books?",
        "keywords": "founder, Penguin Books",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        res:Penguin_Books dbo:founder ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Penguin_Books",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Penguin_Books",
                "predicate": "http://dbpedia.org/ontology/founder",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 219,
        "question": "Which programming languages influenced Javascript?",
        "keywords": "programming languages, influenced, Javascript",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:ProgrammingLanguage .\n        ?uri dbo:influenced res:JavaScript . \n}",
        "topic_entity": "http://dbpedia.org/resource/JavaScript",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/influenced",
                "object": "http://dbpedia.org/resource/JavaScript"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/ProgrammingLanguage",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 220,
        "question": "Did Che Guevara have children?",
        "keywords": "children, Che Guevara",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK\nWHERE { \n        res:Che_Guevara dbo:child ?uri . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 221,
        "question": "List all the musicals with music by Elton John.",
        "keywords": "musicals, music by, Elton John",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:Musical .\n        ?uri dbo:musicBy res:Elton_John .\n}",
        "topic_entity": "http://dbpedia.org/resource/Elton_John",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/musicBy",
                "object": "http://dbpedia.org/resource/Elton_John"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Musical",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 222,
        "question": "Show me all the breweries in Australia.",
        "keywords": "breweries, Australia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri ?x\nWHERE { \n        ?uri rdf:type dbo:Brewery .\n      { ?uri dbo:location res:Australia . }\n      UNION\n      { ?uri dbo:location ?x . \n        ?x dbo:country res:Australia . } \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 223,
        "question": "When was the Titanic completed?",
        "keywords": "Titanic, completion date",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?date\nWHERE { \n        res:RMS_Titanic dbo:completionDate ?date . \n}",
        "topic_entity": "http://dbpedia.org/resource/RMS_Titanic",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/RMS_Titanic",
                "predicate": "http://dbpedia.org/ontology/completionDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 224,
        "question": "How much did Pulp Fiction cost?",
        "keywords": "cost, Pulp Fiction",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?n\nWHERE { \n        res:Pulp_Fiction dbo:budget ?n . \n}",
        "topic_entity": "http://dbpedia.org/resource/Pulp_Fiction",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Pulp_Fiction",
                "predicate": "http://dbpedia.org/ontology/budget",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 225,
        "question": "How many airlines are there?",
        "keywords": "how many, airlines",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT COUNT(DISTINCT ?uri)\nWHERE { \n        ?uri rdf:type dbo:Airline . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 226,
        "question": "How much carbs does peanut butter have?",
        "keywords": "how much, carbs, peanut butter",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?carbs\nWHERE { \n        res:Peanut_butter dbp:carbs ?carbs .\n}",
        "topic_entity": "http://dbpedia.org/resource/Peanut_butter",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Peanut_butter",
                "predicate": "http://dbpedia.org/property/carbs",
                "object": "?carbs"
            }
        ],
        "constraints": []
    },
    {
        "id": 227,
        "question": "Which book has the most pages?",
        "keywords": "book, the most pages",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:Book . \n        ?uri dbo:numberOfPages ?n .\n}\nORDER BY DESC(?n)\nOFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 228,
        "question": "Which bridges cross the Seine?",
        "keywords": "bridges, cross, Seine",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:Bridge .\n        ?uri dbo:crosses res:Seine .\n}",
        "topic_entity": "http://dbpedia.org/resource/Seine",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/crosses",
                "object": "http://dbpedia.org/resource/Seine"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Bridge",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 229,
        "question": "Who is the mayor of the capital of French Polynesia?",
        "keywords": "mayor, capital, French Polynesia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n        res:French_Polynesia dbo:capital ?x .\n        ?x dbo:mayor ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/French_Polynesia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/French_Polynesia",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/mayor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 230,
        "question": "When did Dracula's creator die?",
        "keywords": "Dracula, creator, die",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?date\nWHERE { \n        res:Count_Dracula dbo:creator ?x . \n        ?x dbo:deathDate ?date .\n}",
        "topic_entity": "http://dbpedia.org/resource/Count_Dracula",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Count_Dracula",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/deathDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 231,
        "question": "What is the location of the Houses of Parliament?",
        "keywords": "location, Houses of Parliament",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT ?uri \nWHERE { \n         res:Palace_of_Westminster dbo:location ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Palace_of_Westminster",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Palace_of_Westminster",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 232,
        "question": "Show me all English Gothic buildings in Kent.",
        "keywords": "English Gothic buildings, Kent",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT ?uri \nWHERE { \n         ?uri rdf:type dbo:Building . \n         ?uri dbo:architecturalStyle res:English_Gothic_architecture .\n         ?uri dbo:location res:Kent .\n}",
        "topic_entity": "http://dbpedia.org/resource/English_Gothic_architecture",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/architecturalStyle",
                "object": "http://dbpedia.org/resource/English_Gothic_architecture"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Building",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Kent",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/location",
                "ValueType": null
            }
        ]
    },
    {
        "id": 233,
        "question": "Who was the pope that founded the Vatican Television?",
        "keywords": "pope, founded, Vatican Television",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT ?uri \nWHERE { \n         ?uri rdf:type dbo:Pope . \n         res:Vatican_Television_Center dbo:foundedBy ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Vatican_Television_Center",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Vatican_Television_Center",
                "predicate": "http://dbpedia.org/ontology/foundedBy",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Pope",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 234,
        "question": "What is the total population of Melbourne, Florida?",
        "keywords": "total population, Melbourne Florida",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT ?uri \nWHERE { \n        <http://dbpedia.org/resource/Melbourne,_Florida> dbo:populationTotal ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Melbourne,_Florida",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Melbourne,_Florida",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 235,
        "question": "Which airports does Air China serve?",
        "keywords": "airports, Air China",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri \nWHERE {\n        res:Air_China dbo:targetAirport ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Air_China",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Air_China",
                "predicate": "http://dbpedia.org/ontology/targetAirport",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 236,
        "question": "In which year was Rachel Stevens born?",
        "keywords": "year, born, Rachel Stevens",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri \nWHERE {\n        res:Rachel_Stevens dbo:birthYear ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Rachel_Stevens",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rachel_Stevens",
                "predicate": "http://dbpedia.org/ontology/birthYear",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 237,
        "question": "Where was JFK assassinated?",
        "keywords": "JFK, assassinated",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri \nWHERE {\n        res:John_F._Kennedy dbo:deathPlace ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/John_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 238,
        "question": "How many politicians graduated from Columbia University?",
        "keywords": "how many, politicians, graduated, Columbia University",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT COUNT(?uri) \nWHERE {\n        ?uri dbo:profession res:Politician .\n        ?uri dbo:almaMater res:Columbia_University .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 239,
        "question": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?",
        "keywords": "scientist, known for, Manhattan Project, Nobel Peace Prize",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:knownFor res:Manhattan_Project .\n        ?uri rdf:type dbo:Scientist .\n        ?uri dbo:knownFor res:Nobel_Peace_Prize .\n}",
        "topic_entity": "http://dbpedia.org/resource/Manhattan_Project",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/knownFor",
                "object": "http://dbpedia.org/resource/Manhattan_Project"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Scientist",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Nobel_Peace_Prize",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/knownFor",
                "ValueType": null
            }
        ]
    },
    {
        "id": 240,
        "question": "What are the specialities of the UNC Health Care?",
        "keywords": "specialities, UNC Health Care",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        res:UNC_Health_Care dbp:speciality ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/UNC_Health_Care",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/UNC_Health_Care",
                "predicate": "http://dbpedia.org/property/speciality",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 241,
        "question": "Who is the owner of Facebook?",
        "keywords": "owner, Facebook",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Facebook dbo:foundedBy ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Facebook",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Facebook",
                "predicate": "http://dbpedia.org/ontology/foundedBy",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 242,
        "question": "From which region is the Melon de Bourgogne?",
        "keywords": "region, Melon de Bourgogne",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {\n        res:Melon_de_Bourgogne dbo:wineRegion ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Melon_de_Bourgogne",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Melon_de_Bourgogne",
                "predicate": "http://dbpedia.org/ontology/wineRegion",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 243,
        "question": "Who was influenced by Socrates?",
        "keywords": "influenced, Socrated",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:influencedBy res:Socrates .\n}",
        "topic_entity": "http://dbpedia.org/resource/Socrates",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/influencedBy",
                "object": "http://dbpedia.org/resource/Socrates"
            }
        ],
        "constraints": []
    },
    {
        "id": 244,
        "question": "Who was president of Pakistan in 1978?",
        "keywords": "president, Pakistan, 1978",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/> \nSELECT DISTINCT ?uri \nWHERE {\n        ?uri dbp:title res:President_of_Pakistan .\n        ?uri dbp:years 1978 .\n}",
        "topic_entity": "http://dbpedia.org/resource/President_of_Pakistan",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/title",
                "object": "http://dbpedia.org/resource/President_of_Pakistan"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Value",
                "Argument": "1978",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/property/years",
                "ValueType": null
            }
        ]
    },
    {
        "id": 245,
        "question": "Who was married to president Chirac?",
        "keywords": "married to, president Chirac",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri\nWHERE { \n         res:Jacques_Chirac dbo:spouse ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Jacques_Chirac",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Jacques_Chirac",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 246,
        "question": "What is the largest metropolitan area in Washington state?",
        "keywords": "largest metropolitan area, Washington state",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/> \nSELECT DISTINCT ?uri\nWHERE {\n        <http://dbpedia.org/resource/Washington_(state)> dbp:largestmetro ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Washington_(state)",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Washington_(state)",
                "predicate": "http://dbpedia.org/property/largestmetro",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 247,
        "question": "Where in France is sparkling wine produced?",
        "keywords": "produced, France, sparkling wine",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:wineProduced res:Sparkling_wine .\n        ?uri dbo:location res:France .\n}",
        "topic_entity": "http://dbpedia.org/resource/Sparkling_wine",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/wineProduced",
                "object": "http://dbpedia.org/resource/Sparkling_wine"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/France",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/location",
                "ValueType": null
            }
        ]
    },
    {
        "id": 248,
        "question": "Where did Hillel Slovak die?",
        "keywords": "Hillel Slovak, death place",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {\n        res:Hillel_Slovak dbo:deathPlace ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Hillel_Slovak",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Hillel_Slovak",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 249,
        "question": "In which city does the Chile Route 68 end?",
        "keywords": "city, Chile Route 68, ends",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {\n        res:Chile_Route_68 dbo:routeEnd ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Chile_Route_68",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Chile_Route_68",
                "predicate": "http://dbpedia.org/ontology/routeEnd",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 250,
        "question": "Give me all cosmonauts.",
        "keywords": "cosmonauts",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut> . { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> . } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 251,
        "question": "Which German cities have more than 250000 inhabitants?",
        "keywords": "city, Germany, inhabitants, more than 250000",
        "sparql": "SELECT DISTINCT ?uri WHERE { { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City> . } UNION { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Town> . }  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> .  ?uri <http://dbpedia.org/ontology/populationTotal> ?population .  FILTER ( ?population > 250000 ) } ",
        "topic_entity": "http://dbpedia.org/resource/Germany",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Germany"
            }
        ],
        "constraints": null
    },
    {
        "id": 252,
        "question": "Who was John F. Kennedy's vice president?",
        "keywords": "John F. Kennedy, vice president",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/vicePresident> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/John_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/vicePresident",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 253,
        "question": "Who is the mayor of Tel Aviv?",
        "keywords": "Tel Aviv, mayor",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Tel_Aviv> <http://dbpedia.org/ontology/leaderName> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Tel_Aviv",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Tel_Aviv",
                "predicate": "http://dbpedia.org/ontology/leaderName",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 254,
        "question": "What is the second highest mountain on Earth?",
        "keywords": "mountain, second highest",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain> .  ?uri <http://dbpedia.org/ontology/elevation> ?elevation . } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 255,
        "question": "When was Alberta admitted as province?",
        "keywords": "Alberta, admit, province",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Alberta> <http://dbpedia.org/property/admittancedate> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Alberta",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Alberta",
                "predicate": "http://dbpedia.org/property/admittancedate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 256,
        "question": "Give me a list of all bandleaders that play trumpet.",
        "keywords": "bandleader, play, trumpet",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> .  ?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> . } ",
        "topic_entity": "http://dbpedia.org/resource/Bandleader",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/occupation",
                "object": "http://dbpedia.org/resource/Bandleader"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Trumpet",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/instrument",
                "ValueType": null
            }
        ]
    },
    {
        "id": 257,
        "question": "Which countries have more than ten caves?",
        "keywords": "country, cave, more than ten",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> .  ?cave <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cave> . { ?cave <http://dbpedia.org/ontology/location> ?uri . } UNION { ?cave <http://dbpedia.org/ontology/location> ?loc .  ?loc <http://dbpedia.org/ontology/country> ?uri . } } GROUP BY ?uri HAVING(COUNT(?cave) > 10) ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 258,
        "question": "What is the total amount of men and women serving in the FDNY?",
        "keywords": "total amount, men, women, serve, FDNY",
        "sparql": "SELECT DISTINCT ?num WHERE {  <http://dbpedia.org/resource/New_York_City_Fire_Department> <http://dbpedia.org/property/employees> ?num . } ",
        "topic_entity": "http://dbpedia.org/resource/New_York_City_Fire_Department",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/New_York_City_Fire_Department",
                "predicate": "http://dbpedia.org/property/employees",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 259,
        "question": "Who is the Formula 1 race driver with the most races?",
        "keywords": "Formula 1, race driver, races, most",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer> .  ?uri <http://dbpedia.org/ontology/races> ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 260,
        "question": "Give me all world heritage sites designated within the past two years.",
        "keywords": "world heritage site, designate, past two years",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 261,
        "question": "Give me all members of Prodigy.",
        "keywords": "member, Prodigy",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/The_Prodigy> <http://dbpedia.org/ontology/bandMember> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/The_Prodigy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Prodigy",
                "predicate": "http://dbpedia.org/ontology/bandMember",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 262,
        "question": "What is the longest river?",
        "keywords": "river, longest",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River> . { ?uri <http://dbpedia.org/ontology/length> ?l . } UNION { ?uri <http://dbpedia.org/property/length> ?l . } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 263,
        "question": "Does Breaking Bad have more episodes than Game of Thrones?",
        "keywords": "Breaking Bad, episodes, more than, Game of Thrones",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Breaking_Bad> <http://dbpedia.org/ontology/numberOfEpisodes> ?x .  <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/numberOfEpisodes> ?y .  FILTER (?x > ?y) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 264,
        "question": "Give me all cars that are produced in Germany.",
        "keywords": "car, produce, Germany",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile> . { ?uri <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Germany> . } UNION { ?uri <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Germany> . } UNION { { ?uri <http://dbpedia.org/ontology/manufacturer> ?x . }  UNION  { ?uri <http://dbpedia.org/property/manufacturer> ?x . }  { ?x <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Germany> . }  UNION  { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Germany> . } } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 265,
        "question": "Give me all people that were born in Vienna and died in Berlin.",
        "keywords": "people, born, Vienna, die, Berlin",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> .  ?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> . } ",
        "topic_entity": "http://dbpedia.org/resource/Vienna",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Vienna"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Berlin",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/deathPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 266,
        "question": "Is proinsulin a protein?",
        "keywords": "proinsulin, protein",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Proinsulin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Protein> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 267,
        "question": "How tall is Michael Jordan?",
        "keywords": "tall, Michael Jordan",
        "sparql": "SELECT DISTINCT ?num WHERE {  <http://dbpedia.org/resource/Michael_Jordan> <http://dbpedia.org/ontology/height> ?num . } ",
        "topic_entity": "http://dbpedia.org/resource/Michael_Jordan",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Michael_Jordan",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 268,
        "question": "What is the capital of Canada?",
        "keywords": "capital, Canada",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Canada",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Canada",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 269,
        "question": "Who is the governor of Wyoming?",
        "keywords": "governor, Wyoming",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Wyoming> <http://dbpedia.org/property/governor> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Wyoming",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Wyoming",
                "predicate": "http://dbpedia.org/property/governor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 270,
        "question": "Do Prince Harry and Prince William have the same parents?",
        "keywords": "Prince Harry, Prince William, same, parents",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> <http://dbpedia.org/ontology/parent> ?x .  <http://dbpedia.org/resource/Prince_Harry> <http://dbpedia.org/ontology/parent> ?x . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 271,
        "question": "How many languages are spoken in Turkmenistan?",
        "keywords": "languages, Turkmenistan",
        "sparql": "SELECT (COUNT(DISTINCT ?x) as ?c) WHERE {  <http://dbpedia.org/resource/Turkmenistan> <http://dbpedia.org/ontology/language> ?x . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 272,
        "question": "Give me all movies directed by Francis Ford Coppola.",
        "keywords": "movie, direct, Francis Ford Coppola",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Francis_Ford_Coppola> . } ",
        "topic_entity": "http://dbpedia.org/resource/Francis_Ford_Coppola",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Francis_Ford_Coppola"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 273,
        "question": "Give me all actors starring in movies directed by William Shatner.",
        "keywords": "actor, starring, movie, direct, William Shatner",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?x <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/William_Shatner> .  ?x <http://dbpedia.org/ontology/starring> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/William_Shatner",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/William_Shatner"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 274,
        "question": "Are tree frogs a type of amphibian?",
        "keywords": "tree frog, amphibian",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Hylidae> <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Amphibian> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 275,
        "question": "Give me all Methodist politicians.",
        "keywords": "politician, Methodist",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician> .  ?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Methodism> . } ",
        "topic_entity": "http://dbpedia.org/resource/Methodism",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/religion",
                "object": "http://dbpedia.org/resource/Methodism"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Politician",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 276,
        "question": "How often did Jane Fonda marry?",
        "keywords": "Jane Fonda, marry, how often",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  <http://dbpedia.org/resource/Jane_Fonda> <http://dbpedia.org/ontology/spouse> ?uri . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 277,
        "question": "Give me all Australian nonprofit organizations.",
        "keywords": "nonprofit organization, Australia",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> . { ?uri <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Australia> . } UNION { ?uri <http://dbpedia.org/ontology/location> ?x .  ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> . } } ",
        "topic_entity": "http://dbpedia.org/resource/Nonprofit_organization",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/type",
                "object": "http://dbpedia.org/resource/Nonprofit_organization"
            }
        ],
        "constraints": []
    },
    {
        "id": 278,
        "question": "In which military conflicts did Lawrence of Arabia participate?",
        "keywords": "Lawrence of Arabia, military conflict",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/T._E._Lawrence> <http://dbpedia.org/ontology/battle> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/T._E._Lawrence",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/T._E._Lawrence",
                "predicate": "http://dbpedia.org/ontology/battle",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 279,
        "question": "Who developed Minecraft?",
        "keywords": "Minecraft, develop",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Minecraft",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Minecraft",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 280,
        "question": "How many inhabitants does Maribor have?",
        "keywords": "Maribor, inhabitants",
        "sparql": "SELECT DISTINCT ?num WHERE {  <http://dbpedia.org/resource/Maribor> <http://dbpedia.org/ontology/populationTotal> ?num . } ",
        "topic_entity": "http://dbpedia.org/resource/Maribor",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Maribor",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 281,
        "question": "Give me all companies in Munich.",
        "keywords": "company, Munich",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company> . { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> . } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> . } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 282,
        "question": "How tall is Amazon Eve?",
        "keywords": "Amazon Eve, tall",
        "sparql": "SELECT DISTINCT ?height WHERE {  <http://dbpedia.org/resource/Amazon_Eve> <http://dbpedia.org/ontology/height> ?height . } ",
        "topic_entity": "http://dbpedia.org/resource/Amazon_Eve",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Amazon_Eve",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?height"
            }
        ],
        "constraints": []
    },
    {
        "id": 283,
        "question": "List all games by GMT.",
        "keywords": "game, GMT",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/GMT_Games> . } ",
        "topic_entity": "http://dbpedia.org/resource/GMT_Games",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/GMT_Games"
            }
        ],
        "constraints": []
    },
    {
        "id": 284,
        "question": "Give me all breeds of the German Shepherd dog.",
        "keywords": "breed, German Shepherd dog",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/property/breed> <http://dbpedia.org/resource/German_Shepherd> . } ",
        "topic_entity": "http://dbpedia.org/resource/German_Shepherd",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/breed",
                "object": "http://dbpedia.org/resource/German_Shepherd"
            }
        ],
        "constraints": []
    },
    {
        "id": 285,
        "question": "Which cities does the Weser flow through?",
        "keywords": "Weser, flow through, city",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Weser> <http://dbpedia.org/ontology/city> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Weser",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Weser",
                "predicate": "http://dbpedia.org/ontology/city",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 286,
        "question": "In which UK city are the headquarters of the MI6?",
        "keywords": "MI6, headquarters, city, UK",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Secret_Intelligence_Service> <http://dbpedia.org/ontology/headquarter> ?uri .  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom> . } ",
        "topic_entity": "http://dbpedia.org/resource/Secret_Intelligence_Service",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Secret_Intelligence_Service",
                "predicate": "http://dbpedia.org/ontology/headquarter",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/United_Kingdom",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/country",
                "ValueType": null
            }
        ]
    },
    {
        "id": 287,
        "question": "Which weapons did Heckler & Koch develop?",
        "keywords": "Heckler & Koch, develop, weapon",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Weapon> . ?uri <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Heckler_&_Koch> .  }",
        "topic_entity": "http://dbpedia.org/resource/Heckler_&_Koch",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/designer",
                "object": "http://dbpedia.org/resource/Heckler_&_Koch"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Weapon",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 288,
        "question": "Who created Goofy?",
        "keywords": "created, Goofy",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Goofy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Goofy",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 289,
        "question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?",
        "keywords": "Cuban Missile Crisis, earlier, Bay of Pigs Invasion",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Cuban_Missile_Crisis> <http://dbpedia.org/ontology/date> ?x .  <http://dbpedia.org/resource/Bay_of_Pigs_Invasion> <http://dbpedia.org/ontology/date> ?y .  FILTER (?x < ?y) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 290,
        "question": "Give me all islands that belong to Japan.",
        "keywords": "islands, Japan",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island> .  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> . } ",
        "topic_entity": "http://dbpedia.org/resource/Japan",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Japan"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Island",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 291,
        "question": "What is the ruling party in Lisbon?",
        "keywords": "Lisbon, ruling party",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Lisbon> <http://dbpedia.org/property/leaderParty> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Lisbon",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Lisbon",
                "predicate": "http://dbpedia.org/property/leaderParty",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 292,
        "question": "When were the Hells Angels founded?",
        "keywords": "Hells Angels, founded",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Hells_Angels> <http://dbpedia.org/property/founded> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Hells_Angels",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Hells_Angels",
                "predicate": "http://dbpedia.org/property/founded",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 293,
        "question": "Give me all Apollo 14 astronauts.",
        "keywords": "astronaut, Apollo 14",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> . } ",
        "topic_entity": "http://dbpedia.org/resource/Apollo_14",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/mission",
                "object": "http://dbpedia.org/resource/Apollo_14"
            }
        ],
        "constraints": []
    },
    {
        "id": 294,
        "question": "Give me a list of all lakes in Denmark.",
        "keywords": "lake, Denmark",
        "sparql": "SELECT DISTINCT ?uri WHERE {  { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Lake> .  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> . }  UNION  { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/yago/LakesOfDenmark> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 295,
        "question": "How many missions does the Soyuz programme have?",
        "keywords": "how many, mission, Soyuz programme",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://dbpedia.org/property/programme> <http://dbpedia.org/resource/Soyuz_programme> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 296,
        "question": "Did Socrates influence Aristotle?",
        "keywords": "Socrates, influence, Aristotle",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Socrates> <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/Aristotle> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 297,
        "question": "Give me all Danish movies.",
        "keywords": "movie, Denmark",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> . } ",
        "topic_entity": "http://dbpedia.org/resource/Denmark",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Denmark"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 298,
        "question": "Give me all launch pads operated by NASA.",
        "keywords": "launch pad, operate, NASA",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/LaunchPad> .  ?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/NASA> . } ",
        "topic_entity": "http://dbpedia.org/resource/NASA",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/operator",
                "object": "http://dbpedia.org/resource/NASA"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/LaunchPad",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 299,
        "question": "Which instruments does Cat Stevens play?",
        "keywords": "Cat Stevens, instrument",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Cat_Stevens> <http://dbpedia.org/ontology/instrument> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Cat_Stevens",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Cat_Stevens",
                "predicate": "http://dbpedia.org/ontology/instrument",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 300,
        "question": "Which ships were called after Benjamin Franklin?",
        "keywords": "ship, called after, Benjamin Franklin",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/property/shipNamesake> <http://dbpedia.org/resource/Benjamin_Franklin> . } ",
        "topic_entity": "http://dbpedia.org/resource/Benjamin_Franklin",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/shipNamesake",
                "object": "http://dbpedia.org/resource/Benjamin_Franklin"
            }
        ],
        "constraints": []
    },
    {
        "id": 301,
        "question": "Who are the parents of the wife of Juan Carlos I?",
        "keywords": "Juan Carlos I, wife, parents",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Juan_Carlos_I_of_Spain> <http://dbpedia.org/ontology/spouse> ?x .  ?x <http://dbpedia.org/ontology/parent> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Juan_Carlos_I_of_Spain",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Juan_Carlos_I_of_Spain",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/parent",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 302,
        "question": "How many employees does Google have?",
        "keywords": "Google, employees",
        "sparql": "SELECT DISTINCT ?num WHERE {  <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/numberOfEmployees> ?num . } ",
        "topic_entity": "http://dbpedia.org/resource/Google",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Google",
                "predicate": "http://dbpedia.org/ontology/numberOfEmployees",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 303,
        "question": "Did Tesla win a nobel prize in physics?",
        "keywords": "Tesla, nobel prize, physics",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Nikola_Tesla> <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Physics> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 304,
        "question": "Give me all cities in New Jersey with more than 100000 inhabitants.",
        "keywords": "New Jersey, city, inhabitants, more than 100000",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City> .  ?uri <http://dbpedia.org/ontology/isPartOf> <http://dbpedia.org/resource/New_Jersey> .  ?uri <http://dbpedia.org/ontology/populationTotal> ?inhabitants .  FILTER (?inhabitants > 100000) . } ",
        "topic_entity": "http://dbpedia.org/resource/New_Jersey",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/isPartOf",
                "object": "http://dbpedia.org/resource/New_Jersey"
            }
        ],
        "constraints": null
    },
    {
        "id": 305,
        "question": "Is Rita Wilson the wife of Tom Hanks?",
        "keywords": "Rita Wilson, wife, Tom Hanks",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Tom_Hanks> <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Rita_Wilson> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 306,
        "question": "When was the Statue of Liberty built?",
        "keywords": "Statue of Liberty, built",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Statue_of_Liberty",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Statue_of_Liberty",
                "predicate": "http://dbpedia.org/property/beginningDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 307,
        "question": "How many children did Benjamin Franklin have?",
        "keywords": "Benjamin Franklin, child",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  <http://dbpedia.org/resource/Benjamin_Franklin> <http://dbpedia.org/ontology/child> ?uri . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 308,
        "question": "When did Michael Jackson die?",
        "keywords": "Michael Jackson, die",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Michael_Jackson> <http://dbpedia.org/ontology/deathDate> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Michael_Jackson",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Michael_Jackson",
                "predicate": "http://dbpedia.org/ontology/deathDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 309,
        "question": "Which Chess players died in the same place they were born in?",
        "keywords": "chess players, British earl, die, same, place, born",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChessPlayer> .  ?uri <http://dbpedia.org/ontology/birthPlace> ?x .  ?uri <http://dbpedia.org/ontology/deathPlace> ?y .  FILTER (?x = ?y) . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 310,
        "question": "List the children of Margaret Thatcher.",
        "keywords": "Margaret Thatcher, child",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Margaret_Thatcher> <http://dbpedia.org/ontology/child> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Margaret_Thatcher",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Margaret_Thatcher",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 311,
        "question": "Was Margaret Thatcher a chemist?",
        "keywords": "Margaret Thatcher, chemist",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Margaret_Thatcher> <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Chemist> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 312,
        "question": "Was Marc Chagall a jew?",
        "keywords": "Marc Chagall, jew",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Marc_Chagall> <http://dbpedia.org/property/ethnicity> 'Jewish'@en . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 313,
        "question": "Which museum exhibits The Scream by Munch?",
        "keywords": "museum, Scream, Munch",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Scream> <http://dbpedia.org/ontology/museum> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/The_Scream",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Scream",
                "predicate": "http://dbpedia.org/ontology/museum",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 314,
        "question": "Give me all books by William Goldman with more than 300 pages.",
        "keywords": "book, William Goldman, pages, more than 300",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> .  ?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/William_Goldman> .  ?uri <http://dbpedia.org/ontology/numberOfPages> ?x .  FILTER (?x > 300) } ",
        "topic_entity": "http://dbpedia.org/resource/William_Goldman",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/William_Goldman"
            }
        ],
        "constraints": null
    },
    {
        "id": 315,
        "question": "Which books by Kerouac were published by Viking Press?",
        "keywords": "book, Kerouac, publish, Viking Press",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> .  ?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Viking_Press> .  ?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Jack_Kerouac> . } ",
        "topic_entity": "http://dbpedia.org/resource/Viking_Press",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/Viking_Press"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Jack_Kerouac",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/author",
                "ValueType": null
            }
        ]
    },
    {
        "id": 316,
        "question": "Who created Batman?",
        "keywords": "Batman, creator",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Batman> <http://dbpedia.org/ontology/creator> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Batman",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Batman",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 317,
        "question": "How many people live in the capital of Australia?",
        "keywords": "Australia, capital, people, live",
        "sparql": "SELECT DISTINCT ?num WHERE {  <http://dbpedia.org/resource/Australia> <http://dbpedia.org/ontology/capital> ?x .  ?x <http://dbpedia.org/ontology/populationTotal> ?num . } ",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Australia",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 318,
        "question": "What is the largest city in Australia?",
        "keywords": "Australia, largest city",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Australia> <http://dbpedia.org/ontology/largestCity> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Australia",
                "predicate": "http://dbpedia.org/ontology/largestCity",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 319,
        "question": "Who composed the music for Harold and Maude?",
        "keywords": "Harold and Maude, compose, music",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harold_and_Maude> <http://dbpedia.org/ontology/musicComposer> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Harold_and_Maude",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Harold_and_Maude",
                "predicate": "http://dbpedia.org/ontology/musicComposer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 320,
        "question": "Which films starring Clint Eastwood did he direct himself?",
        "keywords": "film, starring, direct, Clint Eastwood",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> . } ",
        "topic_entity": "http://dbpedia.org/resource/Clint_Eastwood",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Clint_Eastwood"
            }
        ],
        "constraints": []
    },
    {
        "id": 321,
        "question": "Is Egypts largest city also its capital?",
        "keywords": "largest city, Egypt, capital",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Egypt> <http://dbpedia.org/ontology/largestCity> ?large .  <http://dbpedia.org/resource/Egypt> <http://dbpedia.org/ontology/capital> ?capital .  FILTER (?large = ?capital) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 322,
        "question": "Where is the residence of the prime minister of Spain?",
        "keywords": "prime minister, Spain, residence",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Prime_Minister_of_Spain> <http://dbpedia.org/property/residence> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Prime_Minister_of_Spain",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Prime_Minister_of_Spain",
                "predicate": "http://dbpedia.org/property/residence",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 323,
        "question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.",
        "keywords": "song, Bruce Springsteen, release, between 1980 and 1990",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song> .  ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Bruce_Springsteen> .  ?uri <http://dbpedia.org/ontology/releaseDate> ?date .  FILTER (?date >= '1980-01-01'^^xsd:date && ?date <= '1990-12-31'^^xsd:date) } ",
        "topic_entity": "http://dbpedia.org/resource/Bruce_Springsteen",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/artist",
                "object": "http://dbpedia.org/resource/Bruce_Springsteen"
            }
        ],
        "constraints": null
    },
    {
        "id": 324,
        "question": "Which movies did Kurosawa direct?",
        "keywords": "film, direct, Kurosawa",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Akira_Kurosawa> . } ",
        "topic_entity": "http://dbpedia.org/resource/Akira_Kurosawa",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Akira_Kurosawa"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 325,
        "question": "Give me all B-sides of the Ramones.",
        "keywords": "Ramones, B-sides",
        "sparql": "SELECT DISTINCT ?string WHERE {  ?x <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Ramones> .  ?x <http://dbpedia.org/ontology/bSide> ?string . } ",
        "topic_entity": "http://dbpedia.org/resource/Ramones",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/musicalArtist",
                "object": "http://dbpedia.org/resource/Ramones"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/bSide",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 326,
        "question": "Which country does the creator of Miffy come from?",
        "keywords": "Miffy, creator, country",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Miffy> <http://dbpedia.org/ontology/creator> ?x .  ?x <http://dbpedia.org/ontology/nationality> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Miffy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Miffy",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/nationality",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 327,
        "question": "For which label did Elvis record his first album?",
        "keywords": "Elvis, first, album, label",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album> .  ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Elvis_Presley> .  ?x <http://dbpedia.org/ontology/releaseDate> ?y .  ?x <http://dbpedia.org/ontology/recordLabel> ?uri . } ORDER BY ASC(?y) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Elvis_Presley",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/artist",
                "object": "http://dbpedia.org/resource/Elvis_Presley"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/recordLabel",
                "object": "?uri"
            }
        ],
        "constraints": null
    },
    {
        "id": 328,
        "question": "Give me the birthdays of all actors of the television show Charmed.",
        "keywords": "television show, Charmed, actor, birthday",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor .  ?actor <http://dbpedia.org/ontology/birthDate> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Charmed",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Charmed",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?actor"
            },
            {
                "subject": "?actor",
                "predicate": "http://dbpedia.org/ontology/birthDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 329,
        "question": "How many employees does IBM have?",
        "keywords": "IBM, employees",
        "sparql": "SELECT DISTINCT ?number WHERE {  <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number . } ",
        "topic_entity": "http://dbpedia.org/resource/IBM",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/IBM",
                "predicate": "http://dbpedia.org/ontology/numberOfEmployees",
                "object": "?number"
            }
        ],
        "constraints": []
    },
    {
        "id": 330,
        "question": "Which states border Illinois?",
        "keywords": "state, border, Illinois",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Illinois",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Illinois",
                "predicate": "http://dbpedia.org/property/borderingstates",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 331,
        "question": "In which country is the Limerick Lake?",
        "keywords": "Limerick Lake, country",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Limerick_Lake",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Limerick_Lake",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 332,
        "question": "Which television shows were created by John Cleese?",
        "keywords": "television show, create, John Cleese",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow> .  ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> . } ",
        "topic_entity": "http://dbpedia.org/resource/John_Cleese",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "http://dbpedia.org/resource/John_Cleese"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/TelevisionShow",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 333,
        "question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "keywords": "film, directed, Garry Marshall, starring, Julia Roberts",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> .  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . } ",
        "topic_entity": "http://dbpedia.org/resource/Julia_Roberts",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Julia_Roberts"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Garry_Marshall",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/director",
                "ValueType": null
            }
        ]
    },
    {
        "id": 334,
        "question": "Was U.S. president Jackson involved in a war?",
        "keywords": "U.S. president, Jackson, war",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Andrew_Jackson> <http://dbpedia.org/ontology/battle> ?battle . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 335,
        "question": "Which awards did Douglas Hofstadter win?",
        "keywords": "Douglas Hofstadter, award",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Douglas_Hofstadter> <http://dbpedia.org/ontology/award> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Douglas_Hofstadter",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Douglas_Hofstadter",
                "predicate": "http://dbpedia.org/ontology/award",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 336,
        "question": "Who is the daughter of Robert Kennedy married to?",
        "keywords": "Robert Kennedy, daughter, married",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Robert_F._Kennedy> <http://dbpedia.org/ontology/child> ?child .  ?child <http://dbpedia.org/ontology/spouse> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Robert_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Robert_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?child"
            },
            {
                "subject": "?child",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 337,
        "question": "What is the currency of the Czech Republic?",
        "keywords": "Czech republic, currency",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Czech_Republic",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Czech_Republic",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 338,
        "question": "Which countries adopted the Euro?",
        "keywords": "country, adopt, Euro",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> .  { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> . }  UNION  { ?uri <http://dbpedia.org/property/currencyCode> 'EUR'@en . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 339,
        "question": "What is the area code of Berlin?",
        "keywords": "Berlin, area code",
        "sparql": "SELECT DISTINCT ?string WHERE {  <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/areaCode> ?string . } ",
        "topic_entity": "http://dbpedia.org/resource/Berlin",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Berlin",
                "predicate": "http://dbpedia.org/ontology/areaCode",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 340,
        "question": "Which countries have more than two official languages?",
        "keywords": "country, official language, more than two",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> .  ?uri <http://dbpedia.org/ontology/officialLanguage> ?language . } GROUP BY ?uri HAVING (COUNT(?language) > 2) ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 341,
        "question": "Who is the owner of Rolls-Royce?",
        "keywords": "Rolls-Royce, owner",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Rolls-Royce_Motors> <http://dbpedia.org/ontology/owner> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Rolls-Royce_Motors",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rolls-Royce_Motors",
                "predicate": "http://dbpedia.org/ontology/owner",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 342,
        "question": "Through which countries does the Yenisei river flow?",
        "keywords": "Yenisei river, flow through, country",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Yenisei_River> <http://dbpedia.org/ontology/country> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Yenisei_River",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Yenisei_River",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 343,
        "question": "When did Latvia join the EU?",
        "keywords": "Latvia, join, EU",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Latvia> <http://dbpedia.org/property/accessioneudate> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Latvia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Latvia",
                "predicate": "http://dbpedia.org/property/accessioneudate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 344,
        "question": "Which politicians were married to a German?",
        "keywords": "politician, married, German",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician> .  ?uri <http://dbpedia.org/ontology/spouse> ?spouse . { ?spouse <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> . } UNION { ?spouse <http://dbpedia.org/ontology/birthPlace> ?p .  ?p <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 345,
        "question": "Which river does the Brooklyn Bridge cross?",
        "keywords": "river, cross, Brooklyn Bridge",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Brooklyn_Bridge",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Brooklyn_Bridge",
                "predicate": "http://dbpedia.org/ontology/crosses",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 346,
        "question": "What is the highest mountain in Australia?",
        "keywords": "Australia, highest mountain",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain> .  ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Australia> .  ?uri <http://dbpedia.org/ontology/elevation> ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "http://dbpedia.org/resource/Australia"
            }
        ],
        "constraints": null
    },
    {
        "id": 347,
        "question": "Give me all soccer clubs in Spain.",
        "keywords": "Spain, soccer club",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub> .  { ?uri <http://dbpedia.org/ontology/ground> <http://dbpedia.org/resource/Spain> . }  UNION  { ?uri <http://dbpedia.org/property/ground> ?ground .  FILTER (regex(?ground,'Spain')) } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 348,
        "question": "What is the official language of Suriname?",
        "keywords": "Suriname, official language",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Suriname> <http://dbpedia.org/ontology/officialLanguage> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Suriname",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Suriname",
                "predicate": "http://dbpedia.org/ontology/officialLanguage",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 349,
        "question": "Who is the mayor of Tel Aviv?",
        "keywords": "Tel Aviv, mayor",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Tel_Aviv> <http://dbpedia.org/ontology/leaderName> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Tel_Aviv",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Tel_Aviv",
                "predicate": "http://dbpedia.org/ontology/leaderName",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 350,
        "question": "Who designed the Brooklyn Bridge?",
        "keywords": "Brooklyn Bridge, design",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/architect> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Brooklyn_Bridge",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Brooklyn_Bridge",
                "predicate": "http://dbpedia.org/ontology/architect",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 351,
        "question": "Which telecommunications organizations are located in Belgium?",
        "keywords": "telecommunications organization, located, Belgium",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation> . { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Telecommunication> . } UNION { ?uri <http://dbpedia.org/property/industry> ?industry .  FILTER (regex(?industry,'Telecommunications')) . } { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> . } UNION { ?uri <http://dbpedia.org/property/locationCountry> 'Belgium'@en . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 352,
        "question": "Is Frank Herbert still alive?",
        "keywords": "Frank Herbert, alive",
        "sparql": "ASK WHERE {  OPTIONAL { <http://dbpedia.org/resource/Frank_Herbert> <http://dbpedia.org/ontology/deathDate> ?date . }  FILTER (!BOUND(?date)) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 353,
        "question": "What is the highest place of the Urals?",
        "keywords": "Urals, highest place",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Ural_Mountains> <http://dbpedia.org/property/highest> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Ural_Mountains",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ural_Mountains",
                "predicate": "http://dbpedia.org/property/highest",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 354,
        "question": "Who is the editor of Forbes?",
        "keywords": "Forbes, editor",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Forbes> <http://dbpedia.org/ontology/editor> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Forbes",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Forbes",
                "predicate": "http://dbpedia.org/ontology/editor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 355,
        "question": "Give me all companies in the advertising industry.",
        "keywords": "company, advertising industry",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company> . { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry .  FILTER regex(?industry,'advertising','i') . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 356,
        "question": "How many countries are there in Europe?",
        "keywords": "Europe, countries",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/yago/EuropeanCountries> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 357,
        "question": "What did Bruce Carver die from?",
        "keywords": "Bruce Carver, die",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Bruce_Carver> <http://dbpedia.org/ontology/deathCause> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Bruce_Carver",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Bruce_Carver",
                "predicate": "http://dbpedia.org/ontology/deathCause",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 358,
        "question": "Give me all libraries established earlier than 1400.",
        "keywords": "libraries, established, earlier than 1400",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Library> .  ?uri <http://dbpedia.org/property/established> ?year .  FILTER (?year < 1400) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 359,
        "question": "Which presidents were born in 1945?",
        "keywords": "president, born, 1945",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President> .  ?uri <http://dbpedia.org/ontology/birthDate> ?date .  FILTER regex(?date, '^1945') . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 360,
        "question": "Give me all federal chancellors of Germany.",
        "keywords": "Germany, federal chancellors",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person> .  { ?uri <http://dbpedia.org/ontology/office> 'Chancellor of Germany' . }  UNION  { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 361,
        "question": "Who was the wife of U.S. president Lincoln?",
        "keywords": "U.S. president, Lincoln, wife",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Abraham_Lincoln> <http://dbpedia.org/ontology/spouse> ?uri. } ",
        "topic_entity": "http://dbpedia.org/resource/Abraham_Lincoln",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Abraham_Lincoln",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 362,
        "question": "Who developed the video game World of Warcraft?",
        "keywords": "video game, World of Warcraft, develop",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/World_of_Warcraft> <http://dbpedia.org/ontology/developer> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/World_of_Warcraft",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/World_of_Warcraft",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 363,
        "question": "List all episodes of the first season of the HBO television series The Sopranos.",
        "keywords": "HBO, television series, Sopranos, first season, episode",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/The_Sopranos> .  ?uri <http://dbpedia.org/ontology/seasonNumber> 1 . } ",
        "topic_entity": "http://dbpedia.org/resource/The_Sopranos",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/series",
                "object": "http://dbpedia.org/resource/The_Sopranos"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Value",
                "Argument": "1",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/seasonNumber",
                "ValueType": null
            }
        ]
    },
    {
        "id": 364,
        "question": "Who produced the most films?",
        "keywords": "film, produced, most",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?film <http://dbpedia.org/ontology/producer> ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 365,
        "question": "Give me all people with first name Jimmy.",
        "keywords": "person, first name, Jimmy",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> foaf:Person .  ?uri foaf:givenName 'Jimmy'@en . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 366,
        "question": "In which city did John F. Kennedy die?",
        "keywords": "city, John F. Kennedy, die",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri .  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City> . } ",
        "topic_entity": "http://dbpedia.org/resource/John_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/City",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 367,
        "question": "Is there a video game called Battle Chess?",
        "keywords": "video game, Battle Chess",
        "sparql": "ASK WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame> .  ?uri <http://www.w3.org/2000/01/rdf-schema#label> 'Battle Chess'@en . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 368,
        "question": "Which mountains are higher than the Nanga Parbat?",
        "keywords": "mountain, higher, Nanga Parbat",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Nanga_Parbat> <http://dbpedia.org/ontology/elevation> ?elevation .  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain> . { ?uri <http://dbpedia.org/ontology/elevation> ?otherelevation . } UNION { ?uri <http://dbpedia.org/property/elevationM> ?otherelevation . }  FILTER (?otherelevation > ?elevation) . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 369,
        "question": "Who created Wikipedia?",
        "keywords": "Wikipedia, created",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Wikipedia> <http://dbpedia.org/ontology/author> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Wikipedia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Wikipedia",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 370,
        "question": "Give me all actors starring in Last Action Hero.",
        "keywords": "actor, starring, Last Action Hero",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Last_Action_Hero> <http://dbpedia.org/ontology/starring> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Last_Action_Hero",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Last_Action_Hero",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 371,
        "question": "Which software has been developed by organizations founded in California?",
        "keywords": "organization, founded, California, develop, software",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software> .  ?company <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company> .  ?uri <http://dbpedia.org/ontology/developer> ?company .  ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/California> . } ",
        "topic_entity": "http://dbpedia.org/resource/California",
        "core_inferential_chain": [
            {
                "subject": "?company",
                "predicate": "http://dbpedia.org/ontology/foundationPlace",
                "object": "http://dbpedia.org/resource/California"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?company"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Company",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Software",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 372,
        "question": "Is Christian Bale starring in Velvet Goldmine?",
        "keywords": "Christian Bale, starring, Velvet Goldmine",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Velvet_Goldmine> <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Christian_Bale> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 373,
        "question": "Which actors were born in Germany?",
        "keywords": "actor, born, Germany",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> . } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place .  ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 374,
        "question": "Which caves have more than 3 entrances?",
        "keywords": "cave, entrance, more than 3",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cave> .  ?uri <http://dbpedia.org/property/entranceCount> ?entrance .  FILTER (?entrance > 3) . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 375,
        "question": "Was the wife of president Lincoln called Mary?",
        "keywords": "Lincoln, president, wife, called, Mary",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Abraham_Lincoln> <http://dbpedia.org/ontology/spouse> ?spouse .  ?spouse <http://www.w3.org/2000/01/rdf-schema#label> ?name .  FILTER(regex(?name,'Mary')) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 376,
        "question": "Give me all films produced by Hal Roach.",
        "keywords": "film, produce, Hal Roach",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> . } ",
        "topic_entity": "http://dbpedia.org/resource/Hal_Roach",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/producer",
                "object": "http://dbpedia.org/resource/Hal_Roach"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 377,
        "question": "Give me all video games published by Mean Hamster Software.",
        "keywords": "video game, publish, Mean Hamster Software",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame> . ?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Mean_Hamster_Software> . } ",
        "topic_entity": "http://dbpedia.org/resource/Mean_Hamster_Software",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/Mean_Hamster_Software"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/VideoGame",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 378,
        "question": "Which languages are spoken in Estonia?",
        "keywords": "language, spoken, Estonia",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Estonia> . } ",
        "topic_entity": "http://dbpedia.org/resource/Estonia",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/spokenIn",
                "object": "http://dbpedia.org/resource/Estonia"
            }
        ],
        "constraints": []
    },
    {
        "id": 379,
        "question": "How many Aldi stores are there?",
        "keywords": "own, Aldi",
        "sparql": "SELECT DISTINCT ?number WHERE {  <http://dbpedia.org/resource/Aldi> <http://dbpedia.org/ontology/numberOfLocations> ?number . } ",
        "topic_entity": "http://dbpedia.org/resource/Aldi",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Aldi",
                "predicate": "http://dbpedia.org/ontology/numberOfLocations",
                "object": "?number"
            }
        ],
        "constraints": []
    },
    {
        "id": 380,
        "question": "How many films did Hal Roach produce?",
        "keywords": "Hal Roach, produce, film",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 381,
        "question": "Which music albums contain the song Last Christmas?",
        "keywords": "music album, song, Last Christmas",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?single <http://dbpedia.org/ontology/album> ?uri .  ?single <http://www.w3.org/2000/01/rdf-schema#label> 'Last Christmas'@en . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 382,
        "question": "Give me all books written by Danielle Steel.",
        "keywords": "book, written, Danielle Steel",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> .  ?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Danielle_Steel> . } ",
        "topic_entity": "http://dbpedia.org/resource/Danielle_Steel",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/Danielle_Steel"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 383,
        "question": "Which airports are located in California, USA?",
        "keywords": "airport, located, California, USA",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport> . { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/California> . } UNION { ?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/California> . } UNION { ?uri <http://dbpedia.org/ontology/city> ?city .  ?city <http://dbpedia.org/ontology/isPartOf> <http://dbpedia.org/resource/California> . } UNION { ?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/California> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 384,
        "question": "Give me all Canadian Grunge record labels.",
        "keywords": "record label, Canadian, Grunge",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel> .  ?uri <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Grunge> .  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Canada> . } ",
        "topic_entity": "http://dbpedia.org/resource/Grunge",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/genre",
                "object": "http://dbpedia.org/resource/Grunge"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/RecordLabel",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Canada",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/country",
                "ValueType": null
            }
        ]
    },
    {
        "id": 385,
        "question": "Which country has the most official languages?",
        "keywords": "country, official language, most",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> .  ?uri <http://dbpedia.org/property/officialLanguages> ?language . } ORDER BY DESC(COUNT(?language)) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 386,
        "question": "In which programming language is GIMP written?",
        "keywords": "GIMP, programming language",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/GIMP> <http://dbpedia.org/ontology/programmingLanguage> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/GIMP",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/GIMP",
                "predicate": "http://dbpedia.org/ontology/programmingLanguage",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 387,
        "question": "Who produced films starring Natalie Portman?",
        "keywords": "produce, film, starring, Natalie Portman",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?film <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Natalie_Portman> .  ?film <http://dbpedia.org/ontology/producer> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Natalie_Portman",
        "core_inferential_chain": [
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Natalie_Portman"
            },
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/producer",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 388,
        "question": "Give me all movies with Tom Cruise.",
        "keywords": "movie, Tom Cruise",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> . } ",
        "topic_entity": "http://dbpedia.org/resource/Tom_Cruise",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Tom_Cruise"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 389,
        "question": "In which films did Julia Roberts as well as Richard Gere play?",
        "keywords": "film, play, Julia Roberts, Richard Gere",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Gere> . } ",
        "topic_entity": "http://dbpedia.org/resource/Julia_Roberts",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Julia_Roberts"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Richard_Gere",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/starring",
                "ValueType": null
            }
        ]
    },
    {
        "id": 390,
        "question": "Give me all female given names.",
        "keywords": "female, given name",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GivenName> .  ?uri <http://dbpedia.org/ontology/gender> <http://dbpedia.org/resource/Female> . } ",
        "topic_entity": "http://dbpedia.org/resource/Female",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/gender",
                "object": "http://dbpedia.org/resource/Female"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/GivenName",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 391,
        "question": "Who wrote the book The Pillars of the Earth?",
        "keywords": "wrote, book, The pillars of the Earth",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/The_Pillars_of_the_Earth> <http://dbpedia.org/ontology/author> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 392,
        "question": "How many films did Leonardo DiCaprio star in?",
        "keywords": "film, star, Leonardo DiCaprio",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 393,
        "question": "Give me all soccer clubs in the Premier League.",
        "keywords": "Premier League, soccer club",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub> .  ?uri <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> . } ",
        "topic_entity": "http://dbpedia.org/resource/Premier_League",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/league",
                "object": "http://dbpedia.org/resource/Premier_League"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/SoccerClub",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 394,
        "question": "When was Jack Wolfskin founded?",
        "keywords": "Jack Wolfskin, founded",
        "sparql": "SELECT DISTINCT ?year WHERE {  <http://dbpedia.org/resource/Jack_Wolfskin> <http://dbpedia.org/ontology/foundingYear> ?year . } ",
        "topic_entity": "http://dbpedia.org/resource/Jack_Wolfskin",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Jack_Wolfskin",
                "predicate": "http://dbpedia.org/ontology/foundingYear",
                "object": "?year"
            }
        ],
        "constraints": []
    },
    {
        "id": 395,
        "question": "Which organizations were founded in 1930?",
        "keywords": "organization, founded, 1930",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation> . { ?uri <http://dbpedia.org/ontology/formationYear> ?date . } UNION { ?uri <http://dbpedia.org/ontology/foundingYear> ?date. } FILTER regex(?date,'^1930') . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 396,
        "question": "What is the highest mountain?",
        "keywords": "mountain, highest",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain> .  ?uri <http://dbpedia.org/ontology/elevation> ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 397,
        "question": "Was Natalie Portman born in the United States?",
        "keywords": "Natalie Portman, born, United States",
        "sparql": "ASK WHERE {  { <http://dbpedia.org/resource/Natalie_Portman> <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . }  UNION  { <http://dbpedia.org/resource/Natalie_Portman> <http://dbpedia.org/ontology/birthPlace> ?city .  ?city <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 398,
        "question": "How many inhabitants does the largest city in Canada have?",
        "keywords": "inhabitants, largest city, Canada",
        "sparql": "SELECT DISTINCT ?num WHERE {  <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/largestCity> ?city .  ?city <http://dbpedia.org/ontology/populationTotal> ?num . } ",
        "topic_entity": "http://dbpedia.org/resource/Canada",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Canada",
                "predicate": "http://dbpedia.org/ontology/largestCity",
                "object": "?city"
            },
            {
                "subject": "?city",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 399,
        "question": "Who was the first to climb Mount Everest?",
        "keywords": "first, climb, mount Everest",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Mount_Everest> <http://dbpedia.org/ontology/firstAscentPerson> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Mount_Everest",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mount_Everest",
                "predicate": "http://dbpedia.org/ontology/firstAscentPerson",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 400,
        "question": "How many programming languages are there?",
        "keywords": "how many, programming languages",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProgrammingLanguage> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 401,
        "question": "What is the official color of the University of Oxford?",
        "keywords": "University of Oxford, official color",
        "sparql": "SELECT DISTINCT ?string WHERE {  <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?string . } ",
        "topic_entity": "http://dbpedia.org/resource/University_of_Oxford",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/University_of_Oxford",
                "predicate": "http://dbpedia.org/ontology/officialSchoolColour",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 402,
        "question": "To which artistic movement did the painter of The Three Dancers belong?",
        "keywords": "artistic movement, painter, The Three Dancers",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/The_Three_Dancers> <http://dbpedia.org/ontology/author> ?person .  ?person <http://dbpedia.org/ontology/movement> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/The_Three_Dancers",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Three_Dancers",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?person"
            },
            {
                "subject": "?person",
                "predicate": "http://dbpedia.org/ontology/movement",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 403,
        "question": "Does Abraham Lincoln's death place have a website?",
        "keywords": "Abraham Lincoln, death place, website",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Abraham_Lincoln> <http://dbpedia.org/ontology/deathPlace> ?p .  ?p <http://dbpedia.org/property/website> ?w . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 404,
        "question": "Give me the grandchildren of Elvis Presley.",
        "keywords": "Elvis Presley, grandchildren",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elvis_Presley> <http://dbpedia.org/ontology/child> ?child . ?child <http://dbpedia.org/ontology/child> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Elvis_Presley",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Elvis_Presley",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?child"
            },
            {
                "subject": "?child",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 405,
        "question": "Who is the youngest Darts player?",
        "keywords": "Darts player, youngest",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/DartsPlayer> .  ?uri <http://dbpedia.org/ontology/birthDate> ?date . } ORDER BY DESC(?date) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 406,
        "question": "Where was Bach born?",
        "keywords": "birthplace, Bach",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Johann_Sebastian_Bach> <http://dbpedia.org/ontology/birthPlace> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Johann_Sebastian_Bach",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Johann_Sebastian_Bach",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 407,
        "question": "In which countries can you pay using the West African CFA franc?",
        "keywords": "countries, pay, West African CFA franc",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> . } ",
        "topic_entity": "http://dbpedia.org/resource/West_African_CFA_franc",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "http://dbpedia.org/resource/West_African_CFA_franc"
            }
        ],
        "constraints": []
    },
    {
        "id": 408,
        "question": "What are the top-10 action role-playing video games according to IGN?",
        "keywords": "top-10, action, role-playing games, IGN",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> .  ?uri <http://dbpedia.org/property/ign> ?score . } ORDER BY DESC(?score) LIMIT 10 ",
        "topic_entity": "http://dbpedia.org/resource/Category:Action_role-playing_video_games",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:Action_role-playing_video_games"
            }
        ],
        "constraints": null
    },
    {
        "id": 409,
        "question": "What is the most frequent cause of death?",
        "keywords": "cause of death, most frequent",
        "sparql": "SELECT DISTINCT ?x WHERE {  ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 410,
        "question": "Does the Isar flow into a lake?",
        "keywords": "Isar, flow, lake",
        "sparql": "ASK WHERE {  ?x <http://dbpedia.org/ontology/inflow> <http://dbpedia.org/resource/Isar> .  ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Lake> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 411,
        "question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.",
        "keywords": "films, producer, Steven Spielberg, production budget, $80 million",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Steven_Spielberg> .  ?uri <http://dbpedia.org/ontology/budget> ?b .  FILTER( xsd:double(?b) >= 8.0E7 ) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 412,
        "question": "Give me all writers that won the Nobel Prize in literature.",
        "keywords": "writer, win, Nobel Prize in literature",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer> .  ?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> . } ",
        "topic_entity": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/award",
                "object": "http://dbpedia.org/resource/Nobel_Prize_in_Literature"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Writer",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 413,
        "question": "Give me all taikonauts.",
        "keywords": "taikonauts",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut> .  ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/China> . } ",
        "topic_entity": "http://dbpedia.org/resource/China",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/nationality",
                "object": "http://dbpedia.org/resource/China"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Astronaut",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 414,
        "question": "How many pages does War and Peace have?",
        "keywords": "how many, pages, War and Peace",
        "sparql": "SELECT DISTINCT ?n WHERE {  <http://dbpedia.org/resource/War_and_Peace> <http://dbpedia.org/ontology/numberOfPages> ?n . } ",
        "topic_entity": "http://dbpedia.org/resource/War_and_Peace",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/War_and_Peace",
                "predicate": "http://dbpedia.org/ontology/numberOfPages",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 415,
        "question": "What is the bridge with the longest span?",
        "keywords": "bridge, longest span",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge> .  ?uri <http://dbpedia.org/ontology/mainspan> ?s . } ORDER BY DESC(?s) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 416,
        "question": "Give me all actors called Baldwin.",
        "keywords": "actors, called, Baldwin",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri foaf:surname 'Baldwin'@en . { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Actor> . } UNION { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 417,
        "question": "Who is the tallest player of the Atlanta Falcons?",
        "keywords": "Atlanta Falcons, player, tallest",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> .  ?uri <http://dbpedia.org/ontology/height> ?h . } ORDER BY DESC(?h) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Atlanta_Falcons",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/team",
                "object": "http://dbpedia.org/resource/Atlanta_Falcons"
            }
        ],
        "constraints": null
    },
    {
        "id": 418,
        "question": "Which rivers flow into a German lake?",
        "keywords": "rivers, flow, German lake",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River> .  ?x <http://dbpedia.org/ontology/inflow> ?uri .  ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Lake> .  ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . } ",
        "topic_entity": "http://dbpedia.org/resource/Germany",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Germany"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/inflow",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Lake",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/River",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 419,
        "question": "How many James Bond movies are there?",
        "keywords": "how many, James Bond movies",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/yago/JamesBondFilms> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 420,
        "question": "Which rockets were launched from Baikonur?",
        "keywords": "rockets, launched, Baikonur",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Rocket> .  ?uri <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> . } ",
        "topic_entity": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/launchSite",
                "object": "http://dbpedia.org/resource/Baikonur_Cosmodrome"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Rocket",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 421,
        "question": "Which pope succeeded John Paul II?",
        "keywords": "pope, succeed, John Paul II",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Pope_John_Paul_II> <http://dbpedia.org/property/successor> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Pope_John_Paul_II",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Pope_John_Paul_II",
                "predicate": "http://dbpedia.org/property/successor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 422,
        "question": "Give me all Dutch parties.",
        "keywords": "Dutch, party",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty> .  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Netherlands> . } ",
        "topic_entity": "http://dbpedia.org/resource/Netherlands",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Netherlands"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/PoliticalParty",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 423,
        "question": "When is Halloween?",
        "keywords": "date, Halloween",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Halloween",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Halloween",
                "predicate": "http://dbpedia.org/property/date",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 424,
        "question": "Give me all Swedish oceanographers.",
        "keywords": "Swedish, oceanographer",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Oceanography> .  ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Sweden> . } ",
        "topic_entity": "http://dbpedia.org/resource/Oceanography",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/field",
                "object": "http://dbpedia.org/resource/Oceanography"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Sweden",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/birthPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 425,
        "question": "Give me all actors who were born in Berlin.",
        "keywords": "actors, born, Berlin",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> .  ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> . } ",
        "topic_entity": "http://dbpedia.org/resource/Berlin",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Berlin"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Actor",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 426,
        "question": "What was the last movie with Alec Guinness?",
        "keywords": "Alec Guinness, last, movie",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Alec_Guinness> .  ?uri <http://dbpedia.org/ontology/releaseDate> ?date . } ORDER BY DESC(?date) LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Alec_Guinness",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Alec_Guinness"
            }
        ],
        "constraints": null
    },
    {
        "id": 427,
        "question": "Which poet wrote the most books?",
        "keywords": "poet, most, books",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> .  ?x <http://dbpedia.org/ontology/author> ?uri .  ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Poet",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/occupation",
                "object": "http://dbpedia.org/resource/Poet"
            }
        ],
        "constraints": null
    },
    {
        "id": 428,
        "question": "How many languages are spoken in Colombia?",
        "keywords": "languages, Colombia",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Language> .  <http://dbpedia.org/resource/Colombia> <http://dbpedia.org/ontology/language> ?uri . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 429,
        "question": "What was Brazil's lowest rank in the FIFA World Ranking?",
        "keywords": "Brazil, lowest rank, FIFA World Ranking",
        "sparql": "SELECT DISTINCT ?n WHERE {  <http://dbpedia.org/resource/Brazil_national_football_team> <http://dbpedia.org/property/fifaMin> ?n . } ",
        "topic_entity": "http://dbpedia.org/resource/Brazil_national_football_team",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Brazil_national_football_team",
                "predicate": "http://dbpedia.org/property/fifaMin",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 430,
        "question": "Which ingredients do I need for carrot cake?",
        "keywords": "carrot cake, ingredients",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Carrot_cake> <http://dbpedia.org/ontology/ingredient> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Carrot_cake",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Carrot_cake",
                "predicate": "http://dbpedia.org/ontology/ingredient",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 431,
        "question": "Is Cola a beverage?",
        "keywords": "Cola, beverage",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Cola> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 432,
        "question": "Who has Tom Cruise been married to?",
        "keywords": "Tom Cruise, married",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> . } ",
        "topic_entity": "http://dbpedia.org/resource/Tom_Cruise",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "http://dbpedia.org/resource/Tom_Cruise"
            }
        ],
        "constraints": []
    },
    {
        "id": 433,
        "question": "Which of Tim Burton's films had the highest budget?",
        "keywords": "highest budget, film, Tim Burton",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Tim_Burton> .  ?uri <http://dbpedia.org/ontology/budget> ?b . } ORDER BY ?b OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Tim_Burton",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Tim_Burton"
            }
        ],
        "constraints": null
    },
    {
        "id": 434,
        "question": "How heavy is Jupiter's lightest moon?",
        "keywords": "how heavy, Jupiter, moon, lightest",
        "sparql": "SELECT DISTINCT ?n WHERE {  ?uri <http://dbpedia.org/property/satelliteOf> <http://dbpedia.org/resource/Jupiter> .  ?uri <http://dbpedia.org/ontology/mass> ?n . } ORDER BY ASC(?n) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Jupiter",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/satelliteOf",
                "object": "http://dbpedia.org/resource/Jupiter"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/mass",
                "object": "?n"
            }
        ],
        "constraints": [
            {
                "type": "order_limit_offset",
                "ValueType": "String",
                "SourceNodeIndex": null,
                "NodePredicate": null,
                "SortOrder": "Ascending",
                "Start": 0,
                "Count": 1
            }
        ]
    },
    {
        "id": 435,
        "question": "Which actor was casted in the most movies?",
        "keywords": "actor, casted, most movies",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> .  ?f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?f <http://dbpedia.org/ontology/starring> ?uri . } ORDER BY DESC(COUNT(DISTINCT(?f))) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 436,
        "question": "Is James Bond married?",
        "keywords": "James Bond, married",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/James_Bond> <http://dbpedia.org/ontology/spouse> ?uri . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 437,
        "question": "Give me all Australian metalcore bands.",
        "keywords": "Australian, metalcore bands",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band> .  ?uri <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Metalcore> . { ?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> . } UNION { ?uri <http://dbpedia.org/ontology/hometown> ?h .  ?h <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> . } } ",
        "topic_entity": "http://dbpedia.org/resource/Metalcore",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/genre",
                "object": "http://dbpedia.org/resource/Metalcore"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Band",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 438,
        "question": "Give me all actors who were born in Paris after 1950.",
        "keywords": "actors, born, Paris, after 1950",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> .  ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> .  ?uri <http://dbpedia.org/ontology/birthDate> ?date .  FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 439,
        "question": "When was Olof Palme shot?",
        "keywords": "date, Olof Palme, shot",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Olof_Palme",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Olof_Palme",
                "predicate": "http://dbpedia.org/ontology/deathDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 440,
        "question": "Who are the four youngest MVP basketball players?",
        "keywords": "four, youngest, MVP, basketball player",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer> .  ?uri <http://dbpedia.org/ontology/birthDate> ?date.  ?uri <http://dbpedia.org/property/highlights> ?h .  FILTER regex(?h,'MVP') } ORDER BY DESC(?date) OFFSET 0 LIMIT 4 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 441,
        "question": "Which companies have more than 1 million employees?",
        "keywords": "company, more than 1 million, employees",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company> . { ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n . } UNION { ?uri <http://dbpedia.org/property/numEmployees> ?n . } FILTER ( ?n > 1000000 ) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 442,
        "question": "Give all swimmers that were born in Moscow.",
        "keywords": "swimmer, born, Moscow",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer> .  ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> . } ",
        "topic_entity": "http://dbpedia.org/resource/Moscow",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Moscow"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Swimmer",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 443,
        "question": "Show me the book that Muhammad Ali wrote.",
        "keywords": "book, wrote, Muhammad Ali",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> .  ?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Muhammad_Ali> . } ",
        "topic_entity": "http://dbpedia.org/resource/Muhammad_Ali",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/Muhammad_Ali"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 444,
        "question": "How many museums does Paris have?",
        "keywords": "how many, museum, Paris",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Museum> .  ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> . } ",
        "topic_entity": "http://dbpedia.org/resource/Paris",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/Paris"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Museum",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 445,
        "question": "Which city has the most inhabitants?",
        "keywords": "city, the most inhabitants",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City> .  ?uri <http://dbpedia.org/ontology/populationTotal> ?pop . } ORDER BY DESC(?pop) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 446,
        "question": "Which city has the least inhabitants?",
        "keywords": "city, the least inhabitants",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City> .  ?uri <http://dbpedia.org/ontology/populationTotal> ?pop . } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 447,
        "question": "Give me all the TV shows with Neil Patrick Harris.",
        "keywords": "TV shows, Neil Patrick Harris",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> . } ",
        "topic_entity": "http://dbpedia.org/resource/Neil_Patrick_Harris",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Neil_Patrick_Harris"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/TelevisionShow",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 448,
        "question": "Show a list of soccer clubs that play in the Bundesliga.",
        "keywords": "soccer clubs, play, Bundesliga",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub> .  ?uri <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> . } ",
        "topic_entity": "http://dbpedia.org/resource/Bundesliga",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/league",
                "object": "http://dbpedia.org/resource/Bundesliga"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/SoccerClub",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 449,
        "question": "What country is Mount Everest in?",
        "keywords": "country, Mount Everest",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Mount_Everest> <http://dbpedia.org/ontology/locatedInArea> ?uri .  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> . } ",
        "topic_entity": "http://dbpedia.org/resource/Mount_Everest",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mount_Everest",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Country",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 450,
        "question": "Who is the founder of Penguin Books?",
        "keywords": "founder, Penguin Books",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Penguin_Books",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Penguin_Books",
                "predicate": "http://dbpedia.org/ontology/founder",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 451,
        "question": "Which programming languages influenced Javascript?",
        "keywords": "programming languages, influenced, Javascript",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProgrammingLanguage> .  ?uri <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/JavaScript> . } ",
        "topic_entity": "http://dbpedia.org/resource/JavaScript",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/influenced",
                "object": "http://dbpedia.org/resource/JavaScript"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/ProgrammingLanguage",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 452,
        "question": "Did Che Guevara have children?",
        "keywords": "children, Che Guevara",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Che_Guevara> <http://dbpedia.org/ontology/child> ?uri . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 453,
        "question": "List all the musicals with music by Leonard Bernstein.",
        "keywords": "musicals, music by, Leonard Bernstein",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical> .  ?uri <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> . } ",
        "topic_entity": "http://dbpedia.org/resource/Leonard_Bernstein",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/musicBy",
                "object": "http://dbpedia.org/resource/Leonard_Bernstein"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Musical",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 454,
        "question": "Show me all the breweries in Australia.",
        "keywords": "breweries, Australia",
        "sparql": "SELECT DISTINCT ?uri ?x WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Brewery> . { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Australia> . } UNION { ?uri <http://dbpedia.org/ontology/location> ?x .  ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 455,
        "question": "When was the Titanic completed?",
        "keywords": "Titanic, completion date",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/RMS_Titanic> <http://dbpedia.org/ontology/completionDate> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/RMS_Titanic",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/RMS_Titanic",
                "predicate": "http://dbpedia.org/ontology/completionDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 456,
        "question": "How much did Pulp Fiction cost?",
        "keywords": "cost, Pulp Fiction",
        "sparql": "SELECT DISTINCT ?n WHERE {  <http://dbpedia.org/resource/Pulp_Fiction> <http://dbpedia.org/ontology/budget> ?n . } ",
        "topic_entity": "http://dbpedia.org/resource/Pulp_Fiction",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Pulp_Fiction",
                "predicate": "http://dbpedia.org/ontology/budget",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 457,
        "question": "How many airlines are there?",
        "keywords": "how many, airlines",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 458,
        "question": "How much carbs does peanut butter have?",
        "keywords": "how much, carbs, peanut butter",
        "sparql": "SELECT DISTINCT ?carbs WHERE {  <http://dbpedia.org/resource/Peanut_butter> <http://dbpedia.org/property/carbs> ?carbs . } ",
        "topic_entity": "http://dbpedia.org/resource/Peanut_butter",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Peanut_butter",
                "predicate": "http://dbpedia.org/property/carbs",
                "object": "?carbs"
            }
        ],
        "constraints": []
    },
    {
        "id": 459,
        "question": "Which book has the most pages?",
        "keywords": "book, the most pages",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> .  ?uri <http://dbpedia.org/ontology/numberOfPages> ?n . } ORDER BY DESC(?n) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 460,
        "question": "Which bridges cross the Seine?",
        "keywords": "bridges, cross, Seine",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge> .  ?uri <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> . } ",
        "topic_entity": "http://dbpedia.org/resource/Seine",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/crosses",
                "object": "http://dbpedia.org/resource/Seine"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Bridge",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 461,
        "question": "Who is the mayor of the capital of French Polynesia?",
        "keywords": "mayor, capital, French Polynesia",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/French_Polynesia> <http://dbpedia.org/ontology/capital> ?x .  ?x <http://dbpedia.org/ontology/mayor> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/French_Polynesia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/French_Polynesia",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/mayor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 462,
        "question": "When did Dracula's creator die?",
        "keywords": "Dracula, creator, die",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Count_Dracula> <http://dbpedia.org/ontology/creator> ?x .  ?x <http://dbpedia.org/ontology/deathDate> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Count_Dracula",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Count_Dracula",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/deathDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 463,
        "question": "What is the location of the Houses of Parliament?",
        "keywords": "location, Houses of Parliament",
        "sparql": "SELECT ?uri WHERE {  <http://dbpedia.org/resource/Palace_of_Westminster> <http://dbpedia.org/ontology/location> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Palace_of_Westminster",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Palace_of_Westminster",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 464,
        "question": "Show me all English Gothic buildings in Kent.",
        "keywords": "English Gothic buildings, Kent",
        "sparql": "SELECT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building> .  ?uri <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/English_Gothic_architecture> .  ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Kent> . } ",
        "topic_entity": "http://dbpedia.org/resource/English_Gothic_architecture",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/architecturalStyle",
                "object": "http://dbpedia.org/resource/English_Gothic_architecture"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Building",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Kent",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/location",
                "ValueType": null
            }
        ]
    },
    {
        "id": 465,
        "question": "Who was the pope that founded the Vatican Television?",
        "keywords": "pope, founded, Vatican Television",
        "sparql": "SELECT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Pope> .  <http://dbpedia.org/resource/Vatican_Television_Center> <http://dbpedia.org/ontology/foundedBy> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Vatican_Television_Center",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Vatican_Television_Center",
                "predicate": "http://dbpedia.org/ontology/foundedBy",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Pope",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 466,
        "question": "What is the total population of Melbourne, Florida?",
        "keywords": "total population, Melbourne Florida",
        "sparql": "SELECT ?uri WHERE {  <http://dbpedia.org/resource/Melbourne,_Florida> <http://dbpedia.org/ontology/populationTotal> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Melbourne,_Florida",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Melbourne,_Florida",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 467,
        "question": "Which airports does Yeti Airlines serve?",
        "keywords": "airports, Yeti Airlines",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Yeti_Airlines> <http://dbpedia.org/ontology/targetAirport> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Yeti_Airlines",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Yeti_Airlines",
                "predicate": "http://dbpedia.org/ontology/targetAirport",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 468,
        "question": "In which year was Rachel Stevens born?",
        "keywords": "year, born, Rachel Stevens",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Rachel_Stevens> <http://dbpedia.org/ontology/birthYear> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Rachel_Stevens",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rachel_Stevens",
                "predicate": "http://dbpedia.org/ontology/birthYear",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 469,
        "question": "Where was JFK assassinated?",
        "keywords": "JFK, assassinated",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/John_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 470,
        "question": "How many politicians graduated from Columbia University?",
        "keywords": "how many, politicians, graduated, Columbia University",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> .  ?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Columbia_University> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 471,
        "question": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?",
        "keywords": "scientist, known for, Manhattan Project, Nobel Peace Prize",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Manhattan_Project> .  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist> .  ?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Nobel_Peace_Prize> . } ",
        "topic_entity": "http://dbpedia.org/resource/Manhattan_Project",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/knownFor",
                "object": "http://dbpedia.org/resource/Manhattan_Project"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Scientist",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Nobel_Peace_Prize",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/knownFor",
                "ValueType": null
            }
        ]
    },
    {
        "id": 472,
        "question": "What are the specialities of the UNC Health Care?",
        "keywords": "specialities, UNC Health Care",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/UNC_Health_Care> <http://dbpedia.org/property/speciality> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/UNC_Health_Care",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/UNC_Health_Care",
                "predicate": "http://dbpedia.org/property/speciality",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 473,
        "question": "Who is the owner of Facebook?",
        "keywords": "owner, Facebook",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Facebook",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Facebook",
                "predicate": "http://dbpedia.org/ontology/foundedBy",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 474,
        "question": "From which region is the Melon de Bourgogne?",
        "keywords": "region, Melon de Bourgogne",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Melon_de_Bourgogne> <http://dbpedia.org/ontology/wineRegion> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Melon_de_Bourgogne",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Melon_de_Bourgogne",
                "predicate": "http://dbpedia.org/ontology/wineRegion",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 475,
        "question": "Who was influenced by Socrates?",
        "keywords": "influenced, Socrated",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Socrates> . } ",
        "topic_entity": "http://dbpedia.org/resource/Socrates",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/influencedBy",
                "object": "http://dbpedia.org/resource/Socrates"
            }
        ],
        "constraints": []
    },
    {
        "id": 476,
        "question": "Who was president of Pakistan in 1978?",
        "keywords": "president, Pakistan, 1978",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> .  ?uri <http://dbpedia.org/property/years> 1978 . } ",
        "topic_entity": "http://dbpedia.org/resource/President_of_Pakistan",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/title",
                "object": "http://dbpedia.org/resource/President_of_Pakistan"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Value",
                "Argument": "1978",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/property/years",
                "ValueType": null
            }
        ]
    },
    {
        "id": 477,
        "question": "Who was married to president Chirac?",
        "keywords": "married to, president Chirac",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Jacques_Chirac> <http://dbpedia.org/ontology/spouse> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Jacques_Chirac",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Jacques_Chirac",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 478,
        "question": "What is the largest metropolitan area in Washington state?",
        "keywords": "largest metropolitan area, Washington state",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Washington_(state)> <http://dbpedia.org/property/largestmetro> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Washington_(state)",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Washington_(state)",
                "predicate": "http://dbpedia.org/property/largestmetro",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 479,
        "question": "Where in France is sparkling wine produced?",
        "keywords": "produced, France, sparkling wine",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/wineProduced> <http://dbpedia.org/resource/Sparkling_wine> .  ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/France> . } ",
        "topic_entity": "http://dbpedia.org/resource/Sparkling_wine",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/wineProduced",
                "object": "http://dbpedia.org/resource/Sparkling_wine"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/France",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/location",
                "ValueType": null
            }
        ]
    },
    {
        "id": 480,
        "question": "Where did Hillel Slovak die?",
        "keywords": "Hillel Slovak, death place",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Hillel_Slovak",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Hillel_Slovak",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 481,
        "question": "What is the timezone in San Pedro de Atacama?",
        "keywords": "timezone, San Pedro de Atacama",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/San_Pedro_de_Atacama> <http://dbpedia.org/ontology/timeZone> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/San_Pedro_de_Atacama",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/San_Pedro_de_Atacama",
                "predicate": "http://dbpedia.org/ontology/timeZone",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 482,
        "question": "In which city does the Chile Route 68 end?",
        "keywords": "city, Chile Route 68, ends",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Chile_Route_68> <http://dbpedia.org/ontology/routeEnd> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Chile_Route_68",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Chile_Route_68",
                "predicate": "http://dbpedia.org/ontology/routeEnd",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 483,
        "question": "Give me all Swedish holidays.",
        "keywords": "Swedish holidays",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Holiday> .  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> . } ",
        "topic_entity": "http://dbpedia.org/resource/Sweden",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Sweden"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Holiday",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 484,
        "question": "Who is the youngest Pulitzer Prize winner?",
        "keywords": "youngest, winner, Pulitzer Prize",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Pulitzer_Prize> .  ?uri <http://dbpedia.org/ontology/birthDate> ?d . } ORDER BY DESC(?d) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Pulitzer_Prize",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/award",
                "object": "http://dbpedia.org/resource/Pulitzer_Prize"
            }
        ],
        "constraints": null
    },
    {
        "id": 485,
        "question": "Which soccer players were born on Malta?",
        "keywords": "soccer player, born on, Malta",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer> .  ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> . } ",
        "topic_entity": "http://dbpedia.org/resource/Malta",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Malta"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/SoccerPlayer",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 486,
        "question": "Did Arnold Schwarzenegger attend a university?",
        "keywords": "Arnold Schwarzenegger, attend, university",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Arnold_Schwarzenegger> <http://dbpedia.org/ontology/almaMater> ?x .  ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 487,
        "question": "Which programming languages were influenced by Perl?",
        "keywords": "programming languages, influenced by, Perl",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProgrammingLanguage> . { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> . } UNION { <http://dbpedia.org/resource/Perl> <http://dbpedia.org/ontology/influenced> ?uri . } } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 488,
        "question": "Is Barack Obama a democrat?",
        "keywords": "Barack Obama, democrat",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Barack_Obama> <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Democratic_Party_(United_States)> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 489,
        "question": "How many children does Eddie Murphy have?",
        "keywords": "children, Eddie Murphy",
        "sparql": "SELECT DISTINCT ?n WHERE {  <http://dbpedia.org/resource/Eddie_Murphy> <http://dbpedia.org/property/children> ?n . } ",
        "topic_entity": "http://dbpedia.org/resource/Eddie_Murphy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Eddie_Murphy",
                "predicate": "http://dbpedia.org/property/children",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 490,
        "question": "Who is the oldest child of Meryl Streep?",
        "keywords": "oldest child, Meryl Streep",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Meryl_Streep> <http://dbpedia.org/ontology/child> ?uri .  ?uri <http://dbpedia.org/ontology/birthDate> ?d . } ORDER BY ASC(?d) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Meryl_Streep",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Meryl_Streep",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?uri"
            }
        ],
        "constraints": null
    },
    {
        "id": 491,
        "question": "Who killed John Lennon?",
        "keywords": "killed, John Lennon",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person> .  ?uri <http://dbpedia.org/property/conviction> <http://dbpedia.org/resource/Death_of_John_Lennon> . } ",
        "topic_entity": "http://dbpedia.org/resource/Death_of_John_Lennon",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/conviction",
                "object": "http://dbpedia.org/resource/Death_of_John_Lennon"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Person",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 492,
        "question": "In which city is Air China headquartered?",
        "keywords": "city, headquarter, Air China",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Air_China> <http://dbpedia.org/ontology/headquarter> ?uri .  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/yago/City108524735> . } ",
        "topic_entity": "http://dbpedia.org/resource/Air_China",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Air_China",
                "predicate": "http://dbpedia.org/ontology/headquarter",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/class/yago/City108524735",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 493,
        "question": "How many scientists graduated from an Ivy League university?",
        "keywords": "scientists, graduated, Ivy League university",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist> . ?uri <http://dbpedia.org/ontology/almaMater> ?university . ?university <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Ivy_League> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 494,
        "question": "Which types of grapes grow in Oregon?",
        "keywords": "grape types, grow, Oregon",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oregon_wine> <http://dbpedia.org/ontology/growingGrape> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Oregon_wine",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Oregon_wine",
                "predicate": "http://dbpedia.org/ontology/growingGrape",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 495,
        "question": "Who is starring in Spanish movies produced by Benicio del Toro?",
        "keywords": "starring, Spanish movies, produced, Benicio del Toro",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain> . ?film <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Benicio_del_Toro> . ?film <http://dbpedia.org/ontology/starring> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person> . } ",
        "topic_entity": "http://dbpedia.org/resource/Spain",
        "core_inferential_chain": [
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Spain"
            },
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Benicio_del_Toro",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/producer",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Person",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 496,
        "question": "Who is the manager of Real Madrid?",
        "keywords": "manager, Real Madrid",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Real_Madrid_C.F.> <http://dbpedia.org/ontology/manager> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Real_Madrid_C.F.",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Real_Madrid_C.F.",
                "predicate": "http://dbpedia.org/ontology/manager",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 497,
        "question": "Give me the currency of China.",
        "keywords": "currency, China",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/China",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/China",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 498,
        "question": "Which movies starring Mickey Rourke were directed by Guy Ritchie?",
        "keywords": "movies, starring, Mickey Rourke, directed, Guy Ritchie",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Mickey_Rourke> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Guy_Ritchie> . } ",
        "topic_entity": "http://dbpedia.org/resource/Mickey_Rourke",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Mickey_Rourke"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Guy_Ritchie",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/director",
                "ValueType": null
            }
        ]
    },
    {
        "id": 499,
        "question": "Is Darth Vader Luke\u2019s father?",
        "keywords": "Darth Vader, father, Luke",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Darth_Vader> <http://dbpedia.org/property/children> \"Luke Skywalker\"@en . }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 500,
        "question": "How many companies were founded by the founder of Facebook?",
        "keywords": "companies, founded by, founder, Facebook",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri .  ?uri <http://dbpedia.org/ontology/foundedBy> ?uri . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 501,
        "question": "How many companies were founded in the same year as Google?",
        "keywords": "companies, founded, same year, Google",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company> .  ?uri <http://dbpedia.org/ontology/foundingYear> ?year .  <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/foundingYear> ?year . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 502,
        "question": "How many airlines are members of the Star Alliance?",
        "keywords": "how many, airlines, member, Star Alliance",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline> .  ?uri <http://dbpedia.org/property/alliance> <http://dbpedia.org/resource/Star_Alliance> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 503,
        "question": "Which musician wrote the most books?",
        "keywords": "musician, wrote, the most books",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> .  ?x <http://dbpedia.org/ontology/author> ?uri .  ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Musician",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/occupation",
                "object": "http://dbpedia.org/resource/Musician"
            }
        ],
        "constraints": null
    },
    {
        "id": 504,
        "question": "Show me everyone who was born on Halloween.",
        "keywords": "person, born on, Halloween",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person> . { ?uri <http://dbpedia.org/ontology/birthDate> ?date . } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date . }  <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 505,
        "question": "In which country is Mecca located?",
        "keywords": "country, located, Mecca",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Mecca> <http://dbpedia.org/ontology/country> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Mecca",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mecca",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 506,
        "question": "What is the net income of Apple?",
        "keywords": "net income, Apple",
        "sparql": "SELECT DISTINCT ?ni WHERE {  <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni . } ",
        "topic_entity": "http://dbpedia.org/resource/Apple_Inc.",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Apple_Inc.",
                "predicate": "http://dbpedia.org/ontology/netIncome",
                "object": "?ni"
            }
        ],
        "constraints": []
    },
    {
        "id": 507,
        "question": "When did the Ming dynasty dissolve?",
        "keywords": "dissolve, Ming dynasty",
        "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Ming_dynasty> <http://dbpedia.org/property/dateEnd> ?date . } ",
        "topic_entity": "http://dbpedia.org/resource/Ming_dynasty",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ming_dynasty",
                "predicate": "http://dbpedia.org/property/dateEnd",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 508,
        "question": "Which museum in New York has the most visitors?",
        "keywords": "museum, New York, the most visitors",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Museum> .  ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/New_York_City> .  ?uri <http://dbpedia.org/ontology/numberOfVisitors> ?num . } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/New_York_City",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/New_York_City"
            }
        ],
        "constraints": null
    },
    {
        "id": 509,
        "question": "Is Lake Baikal bigger than the Great Bear Lake?",
        "keywords": "Lake Baikal, bigger than, Great Bear Lake",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Lake_Baikal> <http://dbpedia.org/ontology/areaTotal> ?a1 .  <http://dbpedia.org/resource/Great_Bear_Lake> <http://dbpedia.org/ontology/areaTotal> ?a2 .  FILTER (?a1 > ?a2) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 510,
        "question": "What is the highest mountain in Italy?",
        "keywords": "highest, mountain, Italy",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain> .  ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Italy> .  ?uri <http://dbpedia.org/ontology/elevation> ?num . } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 ",
        "topic_entity": "http://dbpedia.org/resource/Italy",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "http://dbpedia.org/resource/Italy"
            }
        ],
        "constraints": null
    },
    {
        "id": 511,
        "question": "Where did the architect of the Eiffel Tower study?",
        "keywords": "architect, Eiffel Tower, study",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Eiffel_Tower> <http://dbpedia.org/ontology/architect> ?x .  ?x <http://dbpedia.org/property/almaMater> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Eiffel_Tower",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Eiffel_Tower",
                "predicate": "http://dbpedia.org/ontology/architect",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/property/almaMater",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 512,
        "question": "Which Greek parties are pro-European?",
        "keywords": "Greek party, pro-European",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty> .  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> .  ?uri <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> . } ",
        "topic_entity": "http://dbpedia.org/resource/Greece",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Greece"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/PoliticalParty",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Pro-Europeanism",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/ideology",
                "ValueType": null
            }
        ]
    },
    {
        "id": 513,
        "question": "Who is the mayor of Rotterdam?",
        "keywords": "mayor, Rotterdam",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Rotterdam> <http://dbpedia.org/ontology/leaderName> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Rotterdam",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rotterdam",
                "predicate": "http://dbpedia.org/ontology/leaderName",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 514,
        "question": "How high is the lighthouse in Colombo?",
        "keywords": "high, lighthouse in Colombo",
        "sparql": "SELECT DISTINCT ?num WHERE {  <http://dbpedia.org/resource/Colombo_Lighthouse> <http://dbpedia.org/ontology/height> ?num . } ",
        "topic_entity": "http://dbpedia.org/resource/Colombo_Lighthouse",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Colombo_Lighthouse",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 515,
        "question": "Are Taiko a kind of Japanese musical instruments?",
        "keywords": "Taiko, kind of, Japanese musical instrument",
        "sparql": "ASK WHERE {  <http://dbpedia.org/resource/Taiko> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/yago/JapaneseMusicalInstruments> . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 516,
        "question": "How many ethnic groups live in Slovenia?",
        "keywords": "how many, ethnic groups, Slovenia",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  <http://dbpedia.org/resource/Slovenia> <http://dbpedia.org/ontology/ethnicGroup> ?uri . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 517,
        "question": "List the seven kings of Rome.",
        "keywords": "kings, Rome",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/King_of_Rome> . } ",
        "topic_entity": "http://dbpedia.org/resource/King_of_Rome",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/title",
                "object": "http://dbpedia.org/resource/King_of_Rome"
            }
        ],
        "constraints": []
    },
    {
        "id": 518,
        "question": "Who were the parents of Queen Victoria?",
        "keywords": "parents, Queen Victoria",
        "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Queen_Victoria> <http://dbpedia.org/ontology/parent> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Queen_Victoria",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Queen_Victoria",
                "predicate": "http://dbpedia.org/ontology/parent",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 519,
        "question": "Who is the heaviest player of the Chicago Bulls?",
        "keywords": "heaviest player, Chicago Bulls",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person> .  ?uri <http://dbpedia.org/ontology/weight> ?num . { ?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> . } UNION { ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> . } UNION { ?uri <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> . } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 520,
        "question": "Which volcanos in Japan erupted since 2000?",
        "keywords": "volcanos, Japan, erupted, since 2000",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Volcano> .  ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> .  ?uri <http://dbpedia.org/ontology/eruptionYear> ?date .  FILTER (year(?date) >= 2000) } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 521,
        "question": "Who is the tallest basketball player?",
        "keywords": "tallest, basketball player",
        "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer> .  ?uri <http://dbpedia.org/ontology/height> ?num . } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 522,
        "question": "Who is the host of the BBC Wildlife Specials?",
        "keywords": "host, BBC Wildlife Specials",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Wildlife_Specials> <http://dbpedia.org/ontology/presenter> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/BBC_Wildlife_Specials",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/BBC_Wildlife_Specials",
                "predicate": "http://dbpedia.org/ontology/presenter",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 523,
        "question": "In what city is the Heineken brewery?",
        "keywords": "city, Heineken brewery",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heineken> <http://dbpedia.org/ontology/manufacturer> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Heineken",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Heineken",
                "predicate": "http://dbpedia.org/ontology/manufacturer",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/locationCity",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 524,
        "question": "When did Operation Overlord commence?",
        "keywords": "when, Operation Overlord, commence",
        "sparql": "SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Operation_Overlord> <http://dbpedia.org/ontology/date> ?d . } ",
        "topic_entity": "http://dbpedia.org/resource/Operation_Overlord",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Operation_Overlord",
                "predicate": "http://dbpedia.org/ontology/date",
                "object": "?d"
            }
        ],
        "constraints": []
    },
    {
        "id": 525,
        "question": "Who developed Slack?",
        "keywords": "developer, Slack",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Slack_(software)> . }",
        "topic_entity": "http://dbpedia.org/resource/Slack_(software)",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/product",
                "object": "http://dbpedia.org/resource/Slack_(software)"
            }
        ],
        "constraints": []
    },
    {
        "id": 526,
        "question": "Who wrote the book Les Piliers de la terre?",
        "keywords": "wrote, book, The pillars of the Earth",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:The_Pillars_of_the_Earth dbo:author ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 527,
        "question": "Who discovered Ceres?",
        "keywords": "discoverer, Ceres",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                "predicate": "http://dbpedia.org/ontology/discoverer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 528,
        "question": "What is the largest country in the world?",
        "keywords": "largest country, world",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/areaTotal> ?n . } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 529,
        "question": "Who is the mayor of Paris?",
        "keywords": "mayor, Paris",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paris> <http://dbpedia.org/ontology/mayor> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Paris",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Paris",
                "predicate": "http://dbpedia.org/ontology/mayor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 530,
        "question": "Who is the coach of Ankara's ice hockey team?",
        "keywords": "coach, ice hockey team, Ankara",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Ankara> . ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Turkish_Ice_Hockey_First_League> . ?x <http://dbpedia.org/ontology/coach> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Ankara",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/city",
                "object": "http://dbpedia.org/resource/Ankara"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/coach",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Turkish_Ice_Hockey_First_League",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/league",
                "ValueType": null
            }
        ]
    },
    {
        "id": 531,
        "question": "How much did the Lego Movie cost?",
        "keywords": "Lego Movie, cost",
        "sparql": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?n . } ",
        "topic_entity": "http://dbpedia.org/resource/The_Lego_Movie",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Lego_Movie",
                "predicate": "http://dbpedia.org/ontology/budget",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 532,
        "question": "Where does Piccadilly start?",
        "keywords": "Piccadilly, start",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Piccadilly>. } ",
        "topic_entity": "http://dbpedia.org/resource/Piccadilly",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/routeStart",
                "object": "http://dbpedia.org/resource/Piccadilly"
            }
        ],
        "constraints": []
    },
    {
        "id": 533,
        "question": "Is Barack Obama a democrat?",
        "keywords": "Barack Obama, democrat",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK\nWHERE { \n        res:Barack_Obama dbo:party <http://dbpedia.org/resource/Democratic_Party_(United_States)> . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 534,
        "question": "How many people live in Poland?",
        "keywords": "How many people, Poland",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Poland> <http://dbpedia.org/ontology/populationTotal> ?uri . }  ",
        "topic_entity": "http://dbpedia.org/resource/Poland",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Poland",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 535,
        "question": "Is Christian Bale starring in Batman Begins?",
        "keywords": "Christian Bale, starring, Batman Begins",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n\tres:Batman_Begins dbo:starring res:Christian_Bale .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 536,
        "question": "What is the highest mountain in Australia?",
        "keywords": "Australia, highest mountain",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n\t?uri rdf:type dbo:Mountain .\n        ?uri dbo:locatedInArea res:Australia .\n        ?uri dbo:elevation ?elevation .\n} \nORDER BY DESC(?elevation) LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "http://dbpedia.org/resource/Australia"
            }
        ],
        "constraints": null
    },
    {
        "id": 537,
        "question": "Who created Family Guy?",
        "keywords": "create, Family Guy",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> ?uri . }  ",
        "topic_entity": "http://dbpedia.org/resource/Family_Guy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Family_Guy",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 538,
        "question": "Who wrote the song Hotel California?",
        "keywords": "write, song, Hotel California",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hotel_California> <http://dbpedia.org/ontology/writer> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Hotel_California",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Hotel_California",
                "predicate": "http://dbpedia.org/ontology/writer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 539,
        "question": "What is in a chocolate chip cookie?",
        "keywords": "ingredients, chocolate chip cookie",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chocolate_chip_cookie> <http://dbpedia.org/ontology/ingredient> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Chocolate_chip_cookie",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Chocolate_chip_cookie",
                "predicate": "http://dbpedia.org/ontology/ingredient",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 540,
        "question": "Does Neymar play for Real Madrid?",
        "keywords": "Neymar, play, Real Madrid",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Neymar> <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Real_Madrid_C.F.> . }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 541,
        "question": "When did the Ming dynasty dissolve?",
        "keywords": "dissolve, Ming dynasty",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?date\nWHERE {  \n        res:Ming_dynasty dbo:dissolutionDate ?date .\n}",
        "topic_entity": "http://dbpedia.org/resource/Ming_dynasty",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ming_dynasty",
                "predicate": "http://dbpedia.org/ontology/dissolutionDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 542,
        "question": "List all episodes of the first season of the HBO television series The Sopranos!",
        "keywords": "HBO, television series, Sopranos, first season, episode",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\t?uri dbo:series res:The_Sopranos  .\n        ?uri dbo:seasonNumber 1 .\n}",
        "topic_entity": "http://dbpedia.org/resource/The_Sopranos",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/series",
                "object": "http://dbpedia.org/resource/The_Sopranos"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Value",
                "Argument": "1",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/seasonNumber",
                "ValueType": null
            }
        ]
    },
    {
        "id": 543,
        "question": "Did Arnold Schwarzenegger attend a university?",
        "keywords": "Arnold Schwarzenegger, attend, university",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nASK\nWHERE {\n        res:Arnold_Schwarzenegger dbo:almaMater ?x .\n        ?x rdf:type dbo:University .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 544,
        "question": "Who played Gus Fring in Breaking Bad?",
        "keywords": "play, Gus Fring, Breaking Bad",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gus_Fring> <http://dbpedia.org/ontology/portrayer> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Gus_Fring",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Gus_Fring",
                "predicate": "http://dbpedia.org/ontology/portrayer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 545,
        "question": "In which ancient empire could you pay with cocoa beans?",
        "keywords": "ancient empire, pay, cocoa beans",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Cocoa_bean> . }",
        "topic_entity": "http://dbpedia.org/resource/Cocoa_bean",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "http://dbpedia.org/resource/Cocoa_bean"
            }
        ],
        "constraints": []
    },
    {
        "id": 546,
        "question": "Which electronics companies were founded in Beijing?",
        "keywords": "electronics companies, founded, Beijing",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Electronics> . ?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Beijing> . }",
        "topic_entity": "http://dbpedia.org/resource/Electronics",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/industry",
                "object": "http://dbpedia.org/resource/Electronics"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Company",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Beijing",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/foundationPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 547,
        "question": "What is the capital of Cameroon?",
        "keywords": "capital, Cameroon",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri. } ",
        "topic_entity": "http://dbpedia.org/resource/Cameroon",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Cameroon",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 548,
        "question": "Was Natalie Portman born in the United States?",
        "keywords": "Natalie Portman, born, United States",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE { \n\tres:Natalie_Portman dbo:birthPlace ?city .\n      \t?city dbo:country res:United_States .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 549,
        "question": "What form of government does Russia have?",
        "keywords": "form of government, Russia",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russia> <http://dbpedia.org/ontology/governmentType> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Russia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Russia",
                "predicate": "http://dbpedia.org/ontology/governmentType",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 550,
        "question": "Who is the oldest child of Meryl Streep?",
        "keywords": "oldest child, Meryl Streep",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { \n        res:Meryl_Streep dbo:child ?uri . \n        ?uri dbo:birthDate ?d .\n}\nORDER BY ASC(?d)\nOFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Meryl_Streep",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Meryl_Streep",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?uri"
            }
        ],
        "constraints": null
    },
    {
        "id": 551,
        "question": "Which Indian company has the most employees?",
        "keywords": "Indian company, the most employees",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/India> . ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n . } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/India",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/India"
            }
        ],
        "constraints": null
    },
    {
        "id": 552,
        "question": "Who is the president of Eritrea?",
        "keywords": "president, Eritrea",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eritrea> <http://dbpedia.org/ontology/leader> ?uri . <http://dbpedia.org/resource/Eritrea> <http://dbpedia.org/ontology/leaderTitle> 'President'@en . }  ",
        "topic_entity": "http://dbpedia.org/resource/Eritrea",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Eritrea",
                "predicate": "http://dbpedia.org/ontology/leader",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 553,
        "question": "Which films did Stanley Kubrick direct?",
        "keywords": "film, Stanley Kubrick, direct",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . }",
        "topic_entity": "http://dbpedia.org/resource/Stanley_Kubrick",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Stanley_Kubrick"
            }
        ],
        "constraints": []
    },
    {
        "id": 554,
        "question": "What is the highest mountain in Italy?",
        "keywords": "highest, mountain, Italy",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Mountain .\n        ?uri dbo:locatedInArea res:Italy .\n        ?uri dbo:elevation ?num .\n}\nORDER BY DESC(?num)\nOFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Italy",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "http://dbpedia.org/resource/Italy"
            }
        ],
        "constraints": null
    },
    {
        "id": 555,
        "question": "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?",
        "keywords": "subsidiary, Lufthansa, serve, Dortmund, Berlin Tegel",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri \nWHERE {\n        res:Lufthansa dbo:subsidiary ?uri .\n        ?uri dbo:targetAirport res:Dortmund_Airport .\n        ?uri dbo:targetAirport res:Berlin_Tegel_Airport .\n}",
        "topic_entity": "http://dbpedia.org/resource/Lufthansa",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Lufthansa",
                "predicate": "http://dbpedia.org/ontology/subsidiary",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Dortmund_Airport",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/targetAirport",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Berlin_Tegel_Airport",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/targetAirport",
                "ValueType": null
            }
        ]
    },
    {
        "id": 556,
        "question": "Who was the successor of John F. Kennedy?",
        "keywords": "John F. Kennedy, successor",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:John_F._Kennedy dbo:successor ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/John_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/successor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 557,
        "question": "Who composed the soundtrack for Cameron's Titanic?",
        "keywords": "compose, soundtrack, Cameron's Titanic",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Titanic_(1997_film)> <http://dbpedia.org/ontology/musicComposer> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Titanic_(1997_film)",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Titanic_(1997_film)",
                "predicate": "http://dbpedia.org/ontology/musicComposer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 558,
        "question": "In which time zone is Rome?",
        "keywords": "time zone, Rome",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rome> <http://dbpedia.org/ontology/timeZone> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Rome",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rome",
                "predicate": "http://dbpedia.org/ontology/timeZone",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 559,
        "question": "Give me the currency of China.",
        "keywords": "currency, China",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {  \n   res:China dbo:currency ?uri . \n}",
        "topic_entity": "http://dbpedia.org/resource/China",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/China",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 560,
        "question": "Who are the developers of DBpedia?",
        "keywords": "developers, DBpedia",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/DBpedia> <http://dbpedia.org/ontology/developer> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/DBpedia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/DBpedia",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 561,
        "question": "Does Abraham Lincoln's death place have a website?",
        "keywords": "Abraham Lincoln, death place, website",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n        res:Abraham_Lincoln dbo:deathPlace ?p .\n        ?p dbo:website ?w . \n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 562,
        "question": "Who is the king of the Netherlands?",
        "keywords": "king, the Netherlands",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Netherlands> <http://dbpedia.org/ontology/leader> ?uri . ?uri a <http://dbpedia.org/ontology/Royalty> . } ",
        "topic_entity": "http://dbpedia.org/resource/Netherlands",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Netherlands",
                "predicate": "http://dbpedia.org/ontology/leader",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Royalty",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 563,
        "question": "In which city did Nikos Kazantzakis die?",
        "keywords": "city, Nikos Kazantzakis, die",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nikos_Kazantzakis> <http://dbpedia.org/ontology/deathPlace> ?uri . ?uri a <http://dbpedia.org/ontology/Town> . }",
        "topic_entity": "http://dbpedia.org/resource/Nikos_Kazantzakis",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Nikos_Kazantzakis",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Town",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 564,
        "question": "Give me a list of all critically endangered birds.",
        "keywords": "list, critically endangered birds",
        "sparql": "SELECT DISTINCT ?uri ?p WHERE { ?uri a <http://dbpedia.org/ontology/Bird> . { ?uri <http://dbpedia.org/ontology/conservationStatus> 'CR'^^<http://www.w3.org/2001/XMLSchema#string> . } UNION { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Critically_endangered_animals> . } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 565,
        "question": "Which companies produce hovercrafts?",
        "keywords": "companies, produce, hovercrafts",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Hovercraft> . }",
        "topic_entity": "http://dbpedia.org/resource/Hovercraft",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/product",
                "object": "http://dbpedia.org/resource/Hovercraft"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Company",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 566,
        "question": "Did Elvis Presley have children?",
        "keywords": "Elvis Presley, children",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Elvis_Presley> <http://dbpedia.org/ontology/child> ?uri . } ",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 567,
        "question": "In which countries do people speak Japanese?",
        "keywords": "which countries, speak, Japanese",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Japanese_language> . } ",
        "topic_entity": "http://dbpedia.org/resource/Japanese_language",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/language",
                "object": "http://dbpedia.org/resource/Japanese_language"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Country",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 568,
        "question": "What was the first Queen album?",
        "keywords": "first album, Queen",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Album> . ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> . ?uri <http://dbpedia.org/ontology/releaseDate> ?d . } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Queen_(band)",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/artist",
                "object": "http://dbpedia.org/resource/Queen_(band)"
            }
        ],
        "constraints": null
    },
    {
        "id": 569,
        "question": "What country is Sitecore from?",
        "keywords": "country, Sitecore",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sitecore> <http://dbpedia.org/ontology/foundationPlace> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Sitecore",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Sitecore",
                "predicate": "http://dbpedia.org/ontology/foundationPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 570,
        "question": "Who was Vincent van Gogh inspired by?",
        "keywords": "person, inspiring, Vincent van Gogh",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/Vincent_van_Gogh> . }",
        "topic_entity": "http://dbpedia.org/resource/Vincent_van_Gogh",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/influenced",
                "object": "http://dbpedia.org/resource/Vincent_van_Gogh"
            }
        ],
        "constraints": []
    },
    {
        "id": 571,
        "question": "Who wrote the Game of Thrones theme?",
        "keywords": "writer, Game of Thrones",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?uri. }",
        "topic_entity": "http://dbpedia.org/resource/Game_of_Thrones",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Game_of_Thrones",
                "predicate": "http://dbpedia.org/ontology/composer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 572,
        "question": "When did Boris Becker end his active career?",
        "keywords": "Boris Becker, end career",
        "sparql": "SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Boris_Becker> <http://dbpedia.org/ontology/activeYearsEndDate> ?d . } ",
        "topic_entity": "http://dbpedia.org/resource/Boris_Becker",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Boris_Becker",
                "predicate": "http://dbpedia.org/ontology/activeYearsEndDate",
                "object": "?d"
            }
        ],
        "constraints": []
    },
    {
        "id": 573,
        "question": "To which party does the mayor of Paris belong?",
        "keywords": "party, mayor, Paris, belong",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paris> <http://dbpedia.org/ontology/mayor> ?x . ?x <http://dbpedia.org/ontology/party> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Paris",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Paris",
                "predicate": "http://dbpedia.org/ontology/mayor",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/party",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 574,
        "question": "Who was the doctoral supervisor of Albert Einstein?",
        "keywords": "doctoral supervisor, Albert Einstein",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Albert_Einstein",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Albert_Einstein",
                "predicate": "http://dbpedia.org/ontology/doctoralAdvisor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 575,
        "question": "In which city does Sylvester Stallone live?",
        "keywords": "city, live, Sylvester Stallone",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/City> . <http://dbpedia.org/resource/Sylvester_Stallone> <http://dbpedia.org/ontology/residence> ?uri . }",
        "topic_entity": "http://dbpedia.org/resource/Sylvester_Stallone",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Sylvester_Stallone",
                "predicate": "http://dbpedia.org/ontology/residence",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/City",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 576,
        "question": "Who is the son of Sonny and Cher?",
        "keywords": "son, Sonny and Cher",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Cher> . ?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Sonny_Bono> . }",
        "topic_entity": "http://dbpedia.org/resource/Cher",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/parent",
                "object": "http://dbpedia.org/resource/Cher"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Sonny_Bono",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/parent",
                "ValueType": null
            }
        ]
    },
    {
        "id": 577,
        "question": "In which city are the headquarters of the United Nations?",
        "keywords": "city, headquarters of the United Nations",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Headquarters_of_the_United_Nations> <http://dbpedia.org/ontology/location> ?uri . ?uri a <http://dbpedia.org/ontology/City> . } ",
        "topic_entity": "http://dbpedia.org/resource/Headquarters_of_the_United_Nations",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Headquarters_of_the_United_Nations",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/City",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 578,
        "question": "Who is the mayor of Rotterdam?",
        "keywords": "mayor, Rotterdam",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Rotterdam dbo:leaderName ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Rotterdam",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rotterdam",
                "predicate": "http://dbpedia.org/ontology/leaderName",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 579,
        "question": "Show me Hemingway's autobiography.",
        "keywords": "autobiography, Hemingway",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Ernest_Hemingway> . ?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Autobiography> . }",
        "topic_entity": "http://dbpedia.org/resource/Ernest_Hemingway",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/Ernest_Hemingway"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Autobiography",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/literaryGenre",
                "ValueType": null
            }
        ]
    },
    {
        "id": 580,
        "question": "Is proinsulin a protein?",
        "keywords": "proinsulin, protein",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nASK \nWHERE {\n\tres:Proinsulin rdf:type dbo:Protein .\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 581,
        "question": "Who were the parents of Queen Victoria?",
        "keywords": "parents, Queen Victoria",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n         res:Queen_Victoria dbo:parent ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Queen_Victoria",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Queen_Victoria",
                "predicate": "http://dbpedia.org/ontology/parent",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 582,
        "question": "Is Lake Baikal bigger than the Great Bear Lake?",
        "keywords": "Lake Baikal, bigger than, Great Bear Lake",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nASK\nWHERE {  \n        res:Lake_Baikal dbo:areaTotal ?a1 . \n        res:Great_Bear_Lake dbo:areaTotal ?a2 .\n        FILTER (?a1 > ?a2)\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 583,
        "question": "Did Kaurism\u00e4ki ever win the Grand Prix at Cannes?",
        "keywords": "Kaurism\u00e4ki, winner, Grand Prix at Cannes",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Aki_Kaurism\u00e4ki> <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> . }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 584,
        "question": "Where is Syngman Rhee buried?",
        "keywords": "where, Syngman Rhee, buried",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Syngman_Rhee> <http://dbpedia.org/ontology/restingPlace> ?uri . } ",
        "topic_entity": "http://dbpedia.org/resource/Syngman_Rhee",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Syngman_Rhee",
                "predicate": "http://dbpedia.org/ontology/restingPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 585,
        "question": "Show me all books in Asimov's Foundation series.",
        "keywords": "books, Asimov, Foundation series",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Foundation_series> . } ",
        "topic_entity": "http://dbpedia.org/resource/Foundation_series",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/series",
                "object": "http://dbpedia.org/resource/Foundation_series"
            }
        ],
        "constraints": []
    },
    {
        "id": 586,
        "question": "How high is the Yokohama Marine Tower?",
        "keywords": "high, Yokohama Marine Tower",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num\nWHERE {\n        res:Yokohama_Marine_Tower dbo:height ?num .\n}",
        "topic_entity": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 587,
        "question": "Does the new Battlestar Galactica series have more episodes than the old one?",
        "keywords": "new BattleStar Galactica series, episodes, more, old Battle Star Galactica series",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n\t<http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29> dbo:numberOfEpisodes ?x .\n\t<http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29> dbo:numberOfEpisodes ?y .\n\tFILTER (?y > ?x)\n}",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 588,
        "question": "In which country is Mecca located?",
        "keywords": "country, located, Mecca",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri \nWHERE {  \n        res:Mecca dbo:country ?uri .\n}",
        "topic_entity": "http://dbpedia.org/resource/Mecca",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mecca",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 589,
        "question": "What is the biggest stadium in Spain?",
        "keywords": "biggest stadium, Spain",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Stadium> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Spain> . ?uri <http://dbpedia.org/ontology/seatingCapacity> ?n . } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Spain",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/Spain"
            }
        ],
        "constraints": null
    },
    {
        "id": 590,
        "question": "What are the five boroughs of New York?",
        "keywords": "five boroughs, New York",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Borough_(New_York_City)> . }",
        "topic_entity": "http://dbpedia.org/resource/Borough_(New_York_City)",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/governmentType",
                "object": "http://dbpedia.org/resource/Borough_(New_York_City)"
            }
        ],
        "constraints": []
    },
    {
        "id": 591,
        "question": "When did princess Diana die?",
        "keywords": "date, princess Diana, died",
        "sparql": "SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Diana,_Princess_of_Wales> <http://dbpedia.org/ontology/deathDate> ?d . }",
        "topic_entity": "http://dbpedia.org/resource/Diana,_Princess_of_Wales",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Diana,_Princess_of_Wales",
                "predicate": "http://dbpedia.org/ontology/deathDate",
                "object": "?d"
            }
        ],
        "constraints": []
    },
    {
        "id": 592,
        "question": "List all the musicals with music by Elton John.",
        "keywords": "musicals, music by, Elton John",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
        "topic_entity": "http://dbpedia.org/resource/Elton_John",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/musicBy",
                "object": "http://dbpedia.org/resource/Elton_John"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Musical",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 593,
        "question": "How high is the lighthouse in Colombo?",
        "keywords": "high, lighthouse in Colombo",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Colombo_Lighthouse dbo:height ?num }",
        "topic_entity": "http://dbpedia.org/resource/Colombo_Lighthouse",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Colombo_Lighthouse",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 594,
        "question": "Who is the host of the BBC Wildlife Specials?",
        "keywords": "host, BBC Wildlife Specials",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:BBC_Wildlife_Specials dbo:presenter ?uri }",
        "topic_entity": "http://dbpedia.org/resource/BBC_Wildlife_Specials",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/BBC_Wildlife_Specials",
                "predicate": "http://dbpedia.org/ontology/presenter",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 595,
        "question": "In what city is the Heineken brewery?",
        "keywords": "city, Heineken brewery",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Heineken dbo:manufacturer ?x . ?x dbo:locationCity ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Heineken",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Heineken",
                "predicate": "http://dbpedia.org/ontology/manufacturer",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/locationCity",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 596,
        "question": "When did Operation Overlord commence?",
        "keywords": "when, Operation Overlord, commence",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { res:Operation_Overlord dbo:date ?d }",
        "topic_entity": "http://dbpedia.org/resource/Operation_Overlord",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Operation_Overlord",
                "predicate": "http://dbpedia.org/ontology/date",
                "object": "?d"
            }
        ],
        "constraints": []
    },
    {
        "id": 597,
        "question": "In which city does the Chile Route 68 end?",
        "keywords": "city, Chile Route 68, ends",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Chile_Route_68 dbo:routeEnd ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Chile_Route_68",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Chile_Route_68",
                "predicate": "http://dbpedia.org/ontology/routeEnd",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 598,
        "question": "Who developed Slack?",
        "keywords": "developer, Slack",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:product <http://dbpedia.org/resource/Slack_(software)> }",
        "topic_entity": "http://dbpedia.org/resource/Slack_(software)",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/product",
                "object": "http://dbpedia.org/resource/Slack_(software)"
            }
        ],
        "constraints": []
    },
    {
        "id": 599,
        "question": "What did Bruce Carver die from?",
        "keywords": "Bruce Carver, die",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Carver dbo:deathCause ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Bruce_Carver",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Bruce_Carver",
                "predicate": "http://dbpedia.org/ontology/deathCause",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 600,
        "question": "Which books by Kerouac were published by Viking Press?",
        "keywords": "book, Kerouac, publish, Viking Press",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:publisher res:Viking_Press ; dbo:author res:Jack_Kerouac }",
        "topic_entity": "http://dbpedia.org/resource/Viking_Press",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/Viking_Press"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Jack_Kerouac",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/author",
                "ValueType": null
            }
        ]
    },
    {
        "id": 601,
        "question": "How tall is Amazon Eve?",
        "keywords": "Amazon Eve, tall",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Amazon_Eve dbo:height ?height }",
        "topic_entity": "http://dbpedia.org/resource/Amazon_Eve",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Amazon_Eve",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?height"
            }
        ],
        "constraints": []
    },
    {
        "id": 602,
        "question": "Who discovered Ceres?",
        "keywords": "discoverer, Ceres",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                "predicate": "http://dbpedia.org/ontology/discoverer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 603,
        "question": "What is the largest country in the world?",
        "keywords": "largest country, world",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 604,
        "question": "Who is the mayor of Paris?",
        "keywords": "mayor of Paris",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Paris",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Paris",
                "predicate": "http://dbpedia.org/ontology/mayor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 605,
        "question": "Who is the coach of Ankara's ice hockey team?",
        "keywords": "coach, ice hockey team, Ankara",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:city res:Ankara ; dbo:league res:Turkish_Ice_Hockey_First_League ; dbo:coach ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Ankara",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/city",
                "object": "http://dbpedia.org/resource/Ankara"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/coach",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Turkish_Ice_Hockey_First_League",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/league",
                "ValueType": null
            }
        ]
    },
    {
        "id": 606,
        "question": "Which awards did Douglas Hofstadter win?",
        "keywords": "Douglas Hofstadter, award",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Douglas_Hofstadter dbo:award ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Douglas_Hofstadter",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Douglas_Hofstadter",
                "predicate": "http://dbpedia.org/ontology/award",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 607,
        "question": "How much did the Lego Movie cost?",
        "keywords": "Lego Movie, cost",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
        "topic_entity": "http://dbpedia.org/resource/The_Lego_Movie",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Lego_Movie",
                "predicate": "http://dbpedia.org/ontology/budget",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 608,
        "question": "Do Prince Harry and Prince William have the same parents?",
        "keywords": "Prince Harry, Prince William, same, parents",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbo:parent ?x . res:Prince_Harry dbo:parent ?x }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 609,
        "question": "How many languages are spoken in Turkmenistan?",
        "keywords": "languages, Turkmenistan",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { res:Turkmenistan dbo:language ?x }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 610,
        "question": "In which films did Julia Roberts as well as Richard Gere play?",
        "keywords": "film, play, Julia Roberts, Richard Gere",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
        "topic_entity": "http://dbpedia.org/resource/Julia_Roberts",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Julia_Roberts"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Richard_Gere",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/starring",
                "ValueType": null
            }
        ]
    },
    {
        "id": 611,
        "question": "In which year was Rachel Stevens born?",
        "keywords": "year, born, Rachel Stevens",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Rachel_Stevens",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rachel_Stevens",
                "predicate": "http://dbpedia.org/ontology/birthYear",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 612,
        "question": "How often did Jane Fonda marry?",
        "keywords": "Jane Fonda, marry, how often",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Jane_Fonda dbo:spouse ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 613,
        "question": "Who was the first to climb Mount Everest?",
        "keywords": "first, climb, mount Everest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:firstAscentPerson ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Mount_Everest",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mount_Everest",
                "predicate": "http://dbpedia.org/ontology/firstAscentPerson",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 614,
        "question": "How many people live in Poland?",
        "keywords": "How many people, Poland",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Poland dbo:populationTotal ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Poland",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Poland",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 615,
        "question": "What is the location of the Houses of Parliament?",
        "keywords": "location, Houses of Parliament",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT ?uri WHERE { res:Palace_of_Westminster dbo:location ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Palace_of_Westminster",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Palace_of_Westminster",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 616,
        "question": "What was the last movie with Alec Guinness?",
        "keywords": "Alec Guinness, last, movie",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Alec_Guinness",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Alec_Guinness"
            }
        ],
        "constraints": null
    },
    {
        "id": 617,
        "question": "What is the highest mountain in Australia?",
        "keywords": "Australia, highest mountain",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Australia ; dbo:elevation ?elevation } ORDER BY DESC(?elevation) LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "http://dbpedia.org/resource/Australia"
            }
        ],
        "constraints": null
    },
    {
        "id": 618,
        "question": "Who created Family Guy?",
        "keywords": "create, Family Guy",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Family_Guy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Family_Guy",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 619,
        "question": "Who wrote the song Hotel California?",
        "keywords": "write, song, Hotel California",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Hotel_California dbo:writer ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Hotel_California",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Hotel_California",
                "predicate": "http://dbpedia.org/ontology/writer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 620,
        "question": "Give me all actors starring in movies directed by William Shatner.",
        "keywords": "actor, starring, movie, direct, William Shatner",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
        "topic_entity": "http://dbpedia.org/resource/William_Shatner",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/William_Shatner"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 621,
        "question": "What is in a chocolate chip cookie?",
        "keywords": "ingredients, chocolate chip cookie",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Chocolate_chip_cookie dbo:ingredient ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Chocolate_chip_cookie",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Chocolate_chip_cookie",
                "predicate": "http://dbpedia.org/ontology/ingredient",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 622,
        "question": "Does Neymar play for Real Madrid?",
        "keywords": "Neymar, play, Real Madrid",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Neymar dbo:team <http://dbpedia.org/resource/Real_Madrid_C.F.> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 623,
        "question": "In which UK city are the headquarters of the MI6?",
        "keywords": "MI6, headquarters, city, UK",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Secret_Intelligence_Service dbo:headquarter ?uri . ?uri dbo:country res:United_Kingdom }",
        "topic_entity": "http://dbpedia.org/resource/Secret_Intelligence_Service",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Secret_Intelligence_Service",
                "predicate": "http://dbpedia.org/ontology/headquarter",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/United_Kingdom",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/country",
                "ValueType": null
            }
        ]
    },
    {
        "id": 624,
        "question": "What does IYCM stand for?",
        "keywords": "IYCM, stand for",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:abbreviation \"IYCM\" }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 625,
        "question": "When did the Ming dynasty dissolve?",
        "keywords": "dissolve, Ming dynasty",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Ming_dynasty dbo:dissolutionDate ?date }",
        "topic_entity": "http://dbpedia.org/resource/Ming_dynasty",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ming_dynasty",
                "predicate": "http://dbpedia.org/ontology/dissolutionDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 626,
        "question": "Give me all launch pads operated by NASA.",
        "keywords": "launch pad, operate, NASA",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:LaunchPad ; dbo:operator res:NASA }",
        "topic_entity": "http://dbpedia.org/resource/NASA",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/operator",
                "object": "http://dbpedia.org/resource/NASA"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/LaunchPad",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 627,
        "question": "List all episodes of the first season of the HBO television series The Sopranos.",
        "keywords": "HBO, television series, Sopranos, first season, episode",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }",
        "topic_entity": "http://dbpedia.org/resource/The_Sopranos",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/series",
                "object": "http://dbpedia.org/resource/The_Sopranos"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Value",
                "Argument": "1",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/seasonNumber",
                "ValueType": null
            }
        ]
    },
    {
        "id": 628,
        "question": "Who created Batman?",
        "keywords": "Batman, creator",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Batman",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Batman",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 629,
        "question": "Who played Gus Fring in Breaking Bad?",
        "keywords": "play, Gus Fring, Breaking Bad",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Gus_Fring dbo:portrayer ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Gus_Fring",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Gus_Fring",
                "predicate": "http://dbpedia.org/ontology/portrayer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 630,
        "question": "In which ancient empire could you pay with cocoa beans?",
        "keywords": "ancient empire, pay, cocoa beans",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:currency res:Cocoa_bean }",
        "topic_entity": "http://dbpedia.org/resource/Cocoa_bean",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "http://dbpedia.org/resource/Cocoa_bean"
            }
        ],
        "constraints": []
    },
    {
        "id": 631,
        "question": "Who is the editor of Forbes?",
        "keywords": "Forbes, editor",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Forbes dbo:editor ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Forbes",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Forbes",
                "predicate": "http://dbpedia.org/ontology/editor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 632,
        "question": "Which electronics companies were founded in Beijing?",
        "keywords": "electronics companies, founded, Beijing",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:industry res:Electronics ; dbo:foundationPlace res:Beijing }",
        "topic_entity": "http://dbpedia.org/resource/Electronics",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/industry",
                "object": "http://dbpedia.org/resource/Electronics"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Company",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Beijing",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/foundationPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 633,
        "question": "Give me all video games published by Mean Hamster Software.",
        "keywords": "video game, publish, Mean Hamster Software",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:VideoGame ; dbo:publisher res:Mean_Hamster_Software }",
        "topic_entity": "http://dbpedia.org/resource/Mean_Hamster_Software",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/Mean_Hamster_Software"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/VideoGame",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 634,
        "question": "How many Aldi stores are there?",
        "keywords": "own, Aldi",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { res:Aldi dbo:numberOfLocations ?number }",
        "topic_entity": "http://dbpedia.org/resource/Aldi",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Aldi",
                "predicate": "http://dbpedia.org/ontology/numberOfLocations",
                "object": "?number"
            }
        ],
        "constraints": []
    },
    {
        "id": 635,
        "question": "What is the capital of Cameroon?",
        "keywords": "capital, Cameroon",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Cameroon",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Cameroon",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 636,
        "question": "Is there a video game called Battle Chess?",
        "keywords": "video game, Battle Chess",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?uri rdf:type dbo:VideoGame ; rdfs:label \"Battle Chess\"@en }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 637,
        "question": "Was the wife of president Lincoln called Mary?",
        "keywords": "Lincoln, president, wife, called, Mary",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ASK WHERE { res:Abraham_Lincoln dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, \"Mary\") }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 638,
        "question": "Give me all movies directed by Francis Ford Coppola.",
        "keywords": "movie, direct, Francis Ford Coppola",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
        "topic_entity": "http://dbpedia.org/resource/Francis_Ford_Coppola",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Francis_Ford_Coppola"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 639,
        "question": "Which of Tim Burton's films had the highest budget?",
        "keywords": "highest budget, film, Tim Burton",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Tim_Burton ; dbo:budget ?b } ORDER BY ?b OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Tim_Burton",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Tim_Burton"
            }
        ],
        "constraints": null
    },
    {
        "id": 640,
        "question": "Give me the grandchildren of Elvis Presley.",
        "keywords": "Elvis Presley, grandchildren",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Elvis_Presley dbo:child ?child . ?child dbo:child ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Elvis_Presley",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Elvis_Presley",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?child"
            },
            {
                "subject": "?child",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 641,
        "question": "Which movies starring Mickey Rourke were directed by Guy Ritchie?",
        "keywords": "movies, starring, Mickey Rourke, directed, Guy Ritchie",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Mickey_Rourke ; dbo:director res:Guy_Ritchie }",
        "topic_entity": "http://dbpedia.org/resource/Mickey_Rourke",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Mickey_Rourke"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Guy_Ritchie",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/director",
                "ValueType": null
            }
        ]
    },
    {
        "id": 642,
        "question": "What form of government does Russia have?",
        "keywords": "form of government, Russia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Russia dbo:governmentType ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Russia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Russia",
                "predicate": "http://dbpedia.org/ontology/governmentType",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 643,
        "question": "Give me all Canadian Grunge record labels.",
        "keywords": "record label, Canadian, Grunge",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:RecordLabel ; dbo:genre res:Grunge ; dbo:country res:Canada }",
        "topic_entity": "http://dbpedia.org/resource/Grunge",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/genre",
                "object": "http://dbpedia.org/resource/Grunge"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/RecordLabel",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Canada",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/country",
                "ValueType": null
            }
        ]
    },
    {
        "id": 644,
        "question": "How many children did Benjamin Franklin have?",
        "keywords": "Benjamin Franklin, child",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 645,
        "question": "List the children of Margaret Thatcher.",
        "keywords": "Margaret Thatcher, child",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Margaret_Thatcher dbo:child ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Margaret_Thatcher",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Margaret_Thatcher",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 646,
        "question": "From which region is the Melon de Bourgogne?",
        "keywords": "region, Melon de Bourgogne",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Melon_de_Bourgogne dbo:wineRegion ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Melon_de_Bourgogne",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Melon_de_Bourgogne",
                "predicate": "http://dbpedia.org/ontology/wineRegion",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 647,
        "question": "Does the Isar flow into a lake?",
        "keywords": "Isar, flow, lake",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?x dbo:inflow res:Isar ; rdf:type dbo:Lake }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 648,
        "question": "Which airports does Yeti Airlines serve?",
        "keywords": "airports, Yeti Airlines",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Yeti_Airlines dbo:targetAirport ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Yeti_Airlines",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Yeti_Airlines",
                "predicate": "http://dbpedia.org/ontology/targetAirport",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 649,
        "question": "Which Indian company has the most employees?",
        "keywords": "Indian company, the most employees",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:location res:India ; dbo:numberOfEmployees ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/India",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/India"
            }
        ],
        "constraints": null
    },
    {
        "id": 650,
        "question": "Which city has the most inhabitants?",
        "keywords": "city, the most inhabitants",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY DESC(?pop) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 651,
        "question": "Is the wife of president Obama called Michelle?",
        "keywords": "Obama, president, wife, called, Michelle",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ASK WHERE { res:Barack_Obama dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, \"Michelle\") }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 652,
        "question": "How many ethnic groups live in Slovenia?",
        "keywords": "how many, ethnic groups, Slovenia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Slovenia dbo:ethnicGroup ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 653,
        "question": "Who is the president of Eritrea?",
        "keywords": "president, Eritrea",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Eritrea dbo:leader ?uri ; dbo:leaderTitle \"President\"@en }",
        "topic_entity": "http://dbpedia.org/resource/Eritrea",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Eritrea",
                "predicate": "http://dbpedia.org/ontology/leader",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 654,
        "question": "Which films did Stanley Kubrick direct?",
        "keywords": "film, Stanley Kubrick, direct",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
        "topic_entity": "http://dbpedia.org/resource/Stanley_Kubrick",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Stanley_Kubrick"
            }
        ],
        "constraints": []
    },
    {
        "id": 655,
        "question": "What is the highest mountain in Italy?",
        "keywords": "highest, mountain, Italy",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Italy",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/locatedInArea",
                "object": "http://dbpedia.org/resource/Italy"
            }
        ],
        "constraints": null
    },
    {
        "id": 656,
        "question": "How tall is Claudia Schiffer?",
        "keywords": "Claudia Schiffer, tall",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
        "topic_entity": "http://dbpedia.org/resource/Claudia_Schiffer",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Claudia_Schiffer",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?height"
            }
        ],
        "constraints": []
    },
    {
        "id": 657,
        "question": "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?",
        "keywords": "subsidiary, Lufthansa, serve, Dortmund, Berlin Tegel",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Lufthansa dbo:subsidiary ?uri . ?uri dbo:targetAirport res:Dortmund_Airport ; dbo:targetAirport res:Berlin_Tegel_Airport }",
        "topic_entity": "http://dbpedia.org/resource/Lufthansa",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Lufthansa",
                "predicate": "http://dbpedia.org/ontology/subsidiary",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Dortmund_Airport",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/targetAirport",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Berlin_Tegel_Airport",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/targetAirport",
                "ValueType": null
            }
        ]
    },
    {
        "id": 658,
        "question": "Who composed the soundtrack for Cameron's Titanic?",
        "keywords": "compose, soundtrack, Cameron's Titanic",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Titanic_(1997_film)> dbo:musicComposer ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Titanic_(1997_film)",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Titanic_(1997_film)",
                "predicate": "http://dbpedia.org/ontology/musicComposer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 659,
        "question": "Which movies did Kurosawa direct?",
        "keywords": "film, direct, Kurosawa",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Akira_Kurosawa }",
        "topic_entity": "http://dbpedia.org/resource/Akira_Kurosawa",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Akira_Kurosawa"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 660,
        "question": "In which time zone is Rome?",
        "keywords": "time zone, Rome",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rome dbo:timeZone ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Rome",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Rome",
                "predicate": "http://dbpedia.org/ontology/timeZone",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 661,
        "question": "Give me the currency of China.",
        "keywords": "currency, China",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
        "topic_entity": "http://dbpedia.org/resource/China",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/China",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 662,
        "question": "Who are the developers of DBpedia?",
        "keywords": "developers, DBpedia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:DBpedia dbo:developer ?uri }",
        "topic_entity": "http://dbpedia.org/resource/DBpedia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/DBpedia",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 663,
        "question": "Who is the king of the Netherlands?",
        "keywords": "king, the Netherlands",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Netherlands dbo:leader ?uri . ?uri rdf:type dbo:Royalty }",
        "topic_entity": "http://dbpedia.org/resource/Netherlands",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Netherlands",
                "predicate": "http://dbpedia.org/ontology/leader",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Royalty",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 664,
        "question": "In which city did Nikos Kazantzakis die?",
        "keywords": "city, Nikos Kazantzakis, die",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Nikos_Kazantzakis dbo:deathPlace ?uri . ?uri rdf:type dbo:Town }",
        "topic_entity": "http://dbpedia.org/resource/Nikos_Kazantzakis",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Nikos_Kazantzakis",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Town",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 665,
        "question": "Give me a list of all critically endangered birds.",
        "keywords": "list, critically endangered birds",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri ?p WHERE { ?uri rdf:type dbo:Bird { ?uri dbo:conservationStatus \"CR\" } UNION { ?uri dct:subject dbc:Critically_endangered_animals } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 666,
        "question": "Which book has the most pages?",
        "keywords": "book, the most pages",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:numberOfPages ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 667,
        "question": "Who is the Formula 1 race driver with the most races?",
        "keywords": "Formula 1, race driver, races, most",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer ; dbo:races ?x } ORDER BY DESC(?x) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 668,
        "question": "Which companies produce hovercrafts?",
        "keywords": "companies, produce, hovercrafts",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:product res:Hovercraft }",
        "topic_entity": "http://dbpedia.org/resource/Hovercraft",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/product",
                "object": "http://dbpedia.org/resource/Hovercraft"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Company",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 669,
        "question": "Did Elvis Presley have children?",
        "keywords": "Elvis Presley, children",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Elvis_Presley dbo:child ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 670,
        "question": "In which countries do people speak Japanese?",
        "keywords": "which countries, speak, Japanese",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:language res:Japanese_language }",
        "topic_entity": "http://dbpedia.org/resource/Japanese_language",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/language",
                "object": "http://dbpedia.org/resource/Japanese_language"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Country",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 671,
        "question": "Show me the book that Muhammad Ali wrote.",
        "keywords": "book, wrote, Muhammad Ali",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:author res:Muhammad_Ali }",
        "topic_entity": "http://dbpedia.org/resource/Muhammad_Ali",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/Muhammad_Ali"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 672,
        "question": "What was the first Queen album?",
        "keywords": "first album, Queen",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Queen_(band)",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/artist",
                "object": "http://dbpedia.org/resource/Queen_(band)"
            }
        ],
        "constraints": null
    },
    {
        "id": 673,
        "question": "Which television shows were created by Walt Disney?",
        "keywords": "television show, create, Walt Disney",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
        "topic_entity": "http://dbpedia.org/resource/Walt_Disney",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "http://dbpedia.org/resource/Walt_Disney"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/TelevisionShow",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 674,
        "question": "What is the bridge with the longest span?",
        "keywords": "bridge, longest span",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Bridge ; dbo:mainspan ?s } ORDER BY DESC(?s) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 675,
        "question": "What country is Sitecore from?",
        "keywords": "country, Sitecore",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Sitecore dbo:foundationPlace ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Sitecore",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Sitecore",
                "predicate": "http://dbpedia.org/ontology/foundationPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 676,
        "question": "Who was Vincent van Gogh inspired by?",
        "keywords": "person, inspiring, Vincent van Gogh",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:influenced res:Vincent_van_Gogh }",
        "topic_entity": "http://dbpedia.org/resource/Vincent_van_Gogh",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/influenced",
                "object": "http://dbpedia.org/resource/Vincent_van_Gogh"
            }
        ],
        "constraints": []
    },
    {
        "id": 677,
        "question": "Who wrote the Game of Thrones theme?",
        "keywords": "writer, Game of Thrones",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Game_of_Thrones",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Game_of_Thrones",
                "predicate": "http://dbpedia.org/ontology/composer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 678,
        "question": "Who designed the Brooklyn Bridge?",
        "keywords": "Brooklyn Bridge, design",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Brooklyn_Bridge",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Brooklyn_Bridge",
                "predicate": "http://dbpedia.org/ontology/architect",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 679,
        "question": "When did Boris Becker end his active career?",
        "keywords": "Boris Becker, end career",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { res:Boris_Becker dbo:activeYearsEndDate ?d }",
        "topic_entity": "http://dbpedia.org/resource/Boris_Becker",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Boris_Becker",
                "predicate": "http://dbpedia.org/ontology/activeYearsEndDate",
                "object": "?d"
            }
        ],
        "constraints": []
    },
    {
        "id": 680,
        "question": "Which types of grapes grow in Oregon?",
        "keywords": "grape types, grow, Oregon",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Oregon_wine dbo:growingGrape ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Oregon_wine",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Oregon_wine",
                "predicate": "http://dbpedia.org/ontology/growingGrape",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 681,
        "question": "To which party does the mayor of Paris belong?",
        "keywords": "party, mayor of Paris, belong",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?x . ?x dbo:party ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Paris",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Paris",
                "predicate": "http://dbpedia.org/ontology/mayor",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/party",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 682,
        "question": "Who was the doctoral supervisor of Albert Einstein?",
        "keywords": "doctoral supervisor, Albert Einstein",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Albert_Einstein",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Albert_Einstein",
                "predicate": "http://dbpedia.org/ontology/doctoralAdvisor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 683,
        "question": "In which city does Sylvester Stallone live?",
        "keywords": "city, live, Sylvester Stallone",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . res:Sylvester_Stallone dbo:residence ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Sylvester_Stallone",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Sylvester_Stallone",
                "predicate": "http://dbpedia.org/ontology/residence",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/City",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 684,
        "question": "Who is the son of Sonny and Cher?",
        "keywords": "son, Sonny and Cher",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:parent res:Cher ; dbo:parent res:Sonny_Bono }",
        "topic_entity": "http://dbpedia.org/resource/Cher",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/parent",
                "object": "http://dbpedia.org/resource/Cher"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Sonny_Bono",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/parent",
                "ValueType": null
            }
        ]
    },
    {
        "id": 685,
        "question": "In which city are the headquarters of the United Nations?",
        "keywords": "city, headquarters of the United Nations",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Headquarters_of_the_United_Nations dbo:location ?uri . ?uri rdf:type dbo:City }",
        "topic_entity": "http://dbpedia.org/resource/Headquarters_of_the_United_Nations",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Headquarters_of_the_United_Nations",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/City",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 686,
        "question": "When was Jack Wolfskin founded?",
        "keywords": "Jack Wolfskin, founded",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?year WHERE { res:Jack_Wolfskin dbo:foundingYear ?year }",
        "topic_entity": "http://dbpedia.org/resource/Jack_Wolfskin",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Jack_Wolfskin",
                "predicate": "http://dbpedia.org/ontology/foundingYear",
                "object": "?year"
            }
        ],
        "constraints": []
    },
    {
        "id": 687,
        "question": "Give me all Swedish oceanographers.",
        "keywords": "Swedish, oceanographer",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:field res:Oceanography ; dbo:birthPlace res:Sweden }",
        "topic_entity": "http://dbpedia.org/resource/Oceanography",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/field",
                "object": "http://dbpedia.org/resource/Oceanography"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Sweden",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/birthPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 688,
        "question": "Show me Hemingway's autobiography.",
        "keywords": "autobiography, Hemingway",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:author res:Ernest_Hemingway ; dbo:literaryGenre res:Autobiography }",
        "topic_entity": "http://dbpedia.org/resource/Ernest_Hemingway",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/Ernest_Hemingway"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Autobiography",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/literaryGenre",
                "ValueType": null
            }
        ]
    },
    {
        "id": 689,
        "question": "Who is the tallest basketball player?",
        "keywords": "tallest, basketball player",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:BasketballPlayer ; dbo:height ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 690,
        "question": "Which city has the least inhabitants?",
        "keywords": "city, the least inhabitants",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 691,
        "question": "Is Lake Baikal bigger than the Great Bear Lake?",
        "keywords": "Lake Baikal, bigger than, Great Bear Lake",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Lake_Baikal dbo:areaTotal ?a1 . res:Great_Bear_Lake dbo:areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 692,
        "question": "Did Kaurism\u00e4ki ever win the Grand Prix at Cannes?",
        "keywords": "Kaurism\u00e4ki, winner, Grand Prix at Cannes",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aki_Kaurism\u00e4ki dbo:award <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 693,
        "question": "Give me all books by William Goldman with more than 300 pages.",
        "keywords": "book, William Goldman, pages, more than 300",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:author res:William_Goldman ; dbo:numberOfPages ?x FILTER ( ?x > 300 ) }",
        "topic_entity": "http://dbpedia.org/resource/William_Goldman",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/William_Goldman"
            }
        ],
        "constraints": null
    },
    {
        "id": 694,
        "question": "Where is Syngman Rhee buried?",
        "keywords": "where, Syngman Rhee, buried",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Syngman_Rhee dbo:restingPlace ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Syngman_Rhee",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Syngman_Rhee",
                "predicate": "http://dbpedia.org/ontology/restingPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 695,
        "question": "What is the timezone in San Pedro de Atacama?",
        "keywords": "timezone, San Pedro de Atacama",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:San_Pedro_de_Atacama dbo:timeZone ?uri }",
        "topic_entity": "http://dbpedia.org/resource/San_Pedro_de_Atacama",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/San_Pedro_de_Atacama",
                "predicate": "http://dbpedia.org/ontology/timeZone",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 696,
        "question": "To which artistic movement did the painter of The Three Dancers belong?",
        "keywords": "artistic movement, painter, The Three Dancers",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
        "topic_entity": "http://dbpedia.org/resource/The_Three_Dancers",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Three_Dancers",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?person"
            },
            {
                "subject": "?person",
                "predicate": "http://dbpedia.org/ontology/movement",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 697,
        "question": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?",
        "keywords": "scientist, known for, Manhattan Project, Nobel Peace Prize",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri dbo:knownFor res:Manhattan_Project ; rdf:type dbo:Scientist ; dbo:knownFor res:Nobel_Peace_Prize }",
        "topic_entity": "http://dbpedia.org/resource/Manhattan_Project",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/knownFor",
                "object": "http://dbpedia.org/resource/Manhattan_Project"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Scientist",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Nobel_Peace_Prize",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/knownFor",
                "ValueType": null
            }
        ]
    },
    {
        "id": 698,
        "question": "Show me all books in Asimov's Foundation series.",
        "keywords": "books, Asimov, Foundation series",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:Foundation_series }",
        "topic_entity": "http://dbpedia.org/resource/Foundation_series",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/series",
                "object": "http://dbpedia.org/resource/Foundation_series"
            }
        ],
        "constraints": []
    },
    {
        "id": 699,
        "question": "Which museum in New York has the most visitors?",
        "keywords": "museum, New York, the most visitors",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Museum ; dbo:location res:New_York_City ; dbo:numberOfVisitors ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/New_York_City",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/New_York_City"
            }
        ],
        "constraints": null
    },
    {
        "id": 700,
        "question": "Who is the youngest Darts player?",
        "keywords": "Darts player, youngest",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:DartsPlayer ; dbo:birthDate ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 701,
        "question": "Who composed the music for Harold and Maude?",
        "keywords": "Harold and Maude, compose, music",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Harold_and_Maude dbo:musicComposer ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Harold_and_Maude",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Harold_and_Maude",
                "predicate": "http://dbpedia.org/ontology/musicComposer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 702,
        "question": "Who is starring in Spanish movies produced by Benicio del Toro?",
        "keywords": "starring, Spanish movies, produced, Benicio del Toro",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?film rdf:type dbo:Film ; dbo:country res:Spain ; dbo:producer res:Benicio_del_Toro ; dbo:starring ?uri . ?uri rdf:type dbo:Person }",
        "topic_entity": "http://dbpedia.org/resource/Spain",
        "core_inferential_chain": [
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Spain"
            },
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Benicio_del_Toro",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/producer",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Person",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 703,
        "question": "In which country is Mecca located?",
        "keywords": "country, located, Mecca",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Mecca",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mecca",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 704,
        "question": "How many languages are spoken in Colombia?",
        "keywords": "languages, Colombia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri rdf:type dbo:Language . res:Colombia dbo:language ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 705,
        "question": "What is the biggest stadium in Spain?",
        "keywords": "biggest stadium, Spain",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Stadium ; dbo:location res:Spain ; dbo:seatingCapacity ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Spain",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/Spain"
            }
        ],
        "constraints": null
    },
    {
        "id": 706,
        "question": "What are the five boroughs of New York?",
        "keywords": "five boroughs, New York",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:governmentType <http://dbpedia.org/resource/Borough_(New_York_City)> }",
        "topic_entity": "http://dbpedia.org/resource/Borough_(New_York_City)",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/governmentType",
                "object": "http://dbpedia.org/resource/Borough_(New_York_City)"
            }
        ],
        "constraints": []
    },
    {
        "id": 707,
        "question": "Where in France is sparkling wine produced?",
        "keywords": "produced, France, sparkling wine",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:wineProduced res:Sparkling_wine ; dbo:location res:France }",
        "topic_entity": "http://dbpedia.org/resource/Sparkling_wine",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/wineProduced",
                "object": "http://dbpedia.org/resource/Sparkling_wine"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/France",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/location",
                "ValueType": null
            }
        ]
    },
    {
        "id": 708,
        "question": "Are there any castles in the United States?",
        "keywords": "castles, United States",
        "sparql": "PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> ASK WHERE { ?uri dct:subject dbc:Castles_in_the_United_States }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 709,
        "question": "Can you find frescoes in Crete?",
        "keywords": "frescoes, Crete",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { ?uri dct:subject dbc:Minoan_frescos ; dbp:museum ?museum . ?museum dbo:location dbr:Crete }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 710,
        "question": "Do Urdu and Persian have a common root?",
        "keywords": "Urdu, Persian, common root",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Urdu dbo:languageFamily ?uri . dbr:Persian_language dbo:languageFamily ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 711,
        "question": "Does the Ford Motor Company have a manufacturing plant in Malaysia?",
        "keywords": "Ford Motor Company, manufacturing plant, Malaysia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { ?uri dbo:assembly dbr:Malaysia ; dbo:manufacturer dbr:Ford_Motor_Company }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 712,
        "question": "How many years was the Ford Model T manufactured?",
        "keywords": "years, Ford Model T, manufactured",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX res: <http://dbpedia.org/resource/> SELECT (( year(xsd:date(?end)) - year(xsd:date(?start)) ) AS ?years) WHERE { res:Ford_Model_T dbo:productionEndYear ?end ; dbo:productionStartYear ?start }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 713,
        "question": "Give me all gangsters from the prohibition era.",
        "keywords": "gangsters, prohibition era",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Gangster ; dct:subject dbc:Prohibition-era_gangsters }",
        "topic_entity": "http://dbpedia.org/resource/Gangster",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/occupation",
                "object": "http://dbpedia.org/resource/Gangster"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Category:Prohibition-era_gangsters",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://purl.org/dc/terms/subject",
                "ValueType": null
            }
        ]
    },
    {
        "id": 714,
        "question": "Give me all Seven Wonders of the Ancient World.",
        "keywords": "Seven Wonders of the Ancient World",
        "sparql": "PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT ?uri WHERE { ?uri dct:subject dbc:Seven_Wonders_of_the_Ancient_World }",
        "topic_entity": "http://dbpedia.org/resource/Category:Seven_Wonders_of_the_Ancient_World",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:Seven_Wonders_of_the_Ancient_World"
            }
        ],
        "constraints": []
    },
    {
        "id": 715,
        "question": "Give me all chemical elements.",
        "keywords": "chemical elements",
        "sparql": "PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX owl: <http://www.w3.org/2002/07/owl#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type owl:Thing ; dct:subject dbc:Chemical_elements }",
        "topic_entity": "http://dbpedia.org/resource/Category:Chemical_elements",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:Chemical_elements"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://www.w3.org/2002/07/owl#Thing",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 716,
        "question": "How many rivers and lakes are in South Carolina?",
        "keywords": "rivers, lakes, South Carolina",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?count) WHERE { { ?uri dbo:location dbr:South_Carolina ; rdf:type dbo:Lake } UNION { ?uri dct:subject dbc:Rivers_and_streams_of_South_Carolina } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 717,
        "question": "How many states are in Mexico?",
        "keywords": "states, Mexico",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { ?uri dbo:type dbr:States_of_Mexico }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 718,
        "question": "How many theories did Albert Einstein come up with?",
        "keywords": "theories, Albert Einstein, come up",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { dbr:Albert_Einstein dbo:knownFor ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 719,
        "question": "Is horse racing a sport?",
        "keywords": "horse racing, sport",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { dbr:Horse_racing rdf:type dbo:Sport }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 720,
        "question": "Is Pluto really a planet?",
        "keywords": "Pluto, planet",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { dbr:Pluto rdf:type dbo:Planet }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 721,
        "question": "Was Sigmund Freud married?",
        "keywords": "Sigmund Freud, married",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Sigmund_Freud dbo:spouse ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 722,
        "question": "What form of government is found in South Africa?",
        "keywords": "form, government, South Africa",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:South_Africa dbo:governmentType ?uri }",
        "topic_entity": "http://dbpedia.org/resource/South_Africa",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/South_Africa",
                "predicate": "http://dbpedia.org/ontology/governmentType",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 723,
        "question": "What is the largest state in the United States?",
        "keywords": "largest state, United States",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dct:subject dbc:States_of_the_United_States ; rdf:type dbo:AdministrativeRegion ; dbo:areaTotal ?area } ORDER BY DESC(?area) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Category:States_of_the_United_States",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:States_of_the_United_States"
            }
        ],
        "constraints": null
    },
    {
        "id": 724,
        "question": "What is the longest river in the world?",
        "keywords": "longest river, world",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:BodyOfWater ; dbo:length ?length } ORDER BY DESC(?length) LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 725,
        "question": "Which building after the Burj Khalifa has the most floors?",
        "keywords": "building, after, Burj Khalifa, most floors",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Burj_Khalifa dbo:floorCount ?burj . ?uri rdf:type dbo:Building ; dbo:floorCount ?proj FILTER ( ?proj < ?burj ) } ORDER BY DESC(?proj) LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 726,
        "question": "What is the wavelength of indigo?",
        "keywords": "wavelength, indigo",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?n WHERE { dbr:Indigo dbo:wavelength ?n }",
        "topic_entity": "http://dbpedia.org/resource/Indigo",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Indigo",
                "predicate": "http://dbpedia.org/ontology/wavelength",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 727,
        "question": "What was the name of the famous battle in 1836 in San Antonio?",
        "keywords": "famous battle, 1836, San Antonio",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri rdf:type dbo:MilitaryConflict ; dbo:place dbr:San_Antonio ; dbo:date ?date FILTER ( ?date > \"1835-12-31T00:00:00Z\"^^xsd:dateTime ) FILTER ( ?date <= \"1836-12-31T00:00:00Z\"^^xsd:dateTime ) }",
        "topic_entity": "http://dbpedia.org/resource/San_Antonio",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/place",
                "object": "http://dbpedia.org/resource/San_Antonio"
            }
        ],
        "constraints": null
    },
    {
        "id": 728,
        "question": "What were the names of the three ships used by Columbus?",
        "keywords": "three ships, used, Columbus",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Ship ; dct:subject dbc:Christopher_Columbus ; dct:subject dbc:Exploration_ships }",
        "topic_entity": "http://dbpedia.org/resource/Category:Christopher_Columbus",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:Christopher_Columbus"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Ship",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Category:Exploration_ships",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://purl.org/dc/terms/subject",
                "ValueType": null
            }
        ]
    },
    {
        "id": 729,
        "question": "When did Muhammad die?",
        "keywords": "Muhammad, die",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Muhammad dbo:deathDate ?date }",
        "topic_entity": "http://dbpedia.org/resource/Muhammad",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Muhammad",
                "predicate": "http://dbpedia.org/ontology/deathDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 730,
        "question": "When was the De Beers company founded?",
        "keywords": "De Beers company, founded",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:De_Beers dbo:foundingYear ?date }",
        "topic_entity": "http://dbpedia.org/resource/De_Beers",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/De_Beers",
                "predicate": "http://dbpedia.org/ontology/foundingYear",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 731,
        "question": "When was John Adams born?",
        "keywords": "John Adams, born",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
        "topic_entity": "http://dbpedia.org/resource/John_Adams",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_Adams",
                "predicate": "http://dbpedia.org/ontology/birthDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 732,
        "question": "Which American presidents were in office during the Vietnam War?",
        "keywords": "American presidents, office, Vietnam War",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT DISTINCT ?uri WHERE { res:Vietnam_War dbo:commander ?uri . ?uri dct:subject dbc:Presidents_of_the_United_States }",
        "topic_entity": "http://dbpedia.org/resource/Vietnam_War",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Vietnam_War",
                "predicate": "http://dbpedia.org/ontology/commander",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Category:Presidents_of_the_United_States",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://purl.org/dc/terms/subject",
                "ValueType": null
            }
        ]
    },
    {
        "id": 733,
        "question": "Which city has the oldest running metro?",
        "keywords": "city, oldest running metro",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?loc WHERE { ?uri dbo:type dbr:Rapid_transit ; dbo:openingYear ?date ; dbo:location ?loc . ?loc rdf:type dbo:City } ORDER BY ASC(?date) LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Rapid_transit",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/type",
                "object": "http://dbpedia.org/resource/Rapid_transit"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "?loc"
            }
        ],
        "constraints": null
    },
    {
        "id": 734,
        "question": "Which holidays are celebrated around the world?",
        "keywords": "holidays, celebrated, world",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 735,
        "question": "Who assassinated President McKinley?",
        "keywords": "assassinated, President McKinley",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Person ; dct:subject dbc:American_assassins ; dct:subject dbc:Assassination_of_William_McKinley }",
        "topic_entity": "http://dbpedia.org/resource/Category:American_assassins",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:American_assassins"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Person",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Category:Assassination_of_William_McKinley",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://purl.org/dc/terms/subject",
                "ValueType": null
            }
        ]
    },
    {
        "id": 736,
        "question": "Who discovered Pluto?",
        "keywords": "discovered, Pluto",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Pluto dbo:discoverer ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Pluto",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Pluto",
                "predicate": "http://dbpedia.org/ontology/discoverer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 737,
        "question": "Who killed Caesar?",
        "keywords": "killed, Caesar",
        "sparql": "PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT DISTINCT ?uri WHERE { ?uri dct:subject dbc:Assassins_of_Julius_Caesar }",
        "topic_entity": "http://dbpedia.org/resource/Category:Assassins_of_Julius_Caesar",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:Assassins_of_Julius_Caesar"
            }
        ],
        "constraints": []
    },
    {
        "id": 738,
        "question": "Who was buried in the Great Pyramid of Giza?",
        "keywords": "buried, Great Pyramid of Giza",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbo:restingPlace dbr:Great_Pyramid_of_Giza }",
        "topic_entity": "http://dbpedia.org/resource/Great_Pyramid_of_Giza",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/restingPlace",
                "object": "http://dbpedia.org/resource/Great_Pyramid_of_Giza"
            }
        ],
        "constraints": []
    },
    {
        "id": 739,
        "question": "Who was the first King of England?",
        "keywords": "first King of England",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Royalty ; rdf:type yago:WikicatEnglishMonarchs ; dbo:activeYearsStartYear ?date } ORDER BY ASC(?date) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 740,
        "question": "What was the final result of the War of the Roses?",
        "keywords": "result, War of Roses",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?result WHERE { ?uri dbo:isPartOfMilitaryConflict dbr:Wars_of_the_Roses ; dbo:result ?result ; dbo:date ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Wars_of_the_Roses",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/isPartOfMilitaryConflict",
                "object": "http://dbpedia.org/resource/Wars_of_the_Roses"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/result",
                "object": "?result"
            }
        ],
        "constraints": null
    },
    {
        "id": 741,
        "question": "Who writes the Farmers' Almanac?",
        "keywords": "writes, Farmers' Almanac",
        "sparql": "PREFIX dbp: <http://dbpedia.org/property/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Farmers'_Almanac> dbp:editor ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Farmers'_Almanac",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Farmers'_Almanac",
                "predicate": "http://dbpedia.org/property/editor",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 742,
        "question": "How big is the earth's diameter?",
        "keywords": "big, earth, diameter",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT (( xsd:double(?radius) * 2 ) AS ?diameter) WHERE { res:Earth dbo:meanRadius ?radius }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 743,
        "question": "How many people live in Eurasia?",
        "keywords": "people, Eurasia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
        "topic_entity": "http://dbpedia.org/resource/Eurasia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Eurasia",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?population"
            }
        ],
        "constraints": []
    },
    {
        "id": 744,
        "question": "Give me the runtime of Toy Story.",
        "keywords": "runtime, Toy Story",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
        "topic_entity": "http://dbpedia.org/resource/Toy_Story",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Toy_Story",
                "predicate": "http://dbpedia.org/ontology/runtime",
                "object": "?runtime"
            }
        ],
        "constraints": []
    },
    {
        "id": 745,
        "question": "What was the first name of the band Queens of the Stone Age?",
        "keywords": "first name, Queens of the Stone Age",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?name WHERE { res:Queens_of_the_Stone_Age dbo:alias ?name }",
        "topic_entity": "http://dbpedia.org/resource/Queens_of_the_Stone_Age",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Queens_of_the_Stone_Age",
                "predicate": "http://dbpedia.org/ontology/alias",
                "object": "?name"
            }
        ],
        "constraints": []
    },
    {
        "id": 746,
        "question": "Give me the birth place of Frank Sinatra.",
        "keywords": "birth place, Frank Sinatra",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
        "topic_entity": "http://dbpedia.org/resource/Frank_Sinatra",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Frank_Sinatra",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "?place"
            }
        ],
        "constraints": []
    },
    {
        "id": 747,
        "question": "Which university did Angela Merkel attend?",
        "keywords": "university, Angela Merkel",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
        "topic_entity": "http://dbpedia.org/resource/Angela_Merkel",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Angela_Merkel",
                "predicate": "http://dbpedia.org/ontology/almaMater",
                "object": "?university"
            }
        ],
        "constraints": []
    },
    {
        "id": 748,
        "question": "List all boardgames by GMT.",
        "keywords": "boardgame, GMT",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "topic_entity": "http://dbpedia.org/resource/GMT_Games",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/GMT_Games"
            }
        ],
        "constraints": []
    },
    {
        "id": 749,
        "question": "Who developed Skype?",
        "keywords": "develop, Skype",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "topic_entity": "http://dbpedia.org/resource/Skype",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Skype",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 750,
        "question": "Which people were born in Heraklion?",
        "keywords": "people, born, heraklion",
        "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "topic_entity": "http://dbpedia.org/resource/Heraklion",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Heraklion"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Person",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 751,
        "question": "In which U.S. state is Area 51 located?",
        "keywords": "Area 51, located, U.S. state",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "topic_entity": "http://dbpedia.org/resource/Area_51",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Area_51",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/United_States",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/country",
                "ValueType": null
            }
        ]
    },
    {
        "id": 752,
        "question": "Who is the mayor of New York City?",
        "keywords": "New York City, mayor",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "topic_entity": "http://dbpedia.org/resource/New_York_City",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/New_York_City",
                "predicate": "http://dbpedia.org/ontology/leaderName",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 753,
        "question": "Which countries have places with more than two caves?",
        "keywords": "country, place, cave, more than two",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 754,
        "question": "Where did Abraham Lincoln die?",
        "keywords": "Abraham Lincoln, die",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "topic_entity": "http://dbpedia.org/resource/Abraham_Lincoln",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Abraham_Lincoln",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 755,
        "question": "Which airports does Air China serve?",
        "keywords": "airports, Air China",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Air_China",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Air_China",
                "predicate": "http://dbpedia.org/ontology/targetAirport",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 756,
        "question": "Give me all actors starring in movies directed by and starring William Shatner.",
        "keywords": "actor, starring, movie, direct, starring, William Shatner",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 757,
        "question": "What are the official languages of the Philippines?",
        "keywords": "Philippines, official language",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Philippines",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Philippines",
                "predicate": "http://dbpedia.org/ontology/officialLanguage",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 758,
        "question": "Give me all Danish films.",
        "keywords": "film, Denmark",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "topic_entity": "http://dbpedia.org/resource/Denmark",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Denmark"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 759,
        "question": "Which movies starring Brad Pitt were directed by Guy Ritchie?",
        "keywords": "movies, starring, Brad Pitt, directed, Guy Ritchie",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "topic_entity": "http://dbpedia.org/resource/Brad_Pitt",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Brad_Pitt"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Guy_Ritchie",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/director",
                "ValueType": null
            }
        ]
    },
    {
        "id": 760,
        "question": "Give me the grandchildren of Bruce Lee.",
        "keywords": "Bruce Lee, grandchildren",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Bruce_Lee",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Bruce_Lee",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?child"
            },
            {
                "subject": "?child",
                "predicate": "http://dbpedia.org/property/children",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 761,
        "question": "Which other weapons did the designer of the Uzi develop?",
        "keywords": "Uzi, designer, develop, weapon",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "topic_entity": "http://dbpedia.org/resource/Uzi",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Uzi",
                "predicate": "http://dbpedia.org/property/designer",
                "object": "?x"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/designer",
                "object": "?x"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Weapon",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "NotEqual",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Uzi",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": null,
                "ValueType": null
            }
        ]
    },
    {
        "id": 762,
        "question": "Which state of the USA has the highest population density?",
        "keywords": "state, USA, population density, highest",
        "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 763,
        "question": "Which monarchs were married to a German?",
        "keywords": "monarch, married, German",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 764,
        "question": "Which organizations were founded in 1950?",
        "keywords": "organization, founded, 1950",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 765,
        "question": "Give me the Apollo 14 astronauts.",
        "keywords": "astronaut, Apollo 14",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "topic_entity": "http://dbpedia.org/resource/Apollo_14",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/mission",
                "object": "http://dbpedia.org/resource/Apollo_14"
            }
        ],
        "constraints": []
    },
    {
        "id": 766,
        "question": "Who wrote the book The pillars of the Earth?",
        "keywords": "wrote, book, The pillars of the Earth",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "topic_entity": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 767,
        "question": "Which state of the United States of America has the highest density?",
        "keywords": "state, united, states, america, highest, density",
        "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 768,
        "question": "Which spaceflights were launched from Baikonur?",
        "keywords": "spaceflight, launched, Baikonur",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "topic_entity": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/launchPad",
                "object": "http://dbpedia.org/resource/Baikonur_Cosmodrome"
            }
        ],
        "constraints": []
    },
    {
        "id": 769,
        "question": "Give me a list of all trumpet players that were bandleaders.",
        "keywords": "trumpet player, bandleader",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "topic_entity": "http://dbpedia.org/resource/Bandleader",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/occupation",
                "object": "http://dbpedia.org/resource/Bandleader"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Trumpet",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/instrument",
                "ValueType": null
            }
        ]
    },
    {
        "id": 770,
        "question": "Which U.S. states are in the same timezone as Utah?",
        "keywords": "U.S. state, same, timezone, Utah",
        "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "topic_entity": "http://dbpedia.org/resource/Utah",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Utah",
                "predicate": "http://dbpedia.org/property/timezone",
                "object": "?x"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/timezone",
                "object": "?x"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "NotEqual",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Utah",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": null,
                "ValueType": null
            }
        ]
    },
    {
        "id": 771,
        "question": "Which U.S. states possess gold minerals?",
        "keywords": "U.S. state, mineral, gold",
        "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 772,
        "question": "Who is the daughter of Ingrid Bergman married to?",
        "keywords": "Ingrid Bergman, daughter, married",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Ingrid_Bergman",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Ingrid_Bergman",
                "predicate": "http://dbpedia.org/ontology/child",
                "object": "?child"
            },
            {
                "subject": "?child",
                "predicate": "http://dbpedia.org/property/spouse",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 773,
        "question": "How deep is Lake Placid?",
        "keywords": "Lake Placid, depth",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "topic_entity": "http://dbpedia.org/resource/Lake_Placid_(Texas)",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Lake_Placid_(Texas)",
                "predicate": "http://dbpedia.org/ontology/maximumDepth",
                "object": "?n"
            }
        ],
        "constraints": []
    },
    {
        "id": 774,
        "question": "Show me all museums in London.",
        "keywords": "museums, London",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "topic_entity": "http://dbpedia.org/resource/London",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/London"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Museum",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 775,
        "question": "Which caves have more than 3 entrances?",
        "keywords": "cave, entrance, more than 3",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 776,
        "question": "Who is the tallest player of the Atlanta Falcons?",
        "keywords": "Atlanta Falcons, player, tallest",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Atlanta_Falcons",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/team",
                "object": "http://dbpedia.org/resource/Atlanta_Falcons"
            }
        ],
        "constraints": null
    },
    {
        "id": 777,
        "question": "What are the top-10 action role-playing video games according to IGN?",
        "keywords": "top-10, action, role-playing games, IGN",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "topic_entity": "http://dbpedia.org/resource/Category:Action_role-playing_video_games",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "http://dbpedia.org/resource/Category:Action_role-playing_video_games"
            }
        ],
        "constraints": null
    },
    {
        "id": 778,
        "question": "Give me all writers that won the Nobel Prize in literature.",
        "keywords": "writer, win, Nobel Prize in literature",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "topic_entity": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/award",
                "object": "http://dbpedia.org/resource/Nobel_Prize_in_Literature"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Writer",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 779,
        "question": "Show me all basketball players that are higher than 2 meters.",
        "keywords": "basketball players, higher than 2 meters",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 780,
        "question": "What movies does Jesse Eisenberg play in?",
        "keywords": "movies, Jesse Eisenberg",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "topic_entity": "http://dbpedia.org/resource/Jesse_Eisenberg",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Jesse_Eisenberg"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 781,
        "question": "Give all swimmers that were born in Moscow.",
        "keywords": "swimmer, born, Moscow",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "topic_entity": "http://dbpedia.org/resource/Moscow",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Moscow"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Swimmer",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 782,
        "question": "Give me all cosmonauts.",
        "keywords": "cosmonauts",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 783,
        "question": "Give me all Swiss non-profit organizations.",
        "keywords": "Swiss, non-profit organization",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "topic_entity": "http://dbpedia.org/resource/Nonprofit_organization",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/type",
                "object": "http://dbpedia.org/resource/Nonprofit_organization"
            }
        ],
        "constraints": []
    },
    {
        "id": 784,
        "question": "Which presidents were born in 1945?",
        "keywords": "president, born, 1945",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/President> ; <http://dbpedia.org/ontology/birthDate> ?date FILTER regex(?date, \"^1945\") }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 785,
        "question": "What kind of music did Lou Reed play?",
        "keywords": "kind of music, Lou Reed, play",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Lou_Reed",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Lou_Reed",
                "predicate": "http://dbpedia.org/ontology/genre",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 786,
        "question": "Where do the Red Sox play?",
        "keywords": "where, Red Sox, play",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boston_Red_Sox> <http://dbpedia.org/property/ballpark> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Boston_Red_Sox",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Boston_Red_Sox",
                "predicate": "http://dbpedia.org/property/ballpark",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 787,
        "question": "Show a list of soccer clubs that play in the Bundesliga.",
        "keywords": "soccer clubs, play, Bundesliga",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
        "topic_entity": "http://dbpedia.org/resource/Bundesliga",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/league",
                "object": "http://dbpedia.org/resource/Bundesliga"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/SoccerClub",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 788,
        "question": "Which volcanos in Japan erupted since 2000?",
        "keywords": "volcanos, Japan, erupted, since 2000",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> ; <http://dbpedia.org/ontology/eruptionYear> ?date FILTER ( year(?date) >= 2000 ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 789,
        "question": "Which bridges cross the Seine?",
        "keywords": "bridges, cross, Seine",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
        "topic_entity": "http://dbpedia.org/resource/Seine",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/crosses",
                "object": "http://dbpedia.org/resource/Seine"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Bridge",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 790,
        "question": "Give me all Danish movies.",
        "keywords": "movie, Denmark",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
        "topic_entity": "http://dbpedia.org/resource/Denmark",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Denmark"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 791,
        "question": "Who are the four youngest MVP basketball players?",
        "keywords": "four, youngest, MVP, basketball player",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/birthDate> ?date ; <http://dbpedia.org/property/highlights> ?h FILTER regex(?h, \"MVP\") } ORDER BY DESC(?date) OFFSET 0 LIMIT 4",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 792,
        "question": "Give me all companies in Munich.",
        "keywords": "company, Munich",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 793,
        "question": "Give me the capitals of all countries that the Himalayas run through.",
        "keywords": "countries Himalayas run through, capitals",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Himalayas",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Himalayas",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?country"
            },
            {
                "subject": "?country",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 794,
        "question": "How many movies did Park Chan-wook direct?",
        "keywords": "how many movies, directed, Park Chan-wook",
        "sparql": "SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Park_Chan-wook> . }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 795,
        "question": "Which rivers flow into a German lake?",
        "keywords": "rivers, flow, German lake",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> . ?x <http://dbpedia.org/ontology/inflow> ?uri ; a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> }",
        "topic_entity": "http://dbpedia.org/resource/Germany",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Germany"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/inflow",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Lake",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/River",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 796,
        "question": "How many airlines are there?",
        "keywords": "how many, airlines",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 797,
        "question": "Give me all islands that belong to Japan.",
        "keywords": "islands, Japan",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
        "topic_entity": "http://dbpedia.org/resource/Japan",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Japan"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Island",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 798,
        "question": "Which companies have more than 1 million employees?",
        "keywords": "company, more than 1 million, employees",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n } UNION { ?uri <http://dbpedia.org/property/numEmployees> ?n } FILTER ( ?n > 1000000 ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 799,
        "question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "keywords": "film, directed, Garry Marshall, starring, Julia Roberts",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
        "topic_entity": "http://dbpedia.org/resource/Julia_Roberts",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Julia_Roberts"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Garry_Marshall",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/director",
                "ValueType": null
            }
        ]
    },
    {
        "id": 800,
        "question": "Give me all soccer clubs in the Premier League.",
        "keywords": "Premier League, soccer club",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }",
        "topic_entity": "http://dbpedia.org/resource/Premier_League",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/league",
                "object": "http://dbpedia.org/resource/Premier_League"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/SoccerClub",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 801,
        "question": "Which movies star both Liz Taylor and Richard Burton?",
        "keywords": "movies, star, Liz Taylor, Richard Burton?",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
        "topic_entity": "http://dbpedia.org/resource/Elizabeth_Taylor",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Elizabeth_Taylor"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Richard_Burton",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/starring",
                "ValueType": null
            }
        ]
    },
    {
        "id": 802,
        "question": "Give me all ESA astronauts.",
        "keywords": "ESA astronauts",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/property/type> <http://dbpedia.org/resource/European_Space_Agency> }",
        "topic_entity": "http://dbpedia.org/resource/European_Space_Agency",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/type",
                "object": "http://dbpedia.org/resource/European_Space_Agency"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Astronaut",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 803,
        "question": "Who was president of Pakistan in 1978?",
        "keywords": "president, Pakistan, 1978",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> ; <http://dbpedia.org/property/years> 1978 }",
        "topic_entity": "http://dbpedia.org/resource/President_of_Pakistan",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/title",
                "object": "http://dbpedia.org/resource/President_of_Pakistan"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Value",
                "Argument": "1978",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/property/years",
                "ValueType": null
            }
        ]
    },
    {
        "id": 804,
        "question": "How many museums does Paris have?",
        "keywords": "how many, museum, Paris",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> }",
        "topic_entity": "http://dbpedia.org/resource/Paris",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/Paris"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Museum",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 805,
        "question": "Give me all federal chancellors of Germany.",
        "keywords": "Germany, federal chancellors",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/office> \"Chancellor of Germany\" } UNION { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 806,
        "question": "Show me everyone who was born on Halloween.",
        "keywords": "person, born on, Halloween",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/birthDate> ?date } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date } <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 807,
        "question": "Which beer originated in Ireland?",
        "keywords": "beer, originated, Ireland",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Beer> ; <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Beer_in_Ireland> }",
        "topic_entity": "http://dbpedia.org/resource/Beer",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/type",
                "object": "http://dbpedia.org/resource/Beer"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Beer_in_Ireland",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/origin",
                "ValueType": null
            }
        ]
    },
    {
        "id": 808,
        "question": "To which countries does the Himalayan mountain system extend?",
        "keywords": "Himalayan mountain system, extend, country",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Himalayas",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Himalayas",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 809,
        "question": "Which actors were born in Germany?",
        "keywords": "actor, born, Germany",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 810,
        "question": "Give me all actors who were born in Berlin.",
        "keywords": "actors, born, Berlin",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> }",
        "topic_entity": "http://dbpedia.org/resource/Berlin",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Berlin"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Actor",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 811,
        "question": "Which music albums contain the song Last Christmas?",
        "keywords": "music album, song, Last Christmas",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?single <http://dbpedia.org/ontology/album> ?uri ; <http://www.w3.org/2000/01/rdf-schema#label> \"Last Christmas\"@en }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 812,
        "question": "Give me all the TV shows with Neil Patrick Harris.",
        "keywords": "TV shows, Neil Patrick Harris",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
        "topic_entity": "http://dbpedia.org/resource/Neil_Patrick_Harris",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Neil_Patrick_Harris"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/TelevisionShow",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 813,
        "question": "Give me all Swedish holidays.",
        "keywords": "Swedish holidays",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
        "topic_entity": "http://dbpedia.org/resource/Sweden",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Sweden"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Holiday",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 814,
        "question": "In which city was the former Dutch queen Juliana buried?",
        "keywords": "Dutch queen Juliana, burried, city",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juliana_of_the_Netherlands> <http://dbpedia.org/property/burialPlace> ?uri . ?uri a <http://dbpedia.org/ontology/Settlement> }",
        "topic_entity": "http://dbpedia.org/resource/Juliana_of_the_Netherlands",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Juliana_of_the_Netherlands",
                "predicate": "http://dbpedia.org/property/burialPlace",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Settlement",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 815,
        "question": "List all the musicals with music by Leonard Bernstein.",
        "keywords": "musicals, music by, Leonard Bernstein",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Musical> ; <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> }",
        "topic_entity": "http://dbpedia.org/resource/Leonard_Bernstein",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/musicBy",
                "object": "http://dbpedia.org/resource/Leonard_Bernstein"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Musical",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 816,
        "question": "Give me all companies in the advertising industry.",
        "keywords": "company, advertising industry",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 817,
        "question": "Who killed John Lennon?",
        "keywords": "killed, John Lennon",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/property/conviction> <http://dbpedia.org/resource/Death_of_John_Lennon> }",
        "topic_entity": "http://dbpedia.org/resource/Death_of_John_Lennon",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/conviction",
                "object": "http://dbpedia.org/resource/Death_of_John_Lennon"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Person",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 818,
        "question": "Which writers studied in Istanbul?",
        "keywords": "writers, studied, Istanbul",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> { ?uri <http://dbpedia.org/ontology/almaMater> ?x } UNION { ?uri <http://dbpedia.org/ontology/education> ?x } { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Istanbul> } UNION { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Istanbul> } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 819,
        "question": "Give me all Australian metalcore bands.",
        "keywords": "Australian, metalcore bands",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Band> ; <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Metalcore> { ?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/hometown> ?h . ?h <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
        "topic_entity": "http://dbpedia.org/resource/Metalcore",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/genre",
                "object": "http://dbpedia.org/resource/Metalcore"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Band",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 820,
        "question": "Which countries adopted the Euro?",
        "keywords": "country, adopt, Euro",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> } UNION { ?uri <http://dbpedia.org/property/currencyCode> \"EUR\"@en } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 821,
        "question": "Give me all types of eating disorders.",
        "keywords": "types, eating disorders",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/class/yago/WikicatEatingDisorders> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 822,
        "question": "Was Marc Chagall a jew?",
        "keywords": "Marc Chagall, jew",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Marc_Chagall> <http://dbpedia.org/property/ethnicity> \"Jewish\"@en }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 823,
        "question": "How many films did Leonardo DiCaprio star in?",
        "keywords": "film, star, Leonardo DiCaprio",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 824,
        "question": "Which U.S. states are in the same time zone as Utah?",
        "keywords": "U.S. state, same, time zone, Utah",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Utah> <http://dbpedia.org/property/timezone> ?x . ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/timezone> ?x FILTER ( ?uri != <http://dbpedia.org/resource/Utah> ) }",
        "topic_entity": "http://dbpedia.org/resource/Utah",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Utah",
                "predicate": "http://dbpedia.org/property/timezone",
                "object": "?x"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/timezone",
                "object": "?x"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "NotEqual",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Utah",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": null,
                "ValueType": null
            }
        ]
    },
    {
        "id": 825,
        "question": "Give me all books written by Danielle Steel.",
        "keywords": "book, written, Danielle Steel",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Book> ; <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Danielle_Steel> }",
        "topic_entity": "http://dbpedia.org/resource/Danielle_Steel",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/Danielle_Steel"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Book",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 826,
        "question": "Which actor played Chewbacca?",
        "keywords": "actor, play, Chewbacca",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chewbacca> <http://dbpedia.org/ontology/portrayer> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Chewbacca",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Chewbacca",
                "predicate": "http://dbpedia.org/ontology/portrayer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 827,
        "question": "Give me all libraries established earlier than 1400.",
        "keywords": "libraries, established, earlier than 1400",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Library> ; <http://dbpedia.org/property/established> ?year FILTER ( ?year < 1400 ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 828,
        "question": "Which programming languages were influenced by Perl?",
        "keywords": "programming languages, influenced by, Perl",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> } UNION { <http://dbpedia.org/resource/Perl> <http://dbpedia.org/ontology/influenced> ?uri } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 829,
        "question": "In which U.S. state is Mount McKinley located?",
        "keywords": "U.S. state, located, Mount McKinley",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_McKinley> dbo:wikiPageRedirects ?x . ?x <http://dbpedia.org/ontology/locatedInArea> ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 830,
        "question": "What airlines are part of the SkyTeam alliance?",
        "keywords": "airlines, part of, SkyTeam alliance",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airline> { ?uri <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/SkyTeam> } UNION { ?uri <http://dbpedia.org/ontology/Alliance> <http://dbpedia.org/resource/SkyTeam> } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 831,
        "question": "Give me all Methodist politicians.",
        "keywords": "politician, Methodist",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Politician> ; <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Methodism> }",
        "topic_entity": "http://dbpedia.org/resource/Methodism",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/religion",
                "object": "http://dbpedia.org/resource/Methodism"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Politician",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 832,
        "question": "What other books have been written by the author of The Fault in Our Stars?",
        "keywords": "books, author, The Fault in Our Stars",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?books WHERE { ?books dbo:author <http://dbpedia.org/resource/John_Green_(author)> }",
        "topic_entity": "http://dbpedia.org/resource/John_Green_(author)",
        "core_inferential_chain": [
            {
                "subject": "?books",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "http://dbpedia.org/resource/John_Green_(author)"
            }
        ],
        "constraints": []
    },
    {
        "id": 833,
        "question": "What is the highest mountain?",
        "keywords": "mountain, highest",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 834,
        "question": "Which programming languages influenced Javascript?",
        "keywords": "programming languages, influenced, Javascript",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> ; <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/JavaScript> }",
        "topic_entity": "http://dbpedia.org/resource/JavaScript",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/influenced",
                "object": "http://dbpedia.org/resource/JavaScript"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/ProgrammingLanguage",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 835,
        "question": "Which films starring Clint Eastwood did he direct himself?",
        "keywords": "film, starring, direct, Clint Eastwood",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
        "topic_entity": "http://dbpedia.org/resource/Clint_Eastwood",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/director",
                "object": "http://dbpedia.org/resource/Clint_Eastwood"
            }
        ],
        "constraints": []
    },
    {
        "id": 836,
        "question": "Which software has been developed by organizations founded in California?",
        "keywords": "organization, founded, California, develop, software",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Software> . ?company a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/developer> ?company . ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/California> }",
        "topic_entity": "http://dbpedia.org/resource/California",
        "core_inferential_chain": [
            {
                "subject": "?company",
                "predicate": "http://dbpedia.org/ontology/foundationPlace",
                "object": "http://dbpedia.org/resource/California"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/developer",
                "object": "?company"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Company",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Software",
                "EntityName": null,
                "SourceNodeIndex": 1,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 837,
        "question": "How many airlines are members of the Star Alliance?",
        "keywords": "how many, airlines, member, Star Alliance",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> ; <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/Star_Alliance> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 838,
        "question": "Give me all actors called Baldwin.",
        "keywords": "actors, called, Baldwin",
        "sparql": "PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?uri WHERE { ?uri foaf:surname 'Baldwin'@en . { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Actor> . } UNION { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 839,
        "question": "Who wrote The Hunger Games?",
        "keywords": "wrote, Hunger Games",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Hunger_Games> <http://dbpedia.org/property/author> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/The_Hunger_Games",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Hunger_Games",
                "predicate": "http://dbpedia.org/property/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 840,
        "question": "For which label did Elvis record his first album?",
        "keywords": "Elvis, first, album, label",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Elvis_Presley",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/artist",
                "object": "http://dbpedia.org/resource/Elvis_Presley"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/recordLabel",
                "object": "?uri"
            }
        ],
        "constraints": null
    },
    {
        "id": 841,
        "question": "Which countries have more than two official languages?",
        "keywords": "country, official language, more than two",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> ; <http://dbpedia.org/ontology/officialLanguage> ?language } GROUP BY ?uri HAVING ( COUNT(?language) > 2 )",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 842,
        "question": "Which countries have more than ten caves?",
        "keywords": "country, cave, more than ten",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?cave a <http://dbpedia.org/ontology/Cave> { ?cave <http://dbpedia.org/ontology/location> ?uri } UNION { ?cave <http://dbpedia.org/ontology/location> ?loc . ?loc <http://dbpedia.org/ontology/country> ?uri } } GROUP BY ?uri HAVING ( COUNT(?cave) > 10 )",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 843,
        "question": "Which television shows were created by John Cleese?",
        "keywords": "television show, create, John Cleese",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
        "topic_entity": "http://dbpedia.org/resource/John_Cleese",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "http://dbpedia.org/resource/John_Cleese"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/TelevisionShow",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 844,
        "question": "Which soccer players were born on Malta?",
        "keywords": "soccer player, born on, Malta",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
        "topic_entity": "http://dbpedia.org/resource/Malta",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Malta"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/SoccerPlayer",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 845,
        "question": "How many politicians graduated from Columbia University?",
        "keywords": "how many, politicians, graduated, Columbia University",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> ; <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Columbia_University> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 846,
        "question": "Which telecommunications organizations are located in Belgium?",
        "keywords": "telecommunications organization, located, Belgium",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Telecommunication> } UNION { ?uri <http://dbpedia.org/property/industry> ?industry FILTER regex(?industry, \"Telecommunications\") } { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> } UNION { ?uri <http://dbpedia.org/property/locationCountry> \"Belgium\"@en } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 847,
        "question": "Give me a list of all lakes in Denmark.",
        "keywords": "lake, Denmark",
        "sparql": "SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> } UNION { ?uri a <http://dbpedia.org/class/yago/LakesOfDenmark> } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 848,
        "question": "Show me all English Gothic buildings in Kent.",
        "keywords": "English Gothic buildings, Kent",
        "sparql": "SELECT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Building> ; <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/English_Gothic_architecture> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Kent> }",
        "topic_entity": "http://dbpedia.org/resource/English_Gothic_architecture",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/architecturalStyle",
                "object": "http://dbpedia.org/resource/English_Gothic_architecture"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Building",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Kent",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/location",
                "ValueType": null
            }
        ]
    },
    {
        "id": 849,
        "question": "What is the longest river?",
        "keywords": "river, longest",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> { ?uri <http://dbpedia.org/ontology/length> ?l } UNION { ?uri <http://dbpedia.org/property/length> ?l } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 850,
        "question": "Which organizations were founded in 1930?",
        "keywords": "organization, founded, 1930",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/formationYear> ?date } UNION { ?uri <http://dbpedia.org/ontology/foundingYear> ?date } FILTER regex(?date, \"^1930\") }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 851,
        "question": "What is the birth name of Angela Merkel?",
        "keywords": "birth name, Angela Merkel",
        "sparql": "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/Angela_Merkel> <http://dbpedia.org/property/birthName> ?string }",
        "topic_entity": "http://dbpedia.org/resource/Angela_Merkel",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Angela_Merkel",
                "predicate": "http://dbpedia.org/property/birthName",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 852,
        "question": "Which weapons did Heckler & Koch develop?",
        "keywords": "Heckler & Koch, develop, weapon",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Weapon> ; <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Heckler_&_Koch> }",
        "topic_entity": "http://dbpedia.org/resource/Heckler_&_Koch",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/designer",
                "object": "http://dbpedia.org/resource/Heckler_&_Koch"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Weapon",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 853,
        "question": "What is the smallest city by area in Germany?",
        "keywords": "smallest, city, Germany",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX skos: <http://www.w3.org/2004/02/skos/core#> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT ?city WHERE { ?m skos:broader dbc:Cities_in_Germany . ?city dct:subject ?m ; dbo:areaTotal ?area } ORDER BY ?area LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Category:Cities_in_Germany",
        "core_inferential_chain": [
            {
                "subject": "?m",
                "predicate": "http://www.w3.org/2004/02/skos/core#broader",
                "object": "http://dbpedia.org/resource/Category:Cities_in_Germany"
            },
            {
                "subject": "?city",
                "predicate": "http://purl.org/dc/terms/subject",
                "object": "?m"
            }
        ],
        "constraints": null
    },
    {
        "id": 854,
        "question": "How heavy is Jupiter's lightest moon?",
        "keywords": "how heavy, Jupiter, moon, lightest",
        "sparql": "SELECT DISTINCT ?n WHERE { ?uri <http://dbpedia.org/property/satelliteOf> <http://dbpedia.org/resource/Jupiter> ; <http://dbpedia.org/ontology/mass> ?n } ORDER BY ASC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Jupiter",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/property/satelliteOf",
                "object": "http://dbpedia.org/resource/Jupiter"
            },
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/mass",
                "object": "?n"
            }
        ],
        "constraints": [
            {
                "type": "order_limit_offset",
                "ValueType": "String",
                "SourceNodeIndex": null,
                "NodePredicate": null,
                "SortOrder": "Ascending",
                "Start": 0,
                "Count": 1
            }
        ]
    },
    {
        "id": 855,
        "question": "List all episodes of the first season of the HBO television series The Sopranos!",
        "keywords": "HBO, television series, Sopranos, first season, episode",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }",
        "topic_entity": "http://dbpedia.org/resource/The_Sopranos",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/series",
                "object": "http://dbpedia.org/resource/The_Sopranos"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Value",
                "Argument": "1",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/seasonNumber",
                "ValueType": null
            }
        ]
    },
    {
        "id": 856,
        "question": "What does ICRO stand for?",
        "keywords": "ICRO, stand for",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/abbreviation> \"ICRO\" }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 857,
        "question": "Give me all films produced by Hal Roach.",
        "keywords": "film, produce, Hal Roach",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
        "topic_entity": "http://dbpedia.org/resource/Hal_Roach",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/producer",
                "object": "http://dbpedia.org/resource/Hal_Roach"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 858,
        "question": "Who played Agent Smith in Matrix?",
        "keywords": "played, Agent Smith, Matrix",
        "sparql": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Agent_Smith <http://dbpedia.org/ontology/portrayer> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Agent_Smith",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Agent_Smith",
                "predicate": "http://dbpedia.org/ontology/portrayer",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 859,
        "question": "Which Greek parties are pro-European?",
        "keywords": "Greek party, pro-European",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
        "topic_entity": "http://dbpedia.org/resource/Greece",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "http://dbpedia.org/resource/Greece"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/PoliticalParty",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            },
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Pro-Europeanism",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/ideology",
                "ValueType": null
            }
        ]
    },
    {
        "id": 860,
        "question": "Give me a list of all bandleaders that play trumpet.",
        "keywords": "bandleader, play, trumpet",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
        "topic_entity": "http://dbpedia.org/resource/Bandleader",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/occupation",
                "object": "http://dbpedia.org/resource/Bandleader"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Trumpet",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/instrument",
                "ValueType": null
            }
        ]
    },
    {
        "id": 861,
        "question": "What is the second highest mountain on Earth?",
        "keywords": "mountain, second highest",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 862,
        "question": "Is Egypts largest city also its capital?",
        "keywords": "largest city, Egypt, capital",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Egypt> <http://dbpedia.org/ontology/largestCity> ?large ; <http://dbpedia.org/ontology/capital> ?capital FILTER ( ?large = ?capital ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 863,
        "question": "Which rockets were launched from Baikonur?",
        "keywords": "rockets, launched, Baikonur",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
        "topic_entity": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/launchSite",
                "object": "http://dbpedia.org/resource/Baikonur_Cosmodrome"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Rocket",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 864,
        "question": "How many programming languages are there?",
        "keywords": "how many, programming languages",
        "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 865,
        "question": "Which Chess players died in the same place they were born in?",
        "keywords": "chess players, British earl, die, same, place, born",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ChessPlayer> ; <http://dbpedia.org/ontology/birthPlace> ?x ; <http://dbpedia.org/ontology/deathPlace> ?y FILTER ( ?x = ?y ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 866,
        "question": "Give me all movies with Tom Cruise.",
        "keywords": "movie, Tom Cruise",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
        "topic_entity": "http://dbpedia.org/resource/Tom_Cruise",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Tom_Cruise"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 867,
        "question": "In which U.S. state is Fort Knox located?",
        "keywords": "Fort Knox, located, U.S. state",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Fort_Knox dbo:location ?uri . ?uri dbo:country res:United_States }",
        "topic_entity": "http://dbpedia.org/resource/Fort_Knox",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Fort_Knox",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/United_States",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/country",
                "ValueType": null
            }
        ]
    },
    {
        "id": 868,
        "question": "Give me all cities in New Jersey with more than 100000 inhabitants.",
        "keywords": "New Jersey, city, inhabitants, more than 100000",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:isPartOf res:New_Jersey ; dbo:populationTotal ?inhabitants FILTER ( ?inhabitants > 100000 ) }",
        "topic_entity": "http://dbpedia.org/resource/New_Jersey",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/isPartOf",
                "object": "http://dbpedia.org/resource/New_Jersey"
            }
        ],
        "constraints": null
    },
    {
        "id": 869,
        "question": "Which mountains are higher than the Nanga Parbat?",
        "keywords": "mountain, higher, Nanga Parbat",
        "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nanga_Parbat> <http://dbpedia.org/ontology/elevation> ?elevation . ?uri a <http://dbpedia.org/ontology/Mountain> { ?uri <http://dbpedia.org/ontology/elevation> ?otherelevation } UNION { ?uri <http://dbpedia.org/property/elevationM> ?otherelevation } FILTER ( ?otherelevation > ?elevation ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 870,
        "question": "Give me all B-sides of the Ramones.",
        "keywords": "Ramones, B-sides",
        "sparql": "SELECT DISTINCT ?string WHERE { ?x <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Ramones> ; <http://dbpedia.org/ontology/bSide> ?string }",
        "topic_entity": "http://dbpedia.org/resource/Ramones",
        "core_inferential_chain": [
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/musicalArtist",
                "object": "http://dbpedia.org/resource/Ramones"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/bSide",
                "object": "?string"
            }
        ],
        "constraints": []
    },
    {
        "id": 871,
        "question": "Give me all people that were born in Vienna and died in Berlin.",
        "keywords": "people, born, Vienna, die, Berlin",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
        "topic_entity": "http://dbpedia.org/resource/Vienna",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "http://dbpedia.org/resource/Vienna"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Berlin",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/deathPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 872,
        "question": "Is Darth Vader Luke\u2019s father?",
        "keywords": "Darth Vader, father, Luke",
        "sparql": "ASK WHERE { <http://dbpedia.org/resource/Darth_Vader> <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Luke_Skywalker> }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 873,
        "question": "Show me all the breweries in Australia.",
        "keywords": "breweries, Australia",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Brewery> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 874,
        "question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.",
        "keywords": "films, producer, Steven Spielberg, production budget, $80 million",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Steven_Spielberg> . ?uri <http://dbpedia.org/ontology/budget> ?b . FILTER( xsd:double(?b) >= 8.0E7 ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 875,
        "question": "Give me all soccer clubs in Spain.",
        "keywords": "Spain, soccer club",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> { ?uri <http://dbpedia.org/ontology/ground> <http://dbpedia.org/resource/Spain> } UNION { ?uri <http://dbpedia.org/property/ground> ?ground FILTER regex(?ground, \"Spain\") } }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 876,
        "question": "Who produced films starring Natalie Portman?",
        "keywords": "produce, film, starring, Natalie Portman",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?film a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Natalie_Portman> ; <http://dbpedia.org/ontology/producer> ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Natalie_Portman",
        "core_inferential_chain": [
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/starring",
                "object": "http://dbpedia.org/resource/Natalie_Portman"
            },
            {
                "subject": "?film",
                "predicate": "http://dbpedia.org/ontology/producer",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Film",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 877,
        "question": "Who is the heaviest player of the Chicago Bulls?",
        "keywords": "heaviest player, Chicago Bulls",
        "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/weight> ?num { ?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 878,
        "question": "What is the largest country in the world?",
        "keywords": "largest country, world",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 879,
        "question": "What is the largest city in america?",
        "keywords": "largest, city, america",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?lcity WHERE { dbr:United_States dbo:largestCity ?lcity }",
        "topic_entity": "http://dbpedia.org/resource/United_States",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/United_States",
                "predicate": "http://dbpedia.org/ontology/largestCity",
                "object": "?lcity"
            }
        ],
        "constraints": []
    },
    {
        "id": 880,
        "question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "keywords": "Angela Merkel",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
        "topic_entity": "http://dbpedia.org/resource/Angela_Merkel",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Angela_Merkel",
                "predicate": "http://dbpedia.org/ontology/almaMater",
                "object": "?Almamater"
            }
        ],
        "constraints": []
    },
    {
        "id": 881,
        "question": "Where is the birthplace of Goethe?",
        "keywords": "Goethe",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Goethe WHERE { dbr:Johann_Wolfgang_von_Goethe dbo:birthPlace ?Goethe }",
        "topic_entity": "http://dbpedia.org/resource/Johann_Wolfgang_von_Goethe",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Johann_Wolfgang_von_Goethe",
                "predicate": "http://dbpedia.org/ontology/birthPlace",
                "object": "?Goethe"
            }
        ],
        "constraints": []
    },
    {
        "id": 882,
        "question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?",
        "keywords": "Cuban Missile Crisis, earlier, Bay of Pigs Invasion",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Cuban_Missile_Crisis dbo:date ?x . res:Bay_of_Pigs_Invasion dbo:date ?y FILTER ( ?x < ?y ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 883,
        "question": "Who created Wikipedia?",
        "keywords": "Wikipedia, created",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Wikipedia dbo:author ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Wikipedia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Wikipedia",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 884,
        "question": "What is the highest mountain in Saxony Germany?",
        "keywords": "highest, mountain, Saxony, Germany",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?m WHERE { ?m dbo:mountainRange dbr:Ore_Mountains ; dbo:elevation ?height } ORDER BY DESC(?height) LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Ore_Mountains",
        "core_inferential_chain": [
            {
                "subject": "?m",
                "predicate": "http://dbpedia.org/ontology/mountainRange",
                "object": "http://dbpedia.org/resource/Ore_Mountains"
            }
        ],
        "constraints": null
    },
    {
        "id": 885,
        "question": "Who is the current federal minister of finance in Germany?",
        "keywords": "federal minister of finance, germany",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?leader WHERE { <http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)> dbo:leader ?leader }",
        "topic_entity": "http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)",
                "predicate": "http://dbpedia.org/ontology/leader",
                "object": "?leader"
            }
        ],
        "constraints": []
    },
    {
        "id": 886,
        "question": "In which country does the Nile start?",
        "keywords": "Nile, start, country",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Nile",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Nile",
                "predicate": "http://dbpedia.org/ontology/sourceCountry",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 887,
        "question": "In which state Penn State University is located?",
        "keywords": "Penn State University",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { dbr:Pennsylvania_State_University dbo:state ?s }",
        "topic_entity": "http://dbpedia.org/resource/Pennsylvania_State_University",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Pennsylvania_State_University",
                "predicate": "http://dbpedia.org/ontology/state",
                "object": "?s"
            }
        ],
        "constraints": []
    },
    {
        "id": 888,
        "question": "What is the biggest stadium in Spain?",
        "keywords": "biggest stadium, Spain",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Stadium ; dbo:location res:Spain ; dbo:seatingCapacity ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/Spain",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/location",
                "object": "http://dbpedia.org/resource/Spain"
            }
        ],
        "constraints": null
    },
    {
        "id": 889,
        "question": "How large is the area of UK?",
        "keywords": "area, UK",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?area WHERE { dbr:United_Kingdom dbo:areaTotal ?area }",
        "topic_entity": "http://dbpedia.org/resource/United_Kingdom",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/United_Kingdom",
                "predicate": "http://dbpedia.org/ontology/areaTotal",
                "object": "?area"
            }
        ],
        "constraints": []
    },
    {
        "id": 890,
        "question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "keywords": "D\u00fcsseldorf Airport",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                "predicate": "http://dbpedia.org/ontology/elevation",
                "object": "?ele"
            }
        ],
        "constraints": []
    },
    {
        "id": 891,
        "question": "How much is the population of mexico city ?",
        "keywords": "mexico city",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
        "topic_entity": "http://dbpedia.org/resource/Mexico_City",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Mexico_City",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?Mexico_City"
            }
        ],
        "constraints": []
    },
    {
        "id": 892,
        "question": "when was the founding date of french fifth republic?",
        "keywords": "french fifth republic",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ff WHERE { dbr:French_Fifth_Republic dbo:foundingDate ?ff }",
        "topic_entity": "http://dbpedia.org/resource/French_Fifth_Republic",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/French_Fifth_Republic",
                "predicate": "http://dbpedia.org/ontology/foundingDate",
                "object": "?ff"
            }
        ],
        "constraints": []
    },
    {
        "id": 893,
        "question": "Which river does the Brooklyn Bridge cross?",
        "keywords": "river, cross, Brooklyn Bridge",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Brooklyn_Bridge",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Brooklyn_Bridge",
                "predicate": "http://dbpedia.org/ontology/crosses",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 894,
        "question": "When was the last episode of the TV series Friends aired?",
        "keywords": "last episode, Friends Tv show",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?date WHERE { dbr:Friends dbo:completionDate ?date }",
        "topic_entity": "http://dbpedia.org/resource/Friends",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Friends",
                "predicate": "http://dbpedia.org/ontology/completionDate",
                "object": "?date"
            }
        ],
        "constraints": []
    },
    {
        "id": 895,
        "question": "Who is 8th president of US?",
        "keywords": "8th President, USA",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbr:8th_President_of_the_United_States dbo:wikiPageRedirects ?link . ?link dbp:name ?name }",
        "topic_entity": "http://dbpedia.org/resource/8th_President_of_the_United_States",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/8th_President_of_the_United_States",
                "predicate": "http://dbpedia.org/ontology/wikiPageRedirects",
                "object": "?link"
            },
            {
                "subject": "?link",
                "predicate": "http://dbpedia.org/property/name",
                "object": "?name"
            }
        ],
        "constraints": []
    },
    {
        "id": 896,
        "question": "how much is the total population of  european union?",
        "keywords": "european union",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
        "topic_entity": "http://dbpedia.org/resource/European_Union",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/European_Union",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?europop"
            }
        ],
        "constraints": []
    },
    {
        "id": 897,
        "question": "What is the birth name of Adele?",
        "keywords": "Adele",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
        "topic_entity": "http://dbpedia.org/resource/Adele",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Adele",
                "predicate": "http://dbpedia.org/ontology/birthName",
                "object": "?bn"
            }
        ],
        "constraints": []
    },
    {
        "id": 898,
        "question": "What is the population of Cairo?",
        "keywords": "population, Cairo",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
        "topic_entity": "http://dbpedia.org/resource/Cairo",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Cairo",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?pop"
            }
        ],
        "constraints": []
    },
    {
        "id": 899,
        "question": "Is Frank Herbert still alive?",
        "keywords": "Frank Herbert, alive",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { OPTIONAL { res:Frank_Herbert dbo:deathDate ?date } FILTER ( ! bound(?date) ) }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 900,
        "question": "What is the last work of Dan Brown?",
        "keywords": "last work, Dan Brown",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?book WHERE { { ?book dbo:author dbr:Dan_Brown . ?book dbp:releaseDate ?date } UNION { ?book dbo:author dbr:Dan_Brown . ?book dbo:publicationDate ?date} } ORDER BY DESC(xsd:date(?date)) LIMIT 1",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 901,
        "question": "Where is Sungkyunkwan University?",
        "keywords": "Sungkyunkwan, University",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbr:Sungkyunkwan_University dbo:city ?city ; dbo:country ?country }",
        "topic_entity": "http://dbpedia.org/resource/Sungkyunkwan_University",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Sungkyunkwan_University",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?country"
            }
        ],
        "constraints": []
    },
    {
        "id": 902,
        "question": "Who is the author of the interpretation of dreams?",
        "keywords": "Interpretation of Dreams, Author",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
        "topic_entity": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                "predicate": "http://dbpedia.org/ontology/author",
                "object": "?Author"
            }
        ],
        "constraints": []
    },
    {
        "id": 903,
        "question": "When was the death  of  Shakespeare?",
        "keywords": "Shakespeare",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/William_Shakespeare",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/William_Shakespeare",
                "predicate": "http://dbpedia.org/ontology/deathDate",
                "object": "?x"
            }
        ],
        "constraints": []
    },
    {
        "id": 904,
        "question": "Who developed Slack?",
        "keywords": "developer, Slack",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:product <http://dbpedia.org/resource/Slack_(software)> }",
        "topic_entity": "http://dbpedia.org/resource/Slack_(software)",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/product",
                "object": "http://dbpedia.org/resource/Slack_(software)"
            }
        ],
        "constraints": []
    },
    {
        "id": 905,
        "question": "Where is the origin of Carolina reaper?",
        "keywords": "Carolina reaper",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Carolina_Reaper dbo:origin ?uri}",
        "topic_entity": "http://dbpedia.org/resource/Carolina_Reaper",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Carolina_Reaper",
                "predicate": "http://dbpedia.org/ontology/origin",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 906,
        "question": "In which programming language is GIMP written?",
        "keywords": "GIMP, programming language",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:GIMP dbo:programmingLanguage ?uri }",
        "topic_entity": "http://dbpedia.org/resource/GIMP",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/GIMP",
                "predicate": "http://dbpedia.org/ontology/programmingLanguage",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 907,
        "question": "Who was the wife of U.S. president Lincoln?",
        "keywords": "U.S. president, Lincoln, wife",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:spouse ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Abraham_Lincoln",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Abraham_Lincoln",
                "predicate": "http://dbpedia.org/ontology/spouse",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 908,
        "question": "Which species does an elephant belong?",
        "keywords": "species, elephant",
        "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?species WHERE { dbr:Elephant dbp:species ?species }",
        "topic_entity": "http://dbpedia.org/resource/Elephant",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Elephant",
                "predicate": "http://dbpedia.org/property/species",
                "object": "?species"
            }
        ],
        "constraints": []
    },
    {
        "id": 909,
        "question": "With how many countries Iran has borders?",
        "keywords": "Iran, borders",
        "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?border WHERE { dbr:Geography_of_Iran dbp:borders ?border } LIMIT 8",
        "topic_entity": "http://dbpedia.org/resource/Geography_of_Iran",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Geography_of_Iran",
                "predicate": "http://dbpedia.org/property/borders",
                "object": "?border"
            }
        ],
        "constraints": []
    },
    {
        "id": 910,
        "question": "Which country does the creator of Miffy come from?",
        "keywords": "Miffy, creator, country",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Miffy dbo:creator ?x . ?x dbo:nationality ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Miffy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Miffy",
                "predicate": "http://dbpedia.org/ontology/creator",
                "object": "?x"
            },
            {
                "subject": "?x",
                "predicate": "http://dbpedia.org/ontology/nationality",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 911,
        "question": "how big is the total area of North Rhine- Westphalia?",
        "keywords": "Nord Rhine Westphalia",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
        "topic_entity": "http://dbpedia.org/resource/North_Rhine-Westphalia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                "predicate": "http://dbpedia.org/ontology/areaTotal",
                "object": "?tarea"
            }
        ],
        "constraints": []
    },
    {
        "id": 912,
        "question": "What is Donald Trump's main business?",
        "keywords": "Donald Trump's, business",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
        "topic_entity": "http://dbpedia.org/resource/Donald_Trump",
        "core_inferential_chain": [
            {
                "subject": "?owner",
                "predicate": "http://dbpedia.org/ontology/owner",
                "object": "http://dbpedia.org/resource/Donald_Trump"
            }
        ],
        "constraints": []
    },
    {
        "id": 913,
        "question": "When will start the final match of the football world cup 2018?",
        "keywords": "football world cup 2018",
        "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1",
        "topic_entity": "http://dbpedia.org/resource/2018_FIFA_World_Cup",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/2018_FIFA_World_Cup",
                "predicate": "http://dbpedia.org/property/date",
                "object": "?Date"
            }
        ],
        "constraints": [
            {
                "type": "order_limit_offset",
                "ValueType": "String",
                "SourceNodeIndex": null,
                "NodePredicate": null,
                "SortOrder": "Descending",
                "Start": 0,
                "Count": 1
            }
        ]
    },
    {
        "id": 914,
        "question": "how much is the population  Iraq?",
        "keywords": "Iraq",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
        "topic_entity": "http://dbpedia.org/resource/Iraq",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Iraq",
                "predicate": "http://dbpedia.org/ontology/populationTotal",
                "object": "?pIraq"
            }
        ],
        "constraints": []
    },
    {
        "id": 915,
        "question": "how much is the population densty rank of germany?",
        "keywords": "Germany",
        "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?rank WHERE { dbr:Germany dbp:populationDensityRank ?rank }",
        "topic_entity": "http://dbpedia.org/resource/Germany",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Germany",
                "predicate": "http://dbpedia.org/property/populationDensityRank",
                "object": "?rank"
            }
        ],
        "constraints": []
    },
    {
        "id": 916,
        "question": "List all games by GMT.",
        "keywords": "game, GMT",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "topic_entity": "http://dbpedia.org/resource/GMT_Games",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/publisher",
                "object": "http://dbpedia.org/resource/GMT_Games"
            }
        ],
        "constraints": []
    },
    {
        "id": 917,
        "question": "In which country is the Limerick Lake?",
        "keywords": "Limerick Lake, country",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Limerick_Lake",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Limerick_Lake",
                "predicate": "http://dbpedia.org/ontology/country",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 918,
        "question": "Who are the writers of the Wall album of Pink Floyd?",
        "keywords": "the wall, pink floyd",
        "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?writers WHERE { dbr:The_Wall dbp:writer ?writers }",
        "topic_entity": "http://dbpedia.org/resource/The_Wall",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/The_Wall",
                "predicate": "http://dbpedia.org/property/writer",
                "object": "?writers"
            }
        ],
        "constraints": []
    },
    {
        "id": 919,
        "question": "What is the largest city in Australia?",
        "keywords": "Australia, largest city",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Australia dbo:largestCity ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Australia",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Australia",
                "predicate": "http://dbpedia.org/ontology/largestCity",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 920,
        "question": "Which holidays are celebrated around the world? test2",
        "keywords": "holidays, celebrated, world",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 921,
        "question": "Was U.S. president Jackson involved in a war?",
        "keywords": "U.S. president, Jackson, war",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Andrew_Jackson dbo:battle ?battle }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 922,
        "question": "Did Tesla win a nobel prize in physics?",
        "keywords": "Tesla, nobel prize, physics",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 923,
        "question": "Do Urdu and Persian have a common root?",
        "keywords": "Urdu, Persian, common root",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Urdu dbo:languageFamily ?uri . dbr:Persian_language dbo:languageFamily ?uri }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 924,
        "question": "Did Socrates influence Aristotle?",
        "keywords": "Socrates, influence, Aristotle",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aristotle dbo:influencedBy res:Socrates }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 925,
        "question": "How tall is Michael Jordan?",
        "keywords": "tall, Michael Jordan",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
        "topic_entity": "http://dbpedia.org/resource/Michael_Jordan",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Michael_Jordan",
                "predicate": "http://dbpedia.org/ontology/height",
                "object": "?num"
            }
        ],
        "constraints": []
    },
    {
        "id": 926,
        "question": "Is Michelle Obama the wife of Barack Obama?",
        "keywords": "Michelle Obama, wife, Barack Obama",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:spouse res:Michelle_Obama }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 927,
        "question": "What is the capital of Canada?",
        "keywords": "capital, Canada",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Canada",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Canada",
                "predicate": "http://dbpedia.org/ontology/capital",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 928,
        "question": "What is the currency of the Czech Republic?",
        "keywords": "Czech republic, currency",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
        "topic_entity": "http://dbpedia.org/resource/Czech_Republic",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/Czech_Republic",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 929,
        "question": "In which city did John F. Kennedy die?",
        "keywords": "city, John F. Kennedy, die",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:deathPlace ?uri . ?uri rdf:type dbo:City }",
        "topic_entity": "http://dbpedia.org/resource/John_F._Kennedy",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/John_F._Kennedy",
                "predicate": "http://dbpedia.org/ontology/deathPlace",
                "object": "?uri"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/City",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    },
    {
        "id": 930,
        "question": "Give me the currency of China.",
        "keywords": "currency, China",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
        "topic_entity": "http://dbpedia.org/resource/China",
        "core_inferential_chain": [
            {
                "subject": "http://dbpedia.org/resource/China",
                "predicate": "http://dbpedia.org/ontology/currency",
                "object": "?uri"
            }
        ],
        "constraints": []
    },
    {
        "id": 931,
        "question": "Give me all Swedish oceanographers.",
        "keywords": "Swedish, oceanographer",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:field res:Oceanography ; dbo:birthPlace res:Sweden }",
        "topic_entity": "http://dbpedia.org/resource/Oceanography",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/field",
                "object": "http://dbpedia.org/resource/Oceanography"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/resource/Sweden",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://dbpedia.org/ontology/birthPlace",
                "ValueType": null
            }
        ]
    },
    {
        "id": 932,
        "question": "Is Rita Wilson the wife of Tom Hanks?",
        "keywords": "Rita Wilson, wife, Tom Hanks",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Tom_Hanks dbo:spouse res:Rita_Wilson }",
        "topic_entity": null,
        "core_inferential_chain": null,
        "constraints": null
    },
    {
        "id": 933,
        "question": "In which countries do people speak Japanese?",
        "keywords": "which countries, speak, Japanese",
        "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:language res:Japanese_language }",
        "topic_entity": "http://dbpedia.org/resource/Japanese_language",
        "core_inferential_chain": [
            {
                "subject": "?uri",
                "predicate": "http://dbpedia.org/ontology/language",
                "object": "http://dbpedia.org/resource/Japanese_language"
            }
        ],
        "constraints": [
            {
                "type": "constraints",
                "Operator": "Equal",
                "Direction": "out",
                "ArgumentType": "Entity",
                "Argument": "http://dbpedia.org/ontology/Country",
                "EntityName": null,
                "SourceNodeIndex": 0,
                "NodePredicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                "ValueType": null
            }
        ]
    }
]